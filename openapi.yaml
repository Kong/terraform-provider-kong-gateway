components:
  parameters:
    ACLId:
      description: ID of the ACL to lookup
      example: f28acbfa-c866-4587-b688-0208ac24df21
      in: path
      name: ACLId
      required: true
      schema:
        type: string
      x-speakeasy-match: id
    BasicAuthId:
      description: ID of the Basic-auth credential to lookup
      example: 80db1b58-ca7c-4d21-b92a-64eb07725872
      in: path
      name: BasicAuthId
      required: true
      schema:
        type: string
      x-speakeasy-match: id
    CACertificateId:
      description: ID of the CA Certificate to lookup
      example: 3c31f18a-f27a-4f9b-8cd4-bf841554612f
      in: path
      name: CACertificateId
      required: true
      schema:
        type: string
      x-speakeasy-match: id
    CertificateId:
      description: ID of the Certificate to lookup
      example: ddf3cdaa-3329-4961-822a-ce6dbd38eff7
      in: path
      name: CertificateId
      required: true
      schema:
        type: string
      x-speakeasy-match: id
    ConsumerGroupId:
      description: ID of the Consumer Group to lookup
      example: ''
      in: path
      name: ConsumerGroupId
      required: true
      schema:
        type: string
      x-speakeasy-match: id
    ConsumerGroupIdManageConsumers:
      description: The UUID or name of the consumer group
      in: path
      name: ConsumerGroupId
      required: true
      schema:
        example: cf4c7e60-11db-49dd-b300-7c7e5f0f7e6b
        type: string
      x-speakeasy-name-override: consumer_group_id
    ConsumerIdForNestedEntities:
      description: Consumer ID for nested entities
      example: f28acbfa-c866-4587-b688-0208ac24df21
      in: path
      name: ConsumerIdForNestedEntities
      required: true
      schema:
        type: string
      x-speakeasy-name-override: consumer_id
    ConsumerIdOrUsername:
      description: ID or username of the Consumer to lookup
      example: c1059869-6fa7-4329-a5f5-5946d14ca2c5
      in: path
      name: ConsumerIdOrUsername
      required: true
      schema:
        type: string
      x-speakeasy-match: id
    HMACAuthId:
      description: ID of the HMAC-auth credential to lookup
      example: 70e7b00b-72f2-471b-a5ce-9c4171775360
      in: path
      name: HMACAuthId
      required: true
      schema:
        type: string
      x-speakeasy-match: id
    JWTId:
      description: ID of the JWT to lookup
      example: 4a7f5faa-8c96-46d6-8214-c87573ef2ac4
      in: path
      name: JWTId
      required: true
      schema:
        type: string
      x-speakeasy-match: id
    KeyAuthId:
      description: ID of the API-key to lookup
      example: ''
      in: path
      name: KeyAuthId
      required: true
      schema:
        type: string
      x-speakeasy-match: id
    KeyIdOrName:
      description: ID or name of the Key to lookup
      example: bba22c06-a632-42be-a018-1b9ff357b5b9
      in: path
      name: KeyIdOrName
      required: true
      schema:
        type: string
      x-speakeasy-match: id
    KeySetIdOrName:
      description: ID or name of the KeySet to lookup
      example: 6cc34248-50b4-4a81-9201-3bdf7a83f712
      in: path
      name: KeySetIdOrName
      required: true
      schema:
        type: string
      x-speakeasy-match: id
    MTLSAuthId:
      description: ID of the MTLS-auth credential to lookup
      example: ''
      in: path
      name: MTLSAuthId
      required: true
      schema:
        type: string
      x-speakeasy-match: id
    PaginationOffset:
      allowEmptyValue: true
      description: >-
        Offset from which to return the next set of resources. Use the value of
        the 'offset' field from the response of a list operation as input here
        to paginate through all the resources
      in: query
      name: offset
      schema:
        type: string
    PaginationSize:
      description: Number of resources to be returned.
      in: query
      name: size
      schema:
        default: 100
        maximum: 1000
        minimum: 1
        type: integer
    PaginationTagsFilter:
      allowEmptyValue: true
      description: >-
        A list of tags to filter the list of resources on. Multiple tags can be
        concatenated using ',' to mean AND or using '/' to mean OR.
      example: tag1,tag2
      in: query
      name: tags
      schema:
        type: string
    PartialId:
      description: ID of the Partial to lookup
      example: ''
      in: path
      name: PartialId
      required: true
      schema:
        type: string
      x-speakeasy-match: id
    PluginId:
      description: ID of the Plugin to lookup
      example: 3473c251-5b6c-4f45-b1ff-7ede735a366d
      in: path
      name: PluginId
      required: true
      schema:
        type: string
      x-speakeasy-match: id
    RouteIdOrName:
      description: ID or name of the Route to lookup
      example: a4326a41-aa12-44e3-93e4-6b6e58bfb9d7
      in: path
      name: RouteIdOrName
      required: true
      schema:
        type: string
      x-speakeasy-match: id
    SNIIdOrName:
      description: ID or name of the SNI to lookup
      example: 64c17a1a-b7d7-4a65-a5a4-42e4a7016e7f
      in: path
      name: SNIIdOrName
      required: true
      schema:
        type: string
      x-speakeasy-match: id
    ServiceIdOrName:
      description: ID or name of the Service to lookup
      example: 7fca84d6-7d37-4a74-a7b0-93e576089a41
      in: path
      name: ServiceIdOrName
      required: true
      schema:
        type: string
      x-speakeasy-match: id
    UpstreamIdForTarget:
      description: ID or target of the Target to lookup
      example: 5a078780-5d4c-4aae-984a-bdc6f52113d8
      in: path
      name: UpstreamIdForTarget
      required: true
      schema:
        type: string
      x-speakeasy-name-override: upstream_id
    UpstreamIdOrName:
      description: ID or name of the Upstream to lookup
      example: 426d620c-7058-4ae6-aacc-f85a3204a2c5
      in: path
      name: UpstreamIdOrName
      required: true
      schema:
        type: string
      x-speakeasy-match: id
    VaultIdOrPrefix:
      description: ID or prefix of the Vault to lookup
      example: 9d4d6d19-77c6-428e-a965-9bc9647633e9
      in: path
      name: VaultIdOrPrefix
      required: true
      schema:
        type: string
      x-speakeasy-match: id
    Workspace:
      description: The name or UUID of the workspace
      in: path
      name: workspace
      required: true
      schema:
        default: default
        example: 747d1e5-8246-4f65-a939-b392f1ee17f8
        type: string
    WorkspaceIdOrName:
      description: ID or name of the Workspace to lookup
      example: ''
      in: path
      name: WorkspaceIdOrName
      required: true
      schema:
        type: string
      x-speakeasy-match: id
  responses:
    HTTP401Error:
      content:
        application/json:
          examples:
            DuplicateApiKey:
              summary: Duplicate API key found
              value:
                message: Duplicate API key found
                status: 401
            InvalidAuthCred:
              summary: Invalid authentication credentials
              value:
                message: Unauthorized
                status: 401
            NoAPIKey:
              summary: No API key found
              value:
                message: No API key found in request
                status: 401
          schema:
            $ref: '#/components/schemas/GatewayUnauthorizedError'
      description: Unauthorized
  schemas:
    ACL:
      additionalProperties: false
      example:
        consumer:
          id: 84a73fb8-50fc-44a7-a4d5-aa17728ee83f
        group: foo
        id: b1f34145-0343-41a4-9602-4c69dec2f269
      properties:
        consumer:
          nullable: true
          properties:
            id:
              type: string
          type: object
          x-foreign: true
          x-speakeasy-terraform-ignore: true
        created_at:
          description: Unix epoch when the resource was created.
          nullable: true
          type: integer
        group:
          type: string
        id:
          description: A string representing a UUID (universally unique identifier).
          nullable: true
          type: string
        tags:
          description: A set of strings representing tags.
          items:
            description: A string representing a tag.
            type: string
          nullable: true
          type: array
      required:
        - group
      type: object
      x-speakeasy-entity: ACL
    ACLWithoutParents:
      additionalProperties: false
      example:
        group: foo
        id: b1f34145-0343-41a4-9602-4c69dec2f269
      properties:
        consumer:
          nullable: true
          properties:
            id:
              type: string
          type: object
          x-foreign: true
          x-speakeasy-terraform-ignore: true
        created_at:
          description: Unix epoch when the resource was created.
          nullable: true
          type: integer
        group:
          type: string
        id:
          description: A string representing a UUID (universally unique identifier).
          nullable: true
          type: string
        tags:
          description: A set of strings representing tags.
          items:
            description: A string representing a tag.
            type: string
          nullable: true
          type: array
      required:
        - group
      type: object
      x-speakeasy-entity: ACL
    BasicAuth:
      additionalProperties: false
      example:
        consumer:
          id: 84a73fb8-50fc-44a7-a4d5-aa17728ee83f
        id: b2f34145-0343-41a4-9602-4c69dec2f269
        password: hashedsoopersecretvalue
        username: darius
      properties:
        consumer:
          nullable: true
          properties:
            id:
              type: string
          type: object
          x-foreign: true
          x-speakeasy-terraform-ignore: true
        created_at:
          description: Unix epoch when the resource was created.
          nullable: true
          type: integer
        id:
          description: A string representing a UUID (universally unique identifier).
          nullable: true
          type: string
        password:
          type: string
          writeOnly: true
        tags:
          description: A set of strings representing tags.
          items:
            description: A string representing a tag.
            type: string
          nullable: true
          type: array
        username:
          type: string
      required:
        - password
        - username
      type: object
      x-speakeasy-entity: BasicAuth
    BasicAuthPlugin:
      allOf:
        - $ref: '#/components/schemas/PluginBase'
        - $ref: '#/components/schemas/BasicAuthPluginConfig'
      x-speakeasy-entity: PluginBasicAuth
    BasicAuthPluginConfig:
      properties:
        config:
          properties:
            anonymous:
              description: >-
                An optional string (Consumer UUID or username) value to use as
                an “anonymous” consumer if authentication fails. If empty
                (default null), the request will fail with an authentication
                failure `4xx`. Please note that this value must refer to the
                Consumer `id` or `username` attribute, and **not** its
                `custom_id`.
              type: string
            hide_credentials:
              default: false
              description: >-
                An optional boolean value telling the plugin to show or hide the
                credential from the upstream service. If `true`, the plugin will
                strip the credential from the request (i.e. the `Authorization`
                header) before proxying it.
              type: boolean
            realm:
              default: service
              description: >-
                When authentication fails the plugin sends `WWW-Authenticate`
                header with `realm` attribute value.
              type: string
          type: object
        name:
          const: basic-auth
          type: string
        protocols:
          default:
            - grpc
            - grpcs
            - http
            - https
            - ws
            - wss
          description: >-
            A list of the request protocols that will trigger this plugin. The
            default value, as well as the possible values allowed on this field,
            may change depending on the plugin type. For example, plugins that
            only work in stream mode will only support tcp and tls.
          format: set
          items:
            enum:
              - grpc
              - grpcs
              - http
              - https
              - ws
              - wss
            type: string
          type: array
        route:
          additionalProperties: false
          description: >-
            If set, the plugin will only activate when receiving requests via
            the specified route. Leave unset for the plugin to activate
            regardless of the route being used.
          properties:
            id:
              type: string
          type: object
        service:
          additionalProperties: false
          description: >-
            If set, the plugin will only activate when receiving requests via
            one of the routes belonging to the specified Service. Leave unset
            for the plugin to activate regardless of the Service being matched.
          properties:
            id:
              type: string
          type: object
    BasicAuthWithoutParents:
      additionalProperties: false
      example:
        id: b2f34145-0343-41a4-9602-4c69dec2f269
        password: hashedsoopersecretvalue
        username: darius
      properties:
        consumer:
          nullable: true
          properties:
            id:
              type: string
          type: object
          x-foreign: true
          x-speakeasy-terraform-ignore: true
        created_at:
          description: Unix epoch when the resource was created.
          nullable: true
          type: integer
        id:
          description: A string representing a UUID (universally unique identifier).
          nullable: true
          type: string
        password:
          type: string
          writeOnly: true
        tags:
          description: A set of strings representing tags.
          items:
            description: A string representing a tag.
            type: string
          nullable: true
          type: array
        username:
          type: string
      required:
        - password
        - username
      type: object
      x-speakeasy-entity: BasicAuth
    CACertificate:
      additionalProperties: false
      description: >-
        A CA certificate object represents a trusted CA. These objects are used
        by Kong to verify the validity of a client or server certificate.
      example:
        cert: |-
          -----BEGIN CERTIFICATE-----
          certificate-content
          -----END CERTIFICATE-----
        cert_digest: 9b8aaf19a276885f6c8a6bc48a30700fdb3a351d8b05374d153bfb7b178e2a9f
        created_at: 1706598432
        id: b2f34145-0343-41a4-9602-4c69dec2f260
        tags:
          - trusted
          - api
      properties:
        cert:
          description: PEM-encoded public certificate of the CA.
          type: string
        cert_digest:
          description: >-
            SHA256 hex digest of the public certificate. This field is read-only
            and it cannot be set by the caller, the value is automatically
            computed.
          nullable: true
          type: string
        created_at:
          description: Unix epoch when the resource was created.
          nullable: true
          type: integer
        id:
          description: A string representing a UUID (universally unique identifier).
          nullable: true
          type: string
        tags:
          description: >-
            An optional set of strings associated with the Certificate for
            grouping and filtering.
          items:
            description: A string representing a tag.
            type: string
          nullable: true
          type: array
        updated_at:
          description: Unix epoch when the resource was last updated.
          nullable: true
          type: integer
      required:
        - cert
      type: object
      x-speakeasy-entity: CACertificate
    Certificate:
      additionalProperties: false
      description: >-
        A certificate object represents a public certificate, and can be
        optionally paired with the corresponding private key. These objects are
        used by Kong to handle SSL/TLS termination for encrypted requests, or
        for use as a trusted CA store when validating peer certificate of
        client/service. Certificates are optionally associated with SNI objects
        to tie a cert/key pair to one or more hostnames. If intermediate
        certificates are required in addition to the main certificate, they
        should be concatenated together into one string according to the
        following order: main certificate on the top, followed by any
        intermediates.
      example:
        cert: |-
          -----BEGIN CERTIFICATE-----
          certificate-content
          -----END CERTIFICATE-----
        id: b2f34145-0343-41a4-9602-4c69dec2f269
        key: |-
          -----BEGIN PRIVATE KEY-----
          private-key-content
          -----END PRIVATE KEY-----
      properties:
        cert:
          description: >-
            PEM-encoded public certificate chain of the SSL key pair. This field
            is _referenceable_, which means it can be securely stored as a
            [secret](/gateway/latest/plan-and-deploy/security/secrets-management/getting-started)
            in a vault. References must follow a [specific
            format](/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
          type: string
        cert_alt:
          description: >-
            PEM-encoded public certificate chain of the alternate SSL key pair.
            This should only be set if you have both RSA and ECDSA types of
            certificate available and would like Kong to prefer serving using
            ECDSA certs when client advertises support for it. This field is
            _referenceable_, which means it can be securely stored as a
            [secret](/gateway/latest/plan-and-deploy/security/secrets-management/getting-started)
            in a vault. References must follow a [specific
            format](/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
          nullable: true
          type: string
        created_at:
          description: Unix epoch when the resource was created.
          nullable: true
          type: integer
        id:
          description: A string representing a UUID (universally unique identifier).
          nullable: true
          type: string
        key:
          description: >-
            PEM-encoded private key of the SSL key pair. This field is
            _referenceable_, which means it can be securely stored as a
            [secret](/gateway/latest/plan-and-deploy/security/secrets-management/getting-started)
            in a vault. References must follow a [specific
            format](/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
          type: string
        key_alt:
          description: >-
            PEM-encoded private key of the alternate SSL key pair. This should
            only be set if you have both RSA and ECDSA types of certificate
            available and would like Kong to prefer serving using ECDSA certs
            when client advertises support for it. This field is
            _referenceable_, which means it can be securely stored as a
            [secret](/gateway/latest/plan-and-deploy/security/secrets-management/getting-started)
            in a vault. References must follow a [specific
            format](/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
          nullable: true
          type: string
        snis:
          items:
            description: A string representing a wildcard host name, such as *.example.com.
            type: string
          nullable: true
          type: array
        tags:
          description: >-
            An optional set of strings associated with the Certificate for
            grouping and filtering.
          items:
            description: A string representing a tag.
            type: string
          nullable: true
          type: array
        updated_at:
          description: Unix epoch when the resource was last updated.
          nullable: true
          type: integer
      required:
        - cert
        - key
      type: object
      x-speakeasy-entity: Certificate
    Consumer:
      additionalProperties: false
      description: >-
        The Consumer object represents a consumer - or a user - of a Service.
        You can either rely on Kong as the primary datastore, or you can map the
        consumer list with your database to keep consistency between Kong and
        your existing primary datastore.
      example:
        custom_id: '4200'
        id: 8a388226-80e8-4027-a486-25e4f7db5d21
        tags:
          - silver-tier
        username: bob-the-builder
      properties:
        created_at:
          description: Unix epoch when the resource was created.
          nullable: true
          type: integer
        custom_id:
          description: >-
            Field for storing an existing unique ID for the Consumer - useful
            for mapping Kong with users in your existing database. You must send
            either this field or `username` with the request.
          nullable: true
          type: string
        id:
          description: A string representing a UUID (universally unique identifier).
          nullable: true
          type: string
        tags:
          description: >-
            An optional set of strings associated with the Consumer for grouping
            and filtering.
          items:
            description: A string representing a tag.
            type: string
          nullable: true
          type: array
        updated_at:
          description: Unix epoch when the resource was last updated.
          nullable: true
          type: integer
        username:
          description: >-
            The unique username of the Consumer. You must send either this field
            or `custom_id` with the request.
          nullable: true
          type: string
      type: object
      x-speakeasy-entity: Consumer
    ConsumerGroup:
      additionalProperties: false
      properties:
        created_at:
          description: Unix epoch when the resource was created.
          nullable: true
          type: integer
        id:
          description: A string representing a UUID (universally unique identifier).
          nullable: true
          type: string
        name:
          description: The name of the consumer group.
          type: string
        tags:
          description: A set of strings representing tags.
          items:
            description: A string representing a tag.
            type: string
          nullable: true
          type: array
        updated_at:
          description: Unix epoch when the resource was last updated.
          nullable: true
          type: integer
      required:
        - name
      type: object
      x-speakeasy-entity: ConsumerGroup
    ConsumerGroupInsideWrapper:
      properties:
        consumer_group:
          $ref: '#/components/schemas/ConsumerGroup'
      type: object
    GatewayUnauthorizedError:
      properties:
        message:
          type: string
        status:
          type: integer
      required:
        - message
        - status
      type: object
    HMACAuth:
      additionalProperties: false
      example:
        consumer:
          id: 84a73fb8-50fc-44a7-a4d5-aa17728ee83f
        id: 75695322-e8a0-4109-aed4-5416b0308d85
        secret: wQazJ304DW5huJklHgUfjfiSyCyTAEDZ
        username: xerxes
      properties:
        consumer:
          nullable: true
          properties:
            id:
              type: string
          type: object
          x-foreign: true
          x-speakeasy-terraform-ignore: true
        created_at:
          description: Unix epoch when the resource was created.
          nullable: true
          type: integer
        id:
          description: A string representing a UUID (universally unique identifier).
          nullable: true
          type: string
        secret:
          nullable: true
          type: string
        tags:
          description: A set of strings representing tags.
          items:
            description: A string representing a tag.
            type: string
          nullable: true
          type: array
        username:
          type: string
      required:
        - username
      type: object
      x-speakeasy-entity: HMACAuth
    HMACAuthWithoutParents:
      additionalProperties: false
      example:
        id: 75695322-e8a0-4109-aed4-5416b0308d85
        secret: wQazJ304DW5huJklHgUfjfiSyCyTAEDZ
        username: xerxes
      properties:
        consumer:
          nullable: true
          properties:
            id:
              type: string
          type: object
          x-foreign: true
          x-speakeasy-terraform-ignore: true
        created_at:
          description: Unix epoch when the resource was created.
          nullable: true
          type: integer
        id:
          description: A string representing a UUID (universally unique identifier).
          nullable: true
          type: string
        secret:
          nullable: true
          type: string
        tags:
          description: A set of strings representing tags.
          items:
            description: A string representing a tag.
            type: string
          nullable: true
          type: array
        username:
          type: string
      required:
        - username
      type: object
      x-speakeasy-entity: HMACAuth
    JWT:
      additionalProperties: false
      example:
        algorithm: HS256
        consumer:
          id: 84a73fb8-50fc-44a7-a4d5-aa17728ee83f
        id: 75695322-e8a0-4109-aed4-5416b0308d85
        key: YJdmaDvVTJxtcWRCvkMikc8oELgAVNcz
        secret: C50k0bcahDhLNhLKSUBSR1OMiFGzNZ7X
      properties:
        algorithm:
          default: HS256
          enum:
            - ES256
            - ES256K
            - ES384
            - ES512
            - ESB256
            - ESB320
            - ESB384
            - ESB512
            - ESP256
            - ESP384
            - ESP512
            - Ed25519
            - Ed448
            - EdDSA
            - HS256
            - HS384
            - HS512
            - PS256
            - PS384
            - PS512
            - RS256
            - RS384
            - RS512
          nullable: true
          type: string
        consumer:
          nullable: true
          properties:
            id:
              type: string
          type: object
          x-foreign: true
          x-speakeasy-terraform-ignore: true
        created_at:
          description: Unix epoch when the resource was created.
          nullable: true
          type: integer
        id:
          description: A string representing a UUID (universally unique identifier).
          nullable: true
          type: string
        key:
          nullable: true
          type: string
        rsa_public_key:
          nullable: true
          type: string
        secret:
          nullable: true
          type: string
        tags:
          description: A set of strings representing tags.
          items:
            description: A string representing a tag.
            type: string
          nullable: true
          type: array
      type: object
      x-speakeasy-entity: JWT
    JWTWithoutParents:
      additionalProperties: false
      example:
        algorithm: HS256
        id: 75695322-e8a0-4109-aed4-5416b0308d85
        key: YJdmaDvVTJxtcWRCvkMikc8oELgAVNcz
        secret: C50k0bcahDhLNhLKSUBSR1OMiFGzNZ7X
      properties:
        algorithm:
          default: HS256
          enum:
            - ES256
            - ES256K
            - ES384
            - ES512
            - ESB256
            - ESB320
            - ESB384
            - ESB512
            - ESP256
            - ESP384
            - ESP512
            - Ed25519
            - Ed448
            - EdDSA
            - HS256
            - HS384
            - HS512
            - PS256
            - PS384
            - PS512
            - RS256
            - RS384
            - RS512
          nullable: true
          type: string
        consumer:
          nullable: true
          properties:
            id:
              type: string
          type: object
          x-foreign: true
          x-speakeasy-terraform-ignore: true
        created_at:
          description: Unix epoch when the resource was created.
          nullable: true
          type: integer
        id:
          description: A string representing a UUID (universally unique identifier).
          nullable: true
          type: string
        key:
          nullable: true
          type: string
        rsa_public_key:
          nullable: true
          type: string
        secret:
          nullable: true
          type: string
        tags:
          description: A set of strings representing tags.
          items:
            description: A string representing a tag.
            type: string
          nullable: true
          type: array
      type: object
      x-speakeasy-entity: JWT
    Key:
      additionalProperties: false
      description: >-
        A Key object holds a representation of asymmetric keys in various
        formats. When Kong or a Kong plugin requires a specific public or
        private key to perform certain operations, it can use this entity.
      example:
        id: d958f66b-8e99-44d2-b0b4-edd5bbf24658
        jwk: '{"alg":"RSA",  "kid": "42",  ...}'
        kid: '42'
        name: a-key
        pem:
          private_key: '-----BEGIN'
          public_key: '-----BEGIN'
        set:
          id: b86b331c-dcd0-4b3e-97ce-47c5a9543031
      properties:
        created_at:
          description: Unix epoch when the resource was created.
          nullable: true
          type: integer
        id:
          description: A string representing a UUID (universally unique identifier).
          nullable: true
          type: string
        jwk:
          description: A JSON Web Key represented as a string.
          nullable: true
          type: string
        kid:
          description: A unique identifier for a key.
          type: string
        name:
          description: The name to associate with the given keys.
          nullable: true
          type: string
        pem:
          description: A keypair in PEM format.
          nullable: true
          properties:
            private_key:
              type: string
            public_key:
              type: string
          type: object
        set:
          description: The id (an UUID) of the key-set with which to associate the key.
          nullable: true
          properties:
            id:
              type: string
          type: object
          x-foreign: true
        tags:
          description: >-
            An optional set of strings associated with the Key for grouping and
            filtering.
          items:
            description: A string representing a tag.
            type: string
          nullable: true
          type: array
        updated_at:
          description: Unix epoch when the resource was last updated.
          nullable: true
          type: integer
        x5t:
          description: X.509 certificate SHA-1 thumbprint.
          nullable: true
          type: string
      required:
        - kid
      type: object
      x-speakeasy-entity: Key
    KeyAuth:
      additionalProperties: false
      example:
        consumer:
          id: 84a73fb8-50fc-44a7-a4d5-aa17728ee83f
        id: b2f34145-0343-41a4-9602-4c69dec2f269
        key: IL1deIyHyQA40WpeLeA1bIUXuvTwlGjo
      properties:
        consumer:
          nullable: true
          properties:
            id:
              type: string
          type: object
          x-foreign: true
          x-speakeasy-terraform-ignore: true
        created_at:
          description: Unix epoch when the resource was created.
          nullable: true
          type: integer
        id:
          description: A string representing a UUID (universally unique identifier).
          nullable: true
          type: string
        key:
          nullable: true
          type: string
        tags:
          description: A set of strings representing tags.
          items:
            description: A string representing a tag.
            type: string
          nullable: true
          type: array
        ttl:
          description: key-auth ttl in seconds
          nullable: true
          type: integer
      type: object
      x-speakeasy-entity: KeyAuth
    KeyAuthWithoutParents:
      additionalProperties: false
      example:
        id: b2f34145-0343-41a4-9602-4c69dec2f269
        key: IL1deIyHyQA40WpeLeA1bIUXuvTwlGjo
      properties:
        consumer:
          nullable: true
          properties:
            id:
              type: string
          type: object
          x-foreign: true
          x-speakeasy-terraform-ignore: true
        created_at:
          description: Unix epoch when the resource was created.
          nullable: true
          type: integer
        id:
          description: A string representing a UUID (universally unique identifier).
          nullable: true
          type: string
        key:
          nullable: true
          type: string
        tags:
          description: A set of strings representing tags.
          items:
            description: A string representing a tag.
            type: string
          nullable: true
          type: array
        ttl:
          description: key-auth ttl in seconds
          nullable: true
          type: integer
      type: object
      x-speakeasy-entity: KeyAuth
    KeySet:
      additionalProperties: false
      example:
        id: b58c7d9d-e54f-444c-b24d-cdfc4159f61e
        name: example-key-set
        tags:
          - idp-keys
      properties:
        created_at:
          description: Unix epoch when the resource was created.
          nullable: true
          type: integer
        id:
          description: A string representing a UUID (universally unique identifier).
          nullable: true
          type: string
        name:
          description: The name to associate with the given key-set.
          nullable: true
          type: string
        tags:
          description: A set of strings representing tags.
          items:
            description: A string representing a tag.
            type: string
          nullable: true
          type: array
        updated_at:
          description: Unix epoch when the resource was last updated.
          nullable: true
          type: integer
      type: object
      x-speakeasy-entity: KeySet
    MTLSAuth:
      additionalProperties: false
      example:
        ca_certificate:
          id: b2f34145-0343-41a4-9602-4c69dec2f260
        consumer:
          id: 84a73fb8-50fc-44a7-a4d5-aa17728ee83f
        id: b2f34145-0343-41a4-9602-4c69dec2f269
        subject_name: CA_Subject_Name
      properties:
        ca_certificate:
          properties:
            id:
              type: string
          type: object
          x-foreign: true
        consumer:
          nullable: true
          properties:
            id:
              type: string
          type: object
          x-foreign: true
          x-speakeasy-terraform-ignore: true
        created_at:
          description: Unix epoch when the resource was created.
          nullable: true
          type: integer
        id:
          description: A string representing a UUID (universally unique identifier).
          nullable: true
          type: string
        subject_name:
          type: string
        tags:
          description: A set of strings representing tags.
          items:
            description: A string representing a tag.
            type: string
          nullable: true
          type: array
      required:
        - subject_name
      type: object
      x-speakeasy-entity: MTLSAuth
    MTLSAuthWithoutParents:
      additionalProperties: false
      example:
        ca_certificate:
          id: b2f34145-0343-41a4-9602-4c69dec2f260
        id: b2f34145-0343-41a4-9602-4c69dec2f269
        subject_name: CA_Subject_Name
      properties:
        ca_certificate:
          properties:
            id:
              type: string
          type: object
          x-foreign: true
        consumer:
          nullable: true
          properties:
            id:
              type: string
          type: object
          x-foreign: true
          x-speakeasy-terraform-ignore: true
        created_at:
          description: Unix epoch when the resource was created.
          nullable: true
          type: integer
        id:
          description: A string representing a UUID (universally unique identifier).
          nullable: true
          type: string
        subject_name:
          type: string
        tags:
          description: A set of strings representing tags.
          items:
            description: A string representing a tag.
            type: string
          nullable: true
          type: array
      required:
        - subject_name
      type: object
      x-speakeasy-entity: MTLSAuth
    PaginationNextResponse:
      description: URI to the next page (may be null)
      type: string
    PaginationOffsetResponse:
      description: >-
        Offset is used to paginate through the API. Provide this value to the
        next list operation to fetch the next page
      type: string
    Partial:
      discriminator:
        mapping:
          redis-ce: '#/components/schemas/PartialRedisCe'
          redis-ee: '#/components/schemas/PartialRedisEe'
        propertyName: type
      oneOf:
        - $ref: '#/components/schemas/PartialRedisCe'
        - $ref: '#/components/schemas/PartialRedisEe'
      type: object
      x-speakeasy-entity: Partial
    PartialRedisCe:
      additionalProperties: false
      example:
        config:
          database: 0
          host: localhost
          password: password
          port: 6379
          server_name: redis
          ssl: false
          ssl_verify: false
          timeout: 2000
          username: username
        type: redis-ce
      properties:
        config:
          properties:
            database:
              default: 0
              description: >-
                Database to use for the Redis connection when using the `redis`
                strategy
              type: integer
            host:
              description: A string representing a host name, such as example.com.
              type: string
            password:
              description: >-
                Password to use for Redis connections. If undefined, no AUTH
                commands are sent to Redis.
              type: string
            port:
              default: 6379
              description: >-
                An integer representing a port number between 0 and 65535,
                inclusive.
              maximum: 65535
              minimum: 0
              type: integer
            server_name:
              description: >-
                A string representing an SNI (server name indication) value for
                TLS.
              type: string
            ssl:
              default: false
              description: If set to true, uses SSL to connect to Redis.
              type: boolean
            ssl_verify:
              default: false
              description: >-
                If set to true, verifies the validity of the server SSL
                certificate. If setting this parameter, also configure
                `lua_ssl_trusted_certificate` in `kong.conf` to specify the CA
                (or server) certificate used by your Redis server. You may also
                need to configure `lua_ssl_verify_depth` accordingly.
              type: boolean
            timeout:
              default: 2000
              description: >-
                An integer representing a timeout in milliseconds. Must be
                between 0 and 2^31-2.
              maximum: 2147483646
              minimum: 0
              type: integer
            username:
              description: >-
                Username to use for Redis connections. If undefined, ACL
                authentication won't be performed. This requires Redis v6.0.0+.
                To be compatible with Redis v5.x.y, you can set it to `default`.
              type: string
          type: object
        created_at:
          description: Unix epoch when the resource was created.
          nullable: true
          type: integer
        id:
          description: A string representing a UUID (universally unique identifier).
          nullable: true
          type: string
        name:
          description: A unique string representing a UTF-8 encoded name.
          nullable: true
          type: string
        tags:
          description: A set of strings representing tags.
          items:
            description: A string representing a tag.
            type: string
          nullable: true
          type: array
        type:
          const: redis-ce
          type: string
        updated_at:
          description: Unix epoch when the resource was last updated.
          nullable: true
          type: integer
      required:
        - type
        - config
      type: object
    PartialRedisEe:
      additionalProperties: false
      example:
        config:
          cluster_nodes:
            - ip: 192.168.1.10
              port: 6380
          connect_timeout: 2000
          database: 0
          host: localhost
          keepalive_pool_size: 256
          password: password
          port: 6379
          read_timeout: 1000
          send_timeout: 1000
          sentinel_nodes:
            - host: sentinel1.redis.server
              port: 26379
          server_name: redis-ee
          ssl: false
          ssl_verify: false
          username: username
        type: redis-ee
      properties:
        config:
          properties:
            cluster_max_redirections:
              default: 5
              description: Maximum retry attempts for redirection.
              type: integer
            cluster_nodes:
              description: >-
                Cluster addresses to use for Redis connections when the `redis`
                strategy is defined. Defining this field implies using a Redis
                Cluster. The minimum length of the array is 1 element.
              items:
                properties:
                  ip:
                    default: 127.0.0.1
                    description: A string representing a host name, such as example.com.
                    type: string
                  port:
                    default: 6379
                    description: >-
                      An integer representing a port number between 0 and 65535,
                      inclusive.
                    maximum: 65535
                    minimum: 0
                    type: integer
                type: object
              minLength: 1
              type: array
            connect_timeout:
              default: 2000
              description: >-
                An integer representing a timeout in milliseconds. Must be
                between 0 and 2^31-2.
              maximum: 2147483646
              minimum: 0
              type: integer
            connection_is_proxied:
              default: false
              description: >-
                If the connection to Redis is proxied (e.g. Envoy), set it
                `true`. Set the `host` and `port` to point to the proxy address.
              type: boolean
            database:
              default: 0
              description: >-
                Database to use for the Redis connection when using the `redis`
                strategy
              type: integer
            host:
              default: 127.0.0.1
              description: A string representing a host name, such as example.com.
              type: string
            keepalive_backlog:
              description: >-
                Limits the total number of opened connections for a pool. If the
                connection pool is full, connection queues above the limit go
                into the backlog queue. If the backlog queue is full, subsequent
                connect operations fail and return `nil`. Queued operations
                (subject to set timeouts) resume once the number of connections
                in the pool is less than `keepalive_pool_size`. If latency is
                high or throughput is low, try increasing this value.
                Empirically, this value is larger than `keepalive_pool_size`.
              maximum: 2147483646
              minimum: 0
              type: integer
            keepalive_pool_size:
              default: 256
              description: >-
                The size limit for every cosocket connection pool associated
                with every remote server, per worker process. If neither
                `keepalive_pool_size` nor `keepalive_backlog` is specified, no
                pool is created. If `keepalive_pool_size` isn't specified but
                `keepalive_backlog` is specified, then the pool uses the default
                value. Try to increase (e.g. 512) this value if latency is high
                or throughput is low.
              maximum: 2147483646
              minimum: 1
              type: integer
            password:
              description: >-
                Password to use for Redis connections. If undefined, no AUTH
                commands are sent to Redis.
              type: string
            port:
              default: 6379
              description: >-
                An integer representing a port number between 0 and 65535,
                inclusive.
              maximum: 65535
              minimum: 0
              type: integer
            read_timeout:
              default: 2000
              description: >-
                An integer representing a timeout in milliseconds. Must be
                between 0 and 2^31-2.
              maximum: 2147483646
              minimum: 0
              type: integer
            send_timeout:
              default: 2000
              description: >-
                An integer representing a timeout in milliseconds. Must be
                between 0 and 2^31-2.
              maximum: 2147483646
              minimum: 0
              type: integer
            sentinel_master:
              description: >-
                Sentinel master to use for Redis connections. Defining this
                value implies using Redis Sentinel.
              type: string
            sentinel_nodes:
              description: >-
                Sentinel node addresses to use for Redis connections when the
                `redis` strategy is defined. Defining this field implies using a
                Redis Sentinel. The minimum length of the array is 1 element.
              items:
                properties:
                  host:
                    default: 127.0.0.1
                    description: A string representing a host name, such as example.com.
                    type: string
                  port:
                    default: 6379
                    description: >-
                      An integer representing a port number between 0 and 65535,
                      inclusive.
                    maximum: 65535
                    minimum: 0
                    type: integer
                type: object
              minLength: 1
              type: array
            sentinel_password:
              description: >-
                Sentinel password to authenticate with a Redis Sentinel
                instance. If undefined, no AUTH commands are sent to Redis
                Sentinels.
              type: string
            sentinel_role:
              description: >-
                Sentinel role to use for Redis connections when the `redis`
                strategy is defined. Defining this value implies using Redis
                Sentinel.
              enum:
                - any
                - master
                - slave
              type: string
            sentinel_username:
              description: >-
                Sentinel username to authenticate with a Redis Sentinel
                instance. If undefined, ACL authentication won't be performed.
                This requires Redis v6.2.0+.
              type: string
            server_name:
              description: >-
                A string representing an SNI (server name indication) value for
                TLS.
              type: string
            ssl:
              default: false
              description: If set to true, uses SSL to connect to Redis.
              type: boolean
            ssl_verify:
              default: false
              description: >-
                If set to true, verifies the validity of the server SSL
                certificate. If setting this parameter, also configure
                `lua_ssl_trusted_certificate` in `kong.conf` to specify the CA
                (or server) certificate used by your Redis server. You may also
                need to configure `lua_ssl_verify_depth` accordingly.
              type: boolean
            username:
              description: >-
                Username to use for Redis connections. If undefined, ACL
                authentication won't be performed. This requires Redis v6.0.0+.
                To be compatible with Redis v5.x.y, you can set it to `default`.
              type: string
          type: object
        created_at:
          description: Unix epoch when the resource was created.
          nullable: true
          type: integer
        id:
          description: A string representing a UUID (universally unique identifier).
          nullable: true
          type: string
        name:
          description: A unique string representing a UTF-8 encoded name.
          nullable: true
          type: string
        tags:
          description: A set of strings representing tags.
          items:
            description: A string representing a tag.
            type: string
          nullable: true
          type: array
        type:
          const: redis-ee
          type: string
        updated_at:
          description: Unix epoch when the resource was last updated.
          nullable: true
          type: integer
      required:
        - type
        - config
      type: object
    PluginBase:
      additionalProperties: false
      description: >-
        A Plugin entity represents a plugin configuration that will be executed
        during the HTTP request/response lifecycle. It is how you can add
        functionalities to Services that run behind Kong, like Authentication or
        Rate Limiting for example. You can find more information about how to
        install and what values each plugin takes by visiting the [Kong
        Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration
        to a Service, every request made by a client to that Service will run
        said Plugin. If a Plugin needs to be tuned to different values for some
        specific Consumers, you can do so by creating a separate plugin instance
        that specifies both the Service and the Consumer, through the `service`
        and `consumer` fields.
      properties:
        created_at:
          description: Unix epoch when the resource was created.
          nullable: true
          type: integer
        enabled:
          default: true
          description: Whether the plugin is applied.
          nullable: true
          type: boolean
        id:
          description: A string representing a UUID (universally unique identifier).
          minLength: 1
          nullable: true
          type: string
        instance_name:
          description: A unique string representing a UTF-8 encoded name.
          nullable: true
          type: string
        name:
          description: >-
            The name of the Plugin that's going to be added. Currently, the
            Plugin must be installed in every Kong instance separately.
          minLength: 1
          type: string
        ordering:
          nullable: true
          properties:
            after:
              properties:
                access:
                  items:
                    type: string
                  type: array
              type: object
            before:
              properties:
                access:
                  items:
                    type: string
                  type: array
              type: object
          type: object
        partials:
          description: A list of partials to be used by the plugin.
          items:
            properties:
              id:
                description: A string representing a UUID (universally unique identifier).
                minLength: 1
                type: string
              name:
                description: A unique string representing a UTF-8 encoded name.
                type: string
              path:
                type: string
            type: object
          type: array
        tags:
          description: >-
            An optional set of strings associated with the Plugin for grouping
            and filtering.
          items:
            description: A string representing a tag.
            type: string
          nullable: true
          type: array
        updated_at:
          description: Unix epoch when the resource was last updated.
          nullable: true
          type: integer
      required:
        - name
      type: object
    Route:
      oneOf:
        - $ref: '#/components/schemas/RouteJson'
        - $ref: '#/components/schemas/RouteExpression'
    RouteExpression:
      additionalProperties: false
      description: >-
        Route entities define rules to match client requests. Each Route is
        associated with a Service, and a Service may have multiple Routes
        associated to it. Every request matching a given Route will be proxied
        to its associated Service. The combination of Routes and Services (and
        the separation of concerns between them) offers a powerful routing
        mechanism with which it is possible to define fine-grained entry-points
        in Kong leading to different upstream services of your infrastructure.
        You need at least one matching rule that applies to the protocol being
        matched by the Route.
      properties:
        created_at:
          description: Unix epoch when the resource was created.
          nullable: true
          type: integer
        expression:
          description: >-
            Use Router Expression to perform route match. This option is only
            available when `router_flavor` is set to `expressions`.
          nullable: true
          type: string
        https_redirect_status_code:
          default: 426
          description: >-
            The status code Kong responds with when all properties of a Route
            match except the protocol i.e. if the protocol of the request is
            `HTTP` instead of `HTTPS`. `Location` header is injected by Kong if
            the field is set to 301, 302, 307 or 308. Note: This config applies
            only if the Route is configured to only accept the `https` protocol.
          enum:
            - 301
            - 302
            - 307
            - 308
            - 426
          nullable: true
          type: integer
        id:
          description: A string representing a UUID (universally unique identifier).
          nullable: true
          type: string
        name:
          description: >-
            The name of the Route. Route names must be unique, and they are case
            sensitive. For example, there can be two different Routes named
            "test" and "Test".
          nullable: true
          type: string
        path_handling:
          default: v0
          description: >-
            Controls how the Service path, Route path and requested path are
            combined when sending a request to the upstream. See above for a
            detailed description of each behavior.
          enum:
            - v0
            - v1
          nullable: true
          type: string
        preserve_host:
          default: false
          description: >-
            When matching a Route via one of the `hosts` domain names, use the
            request `Host` header in the upstream request headers. If set to
            `false`, the upstream `Host` header will be that of the Service's
            `host`.
          nullable: true
          type: boolean
        priority:
          default: 0
          description: >-
            A number used to specify the matching order for expression routes.
            The higher the `priority`, the sooner an route will be evaluated.
            This field is ignored unless `expression` field is set.
          maximum: 70368744177663
          minimum: 0
          nullable: true
          type: integer
        protocols:
          default:
            - http
            - https
          description: >-
            An array of the protocols this Route should allow. See the [Route
            Object](#route-object) section for a list of accepted protocols.
            When set to only `"https"`, HTTP requests are answered with an
            upgrade error. When set to only `"http"`, HTTPS requests are
            answered with an error.
          items:
            description: A string representing a protocol, such as HTTP or HTTPS.
            enum:
              - grpc
              - grpcs
              - http
              - https
              - tcp
              - tls
              - tls_passthrough
              - udp
              - ws
              - wss
            type: string
          minLength: 1
          nullable: true
          type: array
        request_buffering:
          default: true
          description: >-
            Whether to enable request body buffering or not. With HTTP 1.1, it
            may make sense to turn this off on services that receive data with
            chunked transfer encoding.
          nullable: true
          type: boolean
        response_buffering:
          default: true
          description: >-
            Whether to enable response body buffering or not. With HTTP 1.1, it
            may make sense to turn this off on services that send data with
            chunked transfer encoding.
          nullable: true
          type: boolean
        service:
          description: >-
            The Service this Route is associated to. This is where the Route
            proxies traffic to.
          nullable: true
          properties:
            id:
              type: string
          type: object
          x-foreign: true
        strip_path:
          default: true
          description: >-
            When matching a Route via one of the `paths`, strip the matching
            prefix from the upstream request URL.
          nullable: true
          type: boolean
        tags:
          description: >-
            An optional set of strings associated with the Route for grouping
            and filtering.
          items:
            description: A string representing a tag.
            type: string
          nullable: true
          type: array
        updated_at:
          description: Unix epoch when the resource was last updated.
          nullable: true
          type: integer
      type: object
      x-speakeasy-entity: RouteExpression
    RouteJson:
      additionalProperties: false
      description: >-
        Route entities define rules to match client requests. Each Route is
        associated with a Service, and a Service may have multiple Routes
        associated to it. Every request matching a given Route will be proxied
        to its associated Service. The combination of Routes and Services (and
        the separation of concerns between them) offers a powerful routing
        mechanism with which it is possible to define fine-grained entry-points
        in Kong leading to different upstream services of your infrastructure.
        You need at least one matching rule that applies to the protocol being
        matched by the Route.
      example:
        hosts:
          - foo.example.com
          - foo.example.us
        id: 56c4566c-14cc-4132-9011-4139fcbbe50a
        name: example-route
        paths:
          - /v1
          - /v2
        service:
          id: bd380f99-659d-415e-b0e7-72ea05df3218
      properties:
        created_at:
          description: Unix epoch when the resource was created.
          nullable: true
          type: integer
        destinations:
          description: >-
            A list of IP destinations of incoming connections that match this
            Route when using stream routing. Each entry is an object with fields
            "ip" (optionally in CIDR range notation) and/or "port".
          items:
            properties:
              ip:
                description: >-
                  A string representing an IP address or CIDR block, such as
                  192.168.1.1 or 192.168.0.0/16.
                type: string
              port:
                description: >-
                  An integer representing a port number between 0 and 65535,
                  inclusive.
                maximum: 65535
                minimum: 0
                type: integer
            type: object
          nullable: true
          type: array
        headers:
          additionalProperties:
            items:
              type: string
            type: array
          description: >-
            One or more lists of values indexed by header name that will cause
            this Route to match if present in the request. The `Host` header
            cannot be used with this attribute: hosts should be specified using
            the `hosts` attribute. When `headers` contains only one value and
            that value starts with the special prefix `~*`, the value is
            interpreted as a regular expression.
          nullable: true
          type: object
        hosts:
          description: >-
            A list of domain names that match this Route. Note that the hosts
            value is case sensitive.
          items:
            type: string
          nullable: true
          type: array
        https_redirect_status_code:
          default: 426
          description: >-
            The status code Kong responds with when all properties of a Route
            match except the protocol i.e. if the protocol of the request is
            `HTTP` instead of `HTTPS`. `Location` header is injected by Kong if
            the field is set to 301, 302, 307 or 308. Note: This config applies
            only if the Route is configured to only accept the `https` protocol.
          enum:
            - 301
            - 302
            - 307
            - 308
            - 426
          nullable: true
          type: integer
        id:
          description: A string representing a UUID (universally unique identifier).
          nullable: true
          type: string
        methods:
          description: A list of HTTP methods that match this Route.
          items:
            description: >-
              A string representing an HTTP method, such as GET, POST, PUT, or
              DELETE. The string must contain only uppercase letters.
            type: string
          nullable: true
          type: array
        name:
          description: >-
            The name of the Route. Route names must be unique, and they are case
            sensitive. For example, there can be two different Routes named
            "test" and "Test".
          nullable: true
          type: string
        path_handling:
          default: v0
          description: >-
            Controls how the Service path, Route path and requested path are
            combined when sending a request to the upstream. See above for a
            detailed description of each behavior.
          enum:
            - v0
            - v1
          nullable: true
          type: string
        paths:
          description: A list of paths that match this Route.
          items:
            description: >-
              A string representing a router path. It must start with a forward
              slash ('/') for a fixed path, or the sequence '~/' for a regex
              path. It must not have empty segments.
            type: string
          nullable: true
          type: array
        preserve_host:
          default: false
          description: >-
            When matching a Route via one of the `hosts` domain names, use the
            request `Host` header in the upstream request headers. If set to
            `false`, the upstream `Host` header will be that of the Service's
            `host`.
          nullable: true
          type: boolean
        protocols:
          default:
            - http
            - https
          description: >-
            An array of the protocols this Route should allow. See the [Route
            Object](#route-object) section for a list of accepted protocols.
            When set to only `"https"`, HTTP requests are answered with an
            upgrade error. When set to only `"http"`, HTTPS requests are
            answered with an error.
          items:
            description: A string representing a protocol, such as HTTP or HTTPS.
            enum:
              - grpc
              - grpcs
              - http
              - https
              - tcp
              - tls
              - tls_passthrough
              - udp
              - ws
              - wss
            type: string
          minLength: 1
          nullable: true
          type: array
        regex_priority:
          default: 0
          description: >-
            A number used to choose which route resolves a given request when
            several routes match it using regexes simultaneously. When two
            routes match the path and have the same `regex_priority`, the older
            one (lowest `created_at`) is used. Note that the priority for
            non-regex routes is different (longer non-regex routes are matched
            before shorter ones).
          nullable: true
          type: integer
        request_buffering:
          default: true
          description: >-
            Whether to enable request body buffering or not. With HTTP 1.1, it
            may make sense to turn this off on services that receive data with
            chunked transfer encoding.
          nullable: true
          type: boolean
        response_buffering:
          default: true
          description: >-
            Whether to enable response body buffering or not. With HTTP 1.1, it
            may make sense to turn this off on services that send data with
            chunked transfer encoding.
          nullable: true
          type: boolean
        service:
          description: >-
            The Service this Route is associated to. This is where the Route
            proxies traffic to.
          nullable: true
          properties:
            id:
              type: string
          type: object
          x-foreign: true
        snis:
          description: A list of SNIs that match this Route when using stream routing.
          items:
            description: A string representing a wildcard host name, such as *.example.com.
            type: string
          nullable: true
          type: array
        sources:
          description: >-
            A list of IP sources of incoming connections that match this Route
            when using stream routing. Each entry is an object with fields "ip"
            (optionally in CIDR range notation) and/or "port".
          items:
            properties:
              ip:
                description: >-
                  A string representing an IP address or CIDR block, such as
                  192.168.1.1 or 192.168.0.0/16.
                type: string
              port:
                description: >-
                  An integer representing a port number between 0 and 65535,
                  inclusive.
                maximum: 65535
                minimum: 0
                type: integer
            type: object
          nullable: true
          type: array
        strip_path:
          default: true
          description: >-
            When matching a Route via one of the `paths`, strip the matching
            prefix from the upstream request URL.
          nullable: true
          type: boolean
        tags:
          description: >-
            An optional set of strings associated with the Route for grouping
            and filtering.
          items:
            description: A string representing a tag.
            type: string
          nullable: true
          type: array
        updated_at:
          description: Unix epoch when the resource was last updated.
          nullable: true
          type: integer
      type: object
      x-speakeasy-entity: Route
    SNI:
      additionalProperties: false
      description: >-
        An SNI object represents a many-to-one mapping of hostnames to a
        certificate. That is, a certificate object can have many hostnames
        associated with it; when Kong receives an SSL request, it uses the SNI
        field in the Client Hello to lookup the certificate object based on the
        SNI associated with the certificate.
      example:
        certificate:
          id: bd380f99-659d-415e-b0e7-72ea05df3218
        id: 36c4566c-14cc-4132-9011-4139fcbbe50a
        name: some.example.org
      properties:
        certificate:
          description: >-
            The id (a UUID) of the certificate with which to associate the SNI
            hostname. The Certificate must have a valid private key associated
            with it to be used by the SNI object.
          properties:
            id:
              type: string
          type: object
          x-foreign: true
        created_at:
          description: Unix epoch when the resource was created.
          nullable: true
          type: integer
        id:
          description: A string representing a UUID (universally unique identifier).
          nullable: true
          type: string
        name:
          description: The SNI name to associate with the given certificate.
          type: string
        tags:
          description: >-
            An optional set of strings associated with the SNIs for grouping and
            filtering.
          items:
            description: A string representing a tag.
            type: string
          nullable: true
          type: array
        updated_at:
          description: Unix epoch when the resource was last updated.
          nullable: true
          type: integer
      required:
        - name
        - certificate
      type: object
      x-speakeasy-entity: SNI
    Service:
      additionalProperties: false
      description: >-
        Service entities, as the name implies, are abstractions of each of your
        own upstream services. Examples of Services would be a data
        transformation microservice, a billing API, etc. The main attribute of a
        Service is its URL (where Kong should proxy traffic to), which can be
        set as a single string or by specifying its `protocol`, `host`, `port`
        and `path` individually. Services are associated to Routes (a Service
        can have many Routes associated with it). Routes are entry-points in
        Kong and define rules to match client requests. Once a Route is matched,
        Kong proxies the request to its associated Service. See the [Proxy
        Reference][proxy-reference] for a detailed explanation of how Kong
        proxies traffic.
      example:
        host: example.internal
        id: 49fd316e-c457-481c-9fc7-8079153e4f3c
        name: example-service
        path: /
        port: 80
        protocol: http
      properties:
        ca_certificates:
          description: >-
            Array of `CA Certificate` object UUIDs that are used to build the
            trust store while verifying upstream server's TLS certificate. If
            set to `null` when Nginx default is respected. If default CA list in
            Nginx are not specified and TLS verification is enabled, then
            handshake with upstream server will always fail (because no CA are
            trusted).
          items:
            type: string
          nullable: true
          type: array
        client_certificate:
          description: >-
            Certificate to be used as client certificate while TLS handshaking
            to the upstream server.
          nullable: true
          properties:
            id:
              type: string
          type: object
          x-foreign: true
        connect_timeout:
          default: 60000
          description: >-
            The timeout in milliseconds for establishing a connection to the
            upstream server.
          maximum: 2147483646
          minimum: 1
          nullable: true
          type: integer
        created_at:
          description: Unix epoch when the resource was created.
          nullable: true
          type: integer
        enabled:
          default: true
          description: >-
            Whether the Service is active. If set to `false`, the proxy behavior
            will be as if any routes attached to it do not exist (404). Default:
            `true`.
          nullable: true
          type: boolean
        host:
          description: >-
            The host of the upstream server. Note that the host value is case
            sensitive.
          type: string
        id:
          description: A string representing a UUID (universally unique identifier).
          minLength: 1
          nullable: true
          type: string
        name:
          description: The Service name.
          nullable: true
          type: string
        path:
          description: The path to be used in requests to the upstream server.
          nullable: true
          type: string
        port:
          default: 80
          description: The upstream server port.
          maximum: 65535
          minimum: 0
          nullable: true
          type: integer
        protocol:
          default: http
          description: The protocol used to communicate with the upstream.
          enum:
            - grpc
            - grpcs
            - http
            - https
            - tcp
            - tls
            - tls_passthrough
            - udp
            - ws
            - wss
          nullable: true
          type: string
        read_timeout:
          default: 60000
          description: >-
            The timeout in milliseconds between two successive read operations
            for transmitting a request to the upstream server.
          maximum: 2147483646
          minimum: 1
          nullable: true
          type: integer
        retries:
          default: 5
          description: The number of retries to execute upon failure to proxy.
          maximum: 32767
          minimum: 0
          nullable: true
          type: integer
        tags:
          description: >-
            An optional set of strings associated with the Service for grouping
            and filtering.
          items:
            description: A string representing a tag.
            type: string
          nullable: true
          type: array
        tls_sans:
          description: >-
            Additional Subject Alternative Names that can be matched on Upstream
            server's TLS certificate (in addition to `host`).
          nullable: true
          properties:
            dnsnames:
              description: A dnsName for TLS verification.
              items:
                description: >-
                  A string representing an SNI (server name indication) value
                  for TLS.
                type: string
              type: array
            uris:
              description: An URI for TLS verification.
              items:
                description: >-
                  A string representing a URL, such as
                  https://example.com/path/to/resource?q=search.
                type: string
              type: array
          type: object
        tls_verify:
          description: >-
            Whether to enable verification of upstream server TLS certificate.
            If set to `null`, then the Nginx default is respected.
          nullable: true
          type: boolean
        tls_verify_depth:
          description: >-
            Maximum depth of chain while verifying Upstream server's TLS
            certificate. If set to `null`, then the Nginx default is respected.
          maximum: 64
          minimum: 0
          nullable: true
          type: integer
        updated_at:
          description: Unix epoch when the resource was last updated.
          nullable: true
          type: integer
        url:
          description: >-
            Helper field to set `protocol`, `host`, `port` and `path` using a
            URL. This field is write-only and is not returned in responses.
          type: string
          writeOnly: true
        write_timeout:
          default: 60000
          description: >-
            The timeout in milliseconds between two successive write operations
            for transmitting a request to the upstream server.
          maximum: 2147483646
          minimum: 1
          nullable: true
          type: integer
      required:
        - host
      type: object
      x-speakeasy-entity: Service
    Target:
      additionalProperties: false
      description: >-
        A target is an ip address/hostname with a port that identifies an
        instance of a backend service. Every upstream can have many targets, and
        the targets can be dynamically added, modified, or deleted. Changes take
        effect on the fly. To disable a target, post a new one with `weight=0`;
        alternatively, use the `DELETE` convenience method to accomplish the
        same. The current target object definition is the one with the latest
        `created_at`.
      example:
        id: 089292a7-ba3d-4d88-acf0-97b4b2e2621a
        target: 203.0.113.42
        upstream:
          id: 5f1d7e76-2fed-4806-a6af-869984f025cb
        weight: 100
      properties:
        created_at:
          description: Unix epoch when the resource was created.
          nullable: true
          type: number
        failover:
          default: false
          description: Whether to use this target only as backup or not.
          nullable: true
          type: boolean
        id:
          description: A string representing a UUID (universally unique identifier).
          nullable: true
          type: string
        tags:
          description: >-
            An optional set of strings associated with the Target for grouping
            and filtering.
          items:
            description: A string representing a tag.
            type: string
          nullable: true
          type: array
        target:
          description: >-
            The target address (ip or hostname) and port. If the hostname
            resolves to an SRV record, the `port` value will be overridden by
            the value from the DNS record.
          nullable: true
          type: string
        updated_at:
          description: Unix epoch when the resource was last updated.
          nullable: true
          type: number
        upstream:
          description: >-
            The unique identifier or the name of the upstream for which to
            update the target.
          nullable: true
          properties:
            id:
              type: string
          type: object
          x-foreign: true
        weight:
          default: 100
          description: >-
            The weight this target gets within the upstream loadbalancer
            (`0`-`65535`). If the hostname resolves to an SRV record, the
            `weight` value will be overridden by the value from the DNS record.
          maximum: 65535
          minimum: 0
          nullable: true
          type: integer
      required:
        - target
      type: object
      x-speakeasy-entity: Target
    TargetWithoutParents:
      additionalProperties: false
      description: >-
        A target is an ip address/hostname with a port that identifies an
        instance of a backend service. Every upstream can have many targets, and
        the targets can be dynamically added, modified, or deleted. Changes take
        effect on the fly. To disable a target, post a new one with `weight=0`;
        alternatively, use the `DELETE` convenience method to accomplish the
        same. The current target object definition is the one with the latest
        `created_at`.
      example:
        id: 089292a7-ba3d-4d88-acf0-97b4b2e2621a
        target: 203.0.113.42
        weight: 100
      properties:
        created_at:
          description: Unix epoch when the resource was created.
          nullable: true
          type: number
        failover:
          default: false
          description: Whether to use this target only as backup or not.
          nullable: true
          type: boolean
        id:
          description: A string representing a UUID (universally unique identifier).
          nullable: true
          type: string
        tags:
          description: >-
            An optional set of strings associated with the Target for grouping
            and filtering.
          items:
            description: A string representing a tag.
            type: string
          nullable: true
          type: array
        target:
          description: >-
            The target address (ip or hostname) and port. If the hostname
            resolves to an SRV record, the `port` value will be overridden by
            the value from the DNS record.
          nullable: true
          type: string
        updated_at:
          description: Unix epoch when the resource was last updated.
          nullable: true
          type: number
        upstream:
          description: >-
            The unique identifier or the name of the upstream for which to
            update the target.
          nullable: true
          properties:
            id:
              type: string
          type: object
          x-foreign: true
        weight:
          default: 100
          description: >-
            The weight this target gets within the upstream loadbalancer
            (`0`-`65535`). If the hostname resolves to an SRV record, the
            `weight` value will be overridden by the value from the DNS record.
          maximum: 65535
          minimum: 0
          nullable: true
          type: integer
      required:
        - target
      type: object
      x-speakeasy-entity: Target
    Upstream:
      additionalProperties: false
      description: >-
        The upstream object represents a virtual hostname and can be used to
        loadbalance incoming requests over multiple services (targets). So for
        example an upstream named `service.v1.xyz` for a Service object whose
        `host` is `service.v1.xyz`. Requests for this Service would be proxied
        to the targets defined within the upstream. An upstream also includes a
        [health checker][healthchecks], which is able to enable and disable
        targets based on their ability or inability to serve requests. The
        configuration for the health checker is stored in the upstream object,
        and applies to all of its targets.
      example:
        algorithm: round-robin
        hash_fallback: none
        hash_on: none
        hash_on_cookie_path: /
        healthchecks:
          active:
            concurrency: 10
            healthy:
              http_statuses:
                - 200
                - 302
              interval: 0
              successes: 0
            http_path: /
            https_verify_certificate: true
            timeout: 1
            type: http
            unhealthy:
              http_failures: 0
              http_statuses:
                - 429
                - 404
                - 500
                - 501
                - 502
                - 503
                - 504
                - 505
              interval: 0
              tcp_failures: 0
              timeouts: 0
          passive:
            healthy:
              http_statuses:
                - 200
                - 201
                - 202
                - 203
                - 204
                - 205
                - 206
                - 207
                - 208
                - 226
                - 300
                - 301
                - 302
                - 303
                - 304
                - 305
                - 306
                - 307
                - 308
              successes: 0
            type: http
            unhealthy:
              http_failures: 0
              http_statuses:
                - 429
                - 500
                - 503
              tcp_failures: 0
              timeouts: 0
          threshold: 0
        id: 6eed5e9c-5398-4026-9a4c-d48f18a2431e
        name: api.example.internal
        slots: 10000
      properties:
        algorithm:
          default: round-robin
          description: Which load balancing algorithm to use.
          enum:
            - consistent-hashing
            - latency
            - least-connections
            - round-robin
            - sticky-sessions
          nullable: true
          type: string
        client_certificate:
          description: >-
            If set, the certificate to be used as client certificate while TLS
            handshaking to the upstream server.
          nullable: true
          properties:
            id:
              type: string
          type: object
          x-foreign: true
        created_at:
          description: Unix epoch when the resource was created.
          nullable: true
          type: integer
        hash_fallback:
          default: none
          description: >-
            What to use as hashing input if the primary `hash_on` does not
            return a hash (eg. header is missing, or no Consumer identified).
            Not available if `hash_on` is set to `cookie`.
          enum:
            - consumer
            - cookie
            - header
            - ip
            - none
            - path
            - query_arg
            - uri_capture
          nullable: true
          type: string
        hash_fallback_header:
          description: >-
            The header name to take the value from as hash input. Only required
            when `hash_fallback` is set to `header`.
          nullable: true
          type: string
        hash_fallback_query_arg:
          description: >-
            The name of the query string argument to take the value from as hash
            input. Only required when `hash_fallback` is set to `query_arg`.
          minLength: 1
          nullable: true
          type: string
        hash_fallback_uri_capture:
          description: >-
            The name of the route URI capture to take the value from as hash
            input. Only required when `hash_fallback` is set to `uri_capture`.
          minLength: 1
          nullable: true
          type: string
        hash_on:
          default: none
          description: >-
            What to use as hashing input. Using `none` results in a
            weighted-round-robin scheme with no hashing.
          enum:
            - consumer
            - cookie
            - header
            - ip
            - none
            - path
            - query_arg
            - uri_capture
          nullable: true
          type: string
        hash_on_cookie:
          description: >-
            The cookie name to take the value from as hash input. Only required
            when `hash_on` or `hash_fallback` is set to `cookie`. If the
            specified cookie is not in the request, Kong will generate a value
            and set the cookie in the response.
          nullable: true
          type: string
        hash_on_cookie_path:
          default: /
          description: >-
            The cookie path to set in the response headers. Only required when
            `hash_on` or `hash_fallback` is set to `cookie`.
          nullable: true
          type: string
        hash_on_header:
          description: >-
            The header name to take the value from as hash input. Only required
            when `hash_on` is set to `header`.
          nullable: true
          type: string
        hash_on_query_arg:
          description: >-
            The name of the query string argument to take the value from as hash
            input. Only required when `hash_on` is set to `query_arg`.
          minLength: 1
          nullable: true
          type: string
        hash_on_uri_capture:
          description: >-
            The name of the route URI capture to take the value from as hash
            input. Only required when `hash_on` is set to `uri_capture`.
          minLength: 1
          nullable: true
          type: string
        healthchecks:
          default:
            active:
              concurrency: 10
              healthy:
                http_statuses:
                  - 200
                  - 302
                interval: 0
                successes: 0
              http_path: /
              https_verify_certificate: true
              timeout: 1
              type: http
              unhealthy:
                http_failures: 0
                http_statuses:
                  - 429
                  - 404
                  - 500
                  - 501
                  - 502
                  - 503
                  - 504
                  - 505
                interval: 0
                tcp_failures: 0
                timeouts: 0
            passive:
              healthy:
                http_statuses:
                  - 200
                  - 201
                  - 202
                  - 203
                  - 204
                  - 205
                  - 206
                  - 207
                  - 208
                  - 226
                  - 300
                  - 301
                  - 302
                  - 303
                  - 304
                  - 305
                  - 306
                  - 307
                  - 308
                successes: 0
              type: http
              unhealthy:
                http_failures: 0
                http_statuses:
                  - 429
                  - 500
                  - 503
                tcp_failures: 0
                timeouts: 0
          description: The array of healthchecks.
          nullable: true
          properties:
            active:
              default:
                concurrency: 10
                healthy:
                  http_statuses:
                    - 200
                    - 302
                  interval: 0
                  successes: 0
                http_path: /
                https_verify_certificate: true
                timeout: 1
                type: http
                unhealthy:
                  http_failures: 0
                  http_statuses:
                    - 429
                    - 404
                    - 500
                    - 501
                    - 502
                    - 503
                    - 504
                    - 505
                  interval: 0
                  tcp_failures: 0
                  timeouts: 0
              properties:
                concurrency:
                  default: 10
                  maximum: 2147483648
                  minimum: 1
                  type: integer
                headers:
                  additionalProperties:
                    items:
                      type: string
                    type: array
                  description: A map of header names to arrays of header values.
                  type: object
                healthy:
                  default:
                    http_statuses:
                      - 200
                      - 302
                    interval: 0
                    successes: 0
                  properties:
                    http_statuses:
                      default:
                        - 200
                        - 302
                      items:
                        maximum: 999
                        minimum: 100
                        type: integer
                      type: array
                    interval:
                      default: 0
                      maximum: 65535
                      minimum: 0
                      type: number
                    successes:
                      default: 0
                      maximum: 255
                      minimum: 0
                      type: integer
                  type: object
                http_path:
                  default: /
                  description: >-
                    A string representing a URL path, such as /path/to/resource.
                    Must start with a forward slash (/) and must not contain
                    empty segments (i.e., two consecutive forward slashes).
                  type: string
                https_sni:
                  description: >-
                    A string representing an SNI (server name indication) value
                    for TLS.
                  type: string
                https_verify_certificate:
                  default: true
                  type: boolean
                timeout:
                  default: 1
                  maximum: 65535
                  minimum: 0
                  type: number
                type:
                  default: http
                  enum:
                    - grpc
                    - grpcs
                    - http
                    - https
                    - tcp
                  type: string
                unhealthy:
                  default:
                    http_failures: 0
                    http_statuses:
                      - 429
                      - 404
                      - 500
                      - 501
                      - 502
                      - 503
                      - 504
                      - 505
                    interval: 0
                    tcp_failures: 0
                    timeouts: 0
                  properties:
                    http_failures:
                      default: 0
                      maximum: 255
                      minimum: 0
                      type: integer
                    http_statuses:
                      default:
                        - 429
                        - 404
                        - 500
                        - 501
                        - 502
                        - 503
                        - 504
                        - 505
                      items:
                        maximum: 999
                        minimum: 100
                        type: integer
                      type: array
                    interval:
                      default: 0
                      maximum: 65535
                      minimum: 0
                      type: number
                    tcp_failures:
                      default: 0
                      maximum: 255
                      minimum: 0
                      type: integer
                    timeouts:
                      default: 0
                      maximum: 255
                      minimum: 0
                      type: integer
                  type: object
              type: object
            passive:
              default:
                healthy:
                  http_statuses:
                    - 200
                    - 201
                    - 202
                    - 203
                    - 204
                    - 205
                    - 206
                    - 207
                    - 208
                    - 226
                    - 300
                    - 301
                    - 302
                    - 303
                    - 304
                    - 305
                    - 306
                    - 307
                    - 308
                  successes: 0
                type: http
                unhealthy:
                  http_failures: 0
                  http_statuses:
                    - 429
                    - 500
                    - 503
                  tcp_failures: 0
                  timeouts: 0
              properties:
                healthy:
                  default:
                    http_statuses:
                      - 200
                      - 201
                      - 202
                      - 203
                      - 204
                      - 205
                      - 206
                      - 207
                      - 208
                      - 226
                      - 300
                      - 301
                      - 302
                      - 303
                      - 304
                      - 305
                      - 306
                      - 307
                      - 308
                    successes: 0
                  properties:
                    http_statuses:
                      default:
                        - 200
                        - 201
                        - 202
                        - 203
                        - 204
                        - 205
                        - 206
                        - 207
                        - 208
                        - 226
                        - 300
                        - 301
                        - 302
                        - 303
                        - 304
                        - 305
                        - 306
                        - 307
                        - 308
                      items:
                        maximum: 999
                        minimum: 100
                        type: integer
                      type: array
                    successes:
                      default: 0
                      maximum: 255
                      minimum: 0
                      type: integer
                  type: object
                type:
                  default: http
                  enum:
                    - grpc
                    - grpcs
                    - http
                    - https
                    - tcp
                  type: string
                unhealthy:
                  default:
                    http_failures: 0
                    http_statuses:
                      - 429
                      - 500
                      - 503
                    tcp_failures: 0
                    timeouts: 0
                  properties:
                    http_failures:
                      default: 0
                      maximum: 255
                      minimum: 0
                      type: integer
                    http_statuses:
                      default:
                        - 429
                        - 500
                        - 503
                      items:
                        maximum: 999
                        minimum: 100
                        type: integer
                      type: array
                    tcp_failures:
                      default: 0
                      maximum: 255
                      minimum: 0
                      type: integer
                    timeouts:
                      default: 0
                      maximum: 255
                      minimum: 0
                      type: integer
                  type: object
              type: object
            threshold:
              default: 0
              maximum: 100
              minimum: 0
              type: number
          type: object
        host_header:
          description: >-
            The hostname to be used as `Host` header when proxying requests
            through Kong.
          nullable: true
          type: string
        id:
          description: A string representing a UUID (universally unique identifier).
          nullable: true
          type: string
        name:
          description: This is a hostname, which must be equal to the `host` of a Service.
          type: string
        slots:
          default: 10000
          description: >-
            The number of slots in the load balancer algorithm. If `algorithm`
            is set to `round-robin`, this setting determines the maximum number
            of slots. If `algorithm` is set to `consistent-hashing`, this
            setting determines the actual number of slots in the algorithm.
            Accepts an integer in the range `10`-`65536`.
          maximum: 65536
          minimum: 10
          nullable: true
          type: integer
        sticky_sessions_cookie:
          description: The cookie name to keep sticky sessions.
          nullable: true
          type: string
        sticky_sessions_cookie_path:
          default: /
          description: >-
            A string representing a URL path, such as /path/to/resource. Must
            start with a forward slash (/) and must not contain empty segments
            (i.e., two consecutive forward slashes).
          nullable: true
          type: string
        tags:
          description: >-
            An optional set of strings associated with the Upstream for grouping
            and filtering.
          items:
            description: A string representing a tag.
            type: string
          nullable: true
          type: array
        updated_at:
          description: Unix epoch when the resource was last updated.
          nullable: true
          type: integer
        use_srv_name:
          default: false
          description: >-
            If set, the balancer will use SRV hostname(if DNS Answer has SRV
            record) as the proxy upstream `Host`.
          nullable: true
          type: boolean
      required:
        - name
      type: object
      x-speakeasy-entity: Upstream
    Vault:
      additionalProperties: false
      description: >-
        Vault entities are used to configure different Vault connectors.
        Examples of Vaults are Environment Variables, Hashicorp Vault and AWS
        Secrets Manager. Configuring a Vault allows referencing the secrets with
        other entities. For example a certificate entity can store a reference
        to a certificate and key, stored in a vault, instead of storing the
        certificate and key within the entity. This allows a proper separation
        of secrets and configuration and prevents secret sprawl.
      example:
        config:
          prefix: ENV_PREFIX
        description: environment variable based vault
        id: 2747d1e5-8246-4f65-a939-b392f1ee17f8
        name: env
        prefix: env
        tags:
          - foo
          - bar
      properties:
        config:
          additionalProperties: true
          description: >-
            The configuration properties for the Vault which can be found on the
            vaults' documentation page.
          nullable: true
          type: object
        created_at:
          description: Unix epoch when the resource was created.
          nullable: true
          type: integer
        description:
          description: The description of the Vault entity.
          nullable: true
          type: string
        id:
          description: A string representing a UUID (universally unique identifier).
          nullable: true
          type: string
        name:
          description: >-
            The name of the Vault that's going to be added. Currently, the Vault
            implementation must be installed in every Kong instance.
          type: string
        prefix:
          description: >-
            The unique prefix (or identifier) for this Vault configuration. The
            prefix is used to load the right Vault configuration and
            implementation when referencing secrets with the other entities.
          type: string
        tags:
          description: >-
            An optional set of strings associated with the Vault for grouping
            and filtering.
          items:
            description: A string representing a tag.
            type: string
          nullable: true
          type: array
        updated_at:
          description: Unix epoch when the resource was last updated.
          nullable: true
          type: integer
      required:
        - name
        - prefix
      type: object
      x-speakeasy-entity: Vault
    Workspace:
      additionalProperties: false
      example:
        comment: Example workspace comment
        config:
          meta: {}
          portal: false
          portal_access_request_email: true
          portal_application_request_email: true
          portal_application_status_email: true
          portal_approved_email: true
          portal_auth: basic
          portal_auth_conf: some-auth-config
          portal_auto_approve: true
          portal_cors_origins:
            - https://example.com
            - https://another-origin.com
          portal_developer_meta_fields: >-
            [{"label":"Full
            Name","title":"full_name","validator":{"required":true,"type":"string"}}]
          portal_emails_from: admin@example.com
          portal_emails_reply_to: support@example.com
          portal_invite_email: true
          portal_is_legacy: false
          portal_reset_email: true
          portal_reset_success_email: true
          portal_session_conf: some-session-config
          portal_smtp_admin_emails:
            - admin@example.com
            - dev@example.com
          portal_token_exp: 3600
        created_at: 1706598432
        id: b58c7d9d-e54f-444c-b24d-cdfc4159f61e
        meta:
          color: '#ffcc00'
          thumbnail: https://example.com/image.png
        name: example-workspace
      properties:
        comment:
          description: A description or additional information about the workspace.
          nullable: true
          type: string
        config:
          nullable: true
          properties:
            meta:
              additionalProperties: true
              type: object
            portal:
              default: false
              type: boolean
            portal_access_request_email:
              type: boolean
            portal_application_request_email:
              type: boolean
            portal_application_status_email:
              type: boolean
            portal_approved_email:
              type: boolean
            portal_auth:
              type: string
            portal_auth_conf:
              type: string
            portal_auto_approve:
              type: boolean
            portal_cors_origins:
              items:
                type: string
              type: array
            portal_developer_meta_fields:
              default: >-
                [{"label":"Full
                Name","title":"full_name","validator":{"required":true,"type":"string"}}]
              type: string
            portal_emails_from:
              type: string
            portal_emails_reply_to:
              type: string
            portal_invite_email:
              type: boolean
            portal_is_legacy:
              type: boolean
            portal_reset_email:
              type: boolean
            portal_reset_success_email:
              type: boolean
            portal_session_conf:
              type: string
            portal_smtp_admin_emails:
              items:
                type: string
              type: array
            portal_token_exp:
              type: integer
          type: object
        created_at:
          description: Unix epoch when the resource was created.
          nullable: true
          type: integer
        id:
          description: A string representing a UUID (universally unique identifier).
          nullable: true
          type: string
        meta:
          nullable: true
          properties:
            color:
              type: string
            thumbnail:
              type: string
          type: object
        name:
          description: A unique string representing a UTF-8 encoded name.
          minLength: 1
          type: string
        updated_at:
          description: Unix epoch when the resource was last updated.
          nullable: true
          type: integer
      required:
        - name
      type: object
      x-speakeasy-entity: Workspace
  securitySchemes:
    adminToken:
      in: header
      name: Kong-Admin-Token
      type: apiKey
externalDocs:
  description: Documentation for Kong Gateway and its APIs
  url: https://developer.konghq.com
info:
  contact:
    email: support@konghq.com
    name: Kong Inc
    url: https://konghq.com
  description: >-
    OpenAPI 3.0 spec for Kong Gateway's Admin API.


    You can learn more about Kong Gateway at
    [developer.konghq.com](https://developer.konghq.com).

    Give Kong a star at the [Kong/kong](https://github.com/kong/kong)
    repository.
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  title: Kong Enterprise Admin API
  version: 0.0.1
openapi: 3.1.0
paths:
  /{workspace}/certificates:
    get:
      description: List all Certificates
      operationId: list-certificate
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
        - $ref: '#/components/parameters/Workspace'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Certificate'
                    type: array
                  next:
                    $ref: '#/components/schemas/PaginationNextResponse'
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
                type: object
          description: A successful response listing Certificates
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: List all Certificates
      tags:
        - Certificates
    post:
      description: Create a new Certificate
      operationId: create-certificate
      parameters:
        - $ref: '#/components/parameters/Workspace'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Certificate'
        description: Description of the new Certificate for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
          description: Successfully created Certificate
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Create a new Certificate
      tags:
        - Certificates
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: Certificate#create
  /{workspace}/certificates/{CertificateId}:
    delete:
      description: Delete a Certificate
      operationId: delete-certificate
      parameters:
        - $ref: '#/components/parameters/CertificateId'
        - $ref: '#/components/parameters/Workspace'
      responses:
        '204':
          description: Successfully deleted Certificate or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete a Certificate
      tags:
        - Certificates
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: Certificate#delete
    get:
      description: Get a Certificate using ID.
      operationId: get-certificate
      parameters:
        - $ref: '#/components/parameters/Workspace'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
          description: Successfully fetched Certificate
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      summary: Fetch a Certificate
      tags:
        - Certificates
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: Certificate#read
    parameters:
      - $ref: '#/components/parameters/CertificateId'
    put:
      description: Create or Update Certificate using ID.
      operationId: upsert-certificate
      parameters:
        - $ref: '#/components/parameters/Workspace'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Certificate'
        description: Description of the Certificate
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
          description: Successfully upserted Certificate
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Upsert a Certificate
      tags:
        - Certificates
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: Certificate#update
  /{workspace}/consumer_groups:
    get:
      description: List all Consumer Groups
      operationId: list-consumer_group
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
        - $ref: '#/components/parameters/Workspace'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/ConsumerGroup'
                    type: array
                  next:
                    $ref: '#/components/schemas/PaginationNextResponse'
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
                type: object
          description: A successful response listing Consumer Groups
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: List all Consumer Groups
      tags:
        - Consumer Groups
    post:
      description: Create a new Consumer Group
      operationId: create-consumer_group
      parameters:
        - $ref: '#/components/parameters/Workspace'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsumerGroup'
        description: Description of the new Consumer Group for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerGroup'
          description: Successfully created Consumer Group
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Create a new Consumer Group
      tags:
        - Consumer Groups
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: ConsumerGroup#create
  /{workspace}/consumer_groups/{ConsumerGroupId}:
    delete:
      description: Delete a Consumer Group
      operationId: delete-consumer_group
      parameters:
        - $ref: '#/components/parameters/ConsumerGroupId'
        - $ref: '#/components/parameters/Workspace'
      responses:
        '204':
          description: Successfully deleted Consumer Group or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete a Consumer Group
      tags:
        - Consumer Groups
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: ConsumerGroup#delete
    get:
      description: Get a Consumer Group using ID.
      operationId: get-consumer_group
      parameters:
        - $ref: '#/components/parameters/Workspace'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerGroupInsideWrapper'
          description: Successfully fetched Consumer Group
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      summary: Fetch a Consumer Group
      tags:
        - Consumer Groups
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: ConsumerGroup#read
    parameters:
      - $ref: '#/components/parameters/ConsumerGroupId'
    put:
      description: Create or Update Consumer Group using ID.
      operationId: upsert-consumer_group
      parameters:
        - $ref: '#/components/parameters/Workspace'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsumerGroup'
        description: Description of the Consumer Group
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerGroup'
          description: Successfully upserted Consumer Group
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Upsert a Consumer Group
      tags:
        - Consumer Groups
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: ConsumerGroup#update
  /{workspace}/consumer_groups/{ConsumerGroupId}/consumers:
    parameters:
      - $ref: '#/components/parameters/ConsumerGroupIdManageConsumers'
    post:
      description: Add a consumer to a consumer group
      operationId: add-consumer-to-group
      parameters:
        - $ref: '#/components/parameters/Workspace'
      requestBody:
        content:
          application/json:
            schema:
              properties:
                consumer:
                  example: cf4c7e60-11db-49dd-b300-7c7e5f0f7e6b
                  type: string
                  x-speakeasy-name-override: consumer_id
              type: object
      responses:
        '201':
          content:
            application/json:
              schema:
                properties:
                  consumer_group:
                    $ref: '#/components/schemas/ConsumerGroup'
                  consumers:
                    items:
                      $ref: '#/components/schemas/Consumer'
                    type: array
                type: object
          description: Consumer added to group
      summary: Add consumer to consumer group
      tags:
        - Consumer Groups
      x-speakeasy-entity-operation: ConsumerGroupMember#create
  /{workspace}/consumer_groups/{ConsumerGroupId}/consumers/{ConsumerIdOrUsername}:
    delete:
      description: Remove a consumer from a consumer group
      operationId: remove-consumer-from-group
      parameters:
        - $ref: '#/components/parameters/Workspace'
      responses:
        '204':
          description: Consumer removed from group
      summary: Remove consumer from consumer group
      tags:
        - Consumer Groups
      x-speakeasy-entity-operation: ConsumerGroupMember#delete
    parameters:
      - $ref: '#/components/parameters/ConsumerGroupIdManageConsumers'
      - in: path
        name: ConsumerIdOrUsername
        required: true
        schema:
          type: string
        x-speakeasy-name-override: consumer_id
  /{workspace}/consumers:
    get:
      description: List all Consumers
      operationId: list-consumer
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
        - $ref: '#/components/parameters/Workspace'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Consumer'
                    type: array
                  next:
                    $ref: '#/components/schemas/PaginationNextResponse'
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
                type: object
          description: A successful response listing Consumers
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: List all Consumers
      tags:
        - Consumers
    post:
      description: Create a new Consumer
      operationId: create-consumer
      parameters:
        - $ref: '#/components/parameters/Workspace'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Consumer'
        description: Description of the new Consumer for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consumer'
          description: Successfully created Consumer
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Create a new Consumer
      tags:
        - Consumers
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: Consumer#create
  /{workspace}/consumers/{ConsumerIdForNestedEntities}/acls:
    get:
      description: List all ACLs associated with a Consumer
      operationId: list-acl-with-consumer
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
        - $ref: '#/components/parameters/Workspace'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/ACL'
                    type: array
                  next:
                    $ref: '#/components/schemas/PaginationNextResponse'
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
                type: object
          description: A successful response listing ACLs
      summary: List all ACLs associated with a Consumer
      tags:
        - ACLs
    post:
      description: Create a new ACL associated with a Consumer
      operationId: create-acl-with-consumer
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
        - $ref: '#/components/parameters/Workspace'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ACLWithoutParents'
        description: Description of new ACL for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ACL'
          description: Successfully created ACL
      summary: Create a new ACL associated with a Consumer
      tags:
        - ACLs
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: ACL#create
  /{workspace}/consumers/{ConsumerIdForNestedEntities}/acls/{ACLId}:
    delete:
      description: Delete a an ACL associated with a Consumer using ID.
      operationId: delete-acl-with-consumer
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
        - $ref: '#/components/parameters/ACLId'
        - $ref: '#/components/parameters/Workspace'
      responses:
        '204':
          description: Successfully deleted ACL or the resource didn't exist
      summary: Delete a an ACL associated with a Consumer
      tags:
        - ACLs
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: ACL#delete
    get:
      description: Get an ACL associated with a Consumer using ID.
      operationId: get-acl-with-consumer
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
        - $ref: '#/components/parameters/ACLId'
        - $ref: '#/components/parameters/Workspace'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ACL'
          description: Successfully fetched ACL
        '404':
          description: Resource does not exist
      summary: Fetch an ACL associated with a Consumer
      tags:
        - ACLs
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: ACL#read
    put:
      description: Create or Update an ACL associated with a Consumer using ID.
      operationId: upsert-acl-with-consumer
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
        - $ref: '#/components/parameters/ACLId'
        - $ref: '#/components/parameters/Workspace'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ACLWithoutParents'
        description: Description of the ACL
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ACL'
          description: Successfully upserted ACL
      summary: Upsert an ACL associated with a Consumer
      tags:
        - ACLs
  /{workspace}/consumers/{ConsumerIdForNestedEntities}/basic-auth:
    get:
      description: List all Basic-auth credentials associated with a Consumer
      operationId: list-basic-auth-with-consumer
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
        - $ref: '#/components/parameters/Workspace'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/BasicAuth'
                    type: array
                  next:
                    $ref: '#/components/schemas/PaginationNextResponse'
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
                type: object
          description: A successful response listing Basic-auth credentials
      summary: List all Basic-auth credentials associated with a Consumer
      tags:
        - Basic-auth credentials
    post:
      description: Create a new Basic-auth credential associated with a Consumer
      operationId: create-basic-auth-with-consumer
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
        - $ref: '#/components/parameters/Workspace'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BasicAuthWithoutParents'
        description: Description of new Basic-auth credential for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicAuth'
          description: Successfully created Basic-auth credential
      summary: Create a new Basic-auth credential associated with a Consumer
      tags:
        - Basic-auth credentials
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: BasicAuth#create
  /{workspace}/consumers/{ConsumerIdForNestedEntities}/basic-auth/{BasicAuthId}:
    delete:
      description: Delete a a Basic-auth credential associated with a Consumer using ID.
      operationId: delete-basic-auth-with-consumer
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
        - $ref: '#/components/parameters/BasicAuthId'
        - $ref: '#/components/parameters/Workspace'
      responses:
        '204':
          description: >-
            Successfully deleted Basic-auth credential or the resource didn't
            exist
      summary: Delete a a Basic-auth credential associated with a Consumer
      tags:
        - Basic-auth credentials
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: BasicAuth#delete
    get:
      description: Get a Basic-auth credential associated with a Consumer using ID.
      operationId: get-basic-auth-with-consumer
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
        - $ref: '#/components/parameters/BasicAuthId'
        - $ref: '#/components/parameters/Workspace'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicAuth'
          description: Successfully fetched Basic-auth credential
        '404':
          description: Resource does not exist
      summary: Fetch a Basic-auth credential associated with a Consumer
      tags:
        - Basic-auth credentials
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: BasicAuth#read
    put:
      description: >-
        Create or Update a Basic-auth credential associated with a Consumer
        using ID.
      operationId: upsert-basic-auth-with-consumer
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
        - $ref: '#/components/parameters/BasicAuthId'
        - $ref: '#/components/parameters/Workspace'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BasicAuthWithoutParents'
        description: Description of the Basic-auth credential
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicAuth'
          description: Successfully upserted Basic-auth credential
      summary: Upsert a Basic-auth credential associated with a Consumer
      tags:
        - Basic-auth credentials
  /{workspace}/consumers/{ConsumerIdForNestedEntities}/hmac-auth:
    get:
      description: List all HMAC-auth credentials associated with a Consumer
      operationId: list-hmac-auth-with-consumer
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
        - $ref: '#/components/parameters/Workspace'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/HMACAuth'
                    type: array
                  next:
                    $ref: '#/components/schemas/PaginationNextResponse'
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
                type: object
          description: A successful response listing HMAC-auth credentials
      summary: List all HMAC-auth credentials associated with a Consumer
      tags:
        - HMAC-auth credentials
    post:
      description: Create a new HMAC-auth credential associated with a Consumer
      operationId: create-hmac-auth-with-consumer
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
        - $ref: '#/components/parameters/Workspace'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HMACAuthWithoutParents'
        description: Description of new HMAC-auth credential for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HMACAuth'
          description: Successfully created HMAC-auth credential
      summary: Create a new HMAC-auth credential associated with a Consumer
      tags:
        - HMAC-auth credentials
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: HMACAuth#create
  /{workspace}/consumers/{ConsumerIdForNestedEntities}/hmac-auth/{HMACAuthId}:
    delete:
      description: Delete a a HMAC-auth credential associated with a Consumer using ID.
      operationId: delete-hmac-auth-with-consumer
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
        - $ref: '#/components/parameters/HMACAuthId'
        - $ref: '#/components/parameters/Workspace'
      responses:
        '204':
          description: >-
            Successfully deleted HMAC-auth credential or the resource didn't
            exist
      summary: Delete a a HMAC-auth credential associated with a Consumer
      tags:
        - HMAC-auth credentials
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: HMACAuth#delete
    get:
      description: Get a HMAC-auth credential associated with a Consumer using ID.
      operationId: get-hmac-auth-with-consumer
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
        - $ref: '#/components/parameters/HMACAuthId'
        - $ref: '#/components/parameters/Workspace'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HMACAuth'
          description: Successfully fetched HMAC-auth credential
        '404':
          description: Resource does not exist
      summary: Fetch a HMAC-auth credential associated with a Consumer
      tags:
        - HMAC-auth credentials
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: HMACAuth#read
    put:
      description: >-
        Create or Update a HMAC-auth credential associated with a Consumer using
        ID.
      operationId: upsert-hmac-auth-with-consumer
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
        - $ref: '#/components/parameters/HMACAuthId'
        - $ref: '#/components/parameters/Workspace'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HMACAuthWithoutParents'
        description: Description of the HMAC-auth credential
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HMACAuth'
          description: Successfully upserted HMAC-auth credential
      summary: Upsert a HMAC-auth credential associated with a Consumer
      tags:
        - HMAC-auth credentials
  /{workspace}/consumers/{ConsumerIdForNestedEntities}/jwt:
    get:
      description: List all JWTs associated with a Consumer
      operationId: list-jwt-with-consumer
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
        - $ref: '#/components/parameters/Workspace'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/JWT'
                    type: array
                  next:
                    $ref: '#/components/schemas/PaginationNextResponse'
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
                type: object
          description: A successful response listing JWTs
      summary: List all JWTs associated with a Consumer
      tags:
        - JWTs
    post:
      description: Create a new JWT associated with a Consumer
      operationId: create-jwt-with-consumer
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
        - $ref: '#/components/parameters/Workspace'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JWTWithoutParents'
        description: Description of new JWT for creation
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWT'
          description: Successfully created JWT
      summary: Create a new JWT associated with a Consumer
      tags:
        - JWTs
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: JWT#create
  /{workspace}/consumers/{ConsumerIdForNestedEntities}/jwt/{JWTId}:
    delete:
      description: Delete a a JWT associated with a Consumer using ID.
      operationId: delete-jwt-with-consumer
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
        - $ref: '#/components/parameters/JWTId'
        - $ref: '#/components/parameters/Workspace'
      responses:
        '204':
          description: Successfully deleted JWT or the resource didn't exist
      summary: Delete a a JWT associated with a Consumer
      tags:
        - JWTs
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: JWT#delete
    get:
      description: Get a JWT associated with a Consumer using ID.
      operationId: get-jwt-with-consumer
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
        - $ref: '#/components/parameters/JWTId'
        - $ref: '#/components/parameters/Workspace'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWT'
          description: Successfully fetched JWT
        '404':
          description: Resource does not exist
      summary: Fetch a JWT associated with a Consumer
      tags:
        - JWTs
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: JWT#read
    put:
      description: Create or Update a JWT associated with a Consumer using ID.
      operationId: upsert-jwt-with-consumer
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
        - $ref: '#/components/parameters/JWTId'
        - $ref: '#/components/parameters/Workspace'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JWTWithoutParents'
        description: Description of the JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWT'
          description: Successfully upserted JWT
      summary: Upsert a JWT associated with a Consumer
      tags:
        - JWTs
  /{workspace}/consumers/{ConsumerIdForNestedEntities}/key-auth:
    get:
      description: List all API-keys associated with a Consumer
      operationId: list-key-auth-with-consumer
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
        - $ref: '#/components/parameters/Workspace'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/KeyAuth'
                    type: array
                  next:
                    $ref: '#/components/schemas/PaginationNextResponse'
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
                type: object
          description: A successful response listing API-keys
      summary: List all API-keys associated with a Consumer
      tags:
        - API-keys
    post:
      description: Create a new API-key associated with a Consumer
      operationId: create-key-auth-with-consumer
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
        - $ref: '#/components/parameters/Workspace'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyAuthWithoutParents'
        description: Description of new API-key for creation
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyAuth'
          description: Successfully created API-key
      summary: Create a new API-key associated with a Consumer
      tags:
        - API-keys
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: KeyAuth#create
  /{workspace}/consumers/{ConsumerIdForNestedEntities}/key-auth/{KeyAuthId}:
    delete:
      description: Delete a an API-key associated with a Consumer using ID.
      operationId: delete-key-auth-with-consumer
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
        - $ref: '#/components/parameters/KeyAuthId'
        - $ref: '#/components/parameters/Workspace'
      responses:
        '204':
          description: Successfully deleted API-key or the resource didn't exist
      summary: Delete a an API-key associated with a Consumer
      tags:
        - API-keys
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: KeyAuth#delete
    get:
      description: Get an API-key associated with a Consumer using ID.
      operationId: get-key-auth-with-consumer
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
        - $ref: '#/components/parameters/KeyAuthId'
        - $ref: '#/components/parameters/Workspace'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyAuth'
          description: Successfully fetched API-key
        '404':
          description: Resource does not exist
      summary: Fetch an API-key associated with a Consumer
      tags:
        - API-keys
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: KeyAuth#read
    put:
      description: Create or Update an API-key associated with a Consumer using ID.
      operationId: upsert-key-auth-with-consumer
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
        - $ref: '#/components/parameters/KeyAuthId'
        - $ref: '#/components/parameters/Workspace'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyAuthWithoutParents'
        description: Description of the API-key
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyAuth'
          description: Successfully upserted API-key
      summary: Upsert an API-key associated with a Consumer
      tags:
        - API-keys
  /{workspace}/consumers/{ConsumerIdForNestedEntities}/mtls-auth:
    get:
      description: List all MTLS-auth credentials associated with a Consumer
      operationId: list-mtls-auth-with-consumer
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
        - $ref: '#/components/parameters/Workspace'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/MTLSAuth'
                    type: array
                  next:
                    $ref: '#/components/schemas/PaginationNextResponse'
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
                type: object
          description: A successful response listing MTLS-auth credentials
      summary: List all MTLS-auth credentials associated with a Consumer
      tags:
        - MTLS-auth credentials
    post:
      description: Create a new MTLS-auth credential associated with a Consumer
      operationId: create-mtls-auth-with-consumer
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
        - $ref: '#/components/parameters/Workspace'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MTLSAuthWithoutParents'
        description: Description of new MTLS-auth credential for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MTLSAuth'
          description: Successfully created MTLS-auth credential
      summary: Create a new MTLS-auth credential associated with a Consumer
      tags:
        - MTLS-auth credentials
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: MTLSAuth#create
  /{workspace}/consumers/{ConsumerIdForNestedEntities}/mtls-auth/{MTLSAuthId}:
    delete:
      description: Delete a a MTLS-auth credential associated with a Consumer using ID.
      operationId: delete-mtls-auth-with-consumer
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
        - $ref: '#/components/parameters/MTLSAuthId'
        - $ref: '#/components/parameters/Workspace'
      responses:
        '204':
          description: >-
            Successfully deleted MTLS-auth credential or the resource didn't
            exist
      summary: Delete a a MTLS-auth credential associated with a Consumer
      tags:
        - MTLS-auth credentials
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: MTLSAuth#delete
    get:
      description: Get a MTLS-auth credential associated with a Consumer using ID.
      operationId: get-mtls-auth-with-consumer
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
        - $ref: '#/components/parameters/MTLSAuthId'
        - $ref: '#/components/parameters/Workspace'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MTLSAuth'
          description: Successfully fetched MTLS-auth credential
        '404':
          description: Resource does not exist
      summary: Fetch a MTLS-auth credential associated with a Consumer
      tags:
        - MTLS-auth credentials
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: MTLSAuth#read
    put:
      description: >-
        Create or Update a MTLS-auth credential associated with a Consumer using
        ID.
      operationId: upsert-mtls-auth-with-consumer
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
        - $ref: '#/components/parameters/MTLSAuthId'
        - $ref: '#/components/parameters/Workspace'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MTLSAuthWithoutParents'
        description: Description of the MTLS-auth credential
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MTLSAuth'
          description: Successfully upserted MTLS-auth credential
      summary: Upsert a MTLS-auth credential associated with a Consumer
      tags:
        - MTLS-auth credentials
  /{workspace}/consumers/{ConsumerIdOrUsername}:
    delete:
      description: Delete a Consumer
      operationId: delete-consumer
      parameters:
        - $ref: '#/components/parameters/ConsumerIdOrUsername'
        - $ref: '#/components/parameters/Workspace'
      responses:
        '204':
          description: Successfully deleted Consumer or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete a Consumer
      tags:
        - Consumers
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: Consumer#delete
    get:
      description: Get a Consumer using ID or username.
      operationId: get-consumer
      parameters:
        - $ref: '#/components/parameters/Workspace'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consumer'
          description: Successfully fetched Consumer
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      summary: Fetch a Consumer
      tags:
        - Consumers
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: Consumer#read
    parameters:
      - $ref: '#/components/parameters/ConsumerIdOrUsername'
    put:
      description: Create or Update Consumer using ID or username.
      operationId: upsert-consumer
      parameters:
        - $ref: '#/components/parameters/Workspace'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Consumer'
        description: Description of the Consumer
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consumer'
          description: Successfully upserted Consumer
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Upsert a Consumer
      tags:
        - Consumers
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: Consumer#update
  /{workspace}/key-sets:
    get:
      description: List all KeySets
      operationId: list-key-set
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
        - $ref: '#/components/parameters/Workspace'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/KeySet'
                    type: array
                  next:
                    $ref: '#/components/schemas/PaginationNextResponse'
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
                type: object
          description: A successful response listing KeySets
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: List all KeySets
      tags:
        - KeySets
    post:
      description: Create a new KeySet
      operationId: create-key-set
      parameters:
        - $ref: '#/components/parameters/Workspace'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeySet'
        description: Description of the new KeySet for creation
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeySet'
          description: Successfully created KeySet
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Create a new KeySet
      tags:
        - KeySets
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: KeySet#create
  /{workspace}/key-sets/{KeySetIdOrName}:
    delete:
      description: Delete a KeySet
      operationId: delete-key-set
      parameters:
        - $ref: '#/components/parameters/KeySetIdOrName'
        - $ref: '#/components/parameters/Workspace'
      responses:
        '204':
          description: Successfully deleted KeySet or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete a KeySet
      tags:
        - KeySets
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: KeySet#delete
    get:
      description: Get a KeySet using ID or name.
      operationId: get-key-set
      parameters:
        - $ref: '#/components/parameters/Workspace'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeySet'
          description: Successfully fetched KeySet
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      summary: Fetch a KeySet
      tags:
        - KeySets
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: KeySet#read
    parameters:
      - $ref: '#/components/parameters/KeySetIdOrName'
    put:
      description: Create or Update KeySet using ID or name.
      operationId: upsert-key-set
      parameters:
        - $ref: '#/components/parameters/Workspace'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeySet'
        description: Description of the KeySet
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeySet'
          description: Successfully upserted KeySet
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Upsert a KeySet
      tags:
        - KeySets
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: KeySet#update
  /{workspace}/keys:
    get:
      description: List all Keys
      operationId: list-key
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
        - $ref: '#/components/parameters/Workspace'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Key'
                    type: array
                  next:
                    $ref: '#/components/schemas/PaginationNextResponse'
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
                type: object
          description: A successful response listing Keys
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: List all Keys
      tags:
        - Keys
    post:
      description: Create a new Key
      operationId: create-key
      parameters:
        - $ref: '#/components/parameters/Workspace'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Key'
        description: Description of the new Key for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Key'
          description: Successfully created Key
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Create a new Key
      tags:
        - Keys
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: Key#create
  /{workspace}/keys/{KeyIdOrName}:
    delete:
      description: Delete a Key
      operationId: delete-key
      parameters:
        - $ref: '#/components/parameters/KeyIdOrName'
        - $ref: '#/components/parameters/Workspace'
      responses:
        '204':
          description: Successfully deleted Key or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete a Key
      tags:
        - Keys
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: Key#delete
    get:
      description: Get a Key using ID or name.
      operationId: get-key
      parameters:
        - $ref: '#/components/parameters/Workspace'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Key'
          description: Successfully fetched Key
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      summary: Fetch a Key
      tags:
        - Keys
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: Key#read
    parameters:
      - $ref: '#/components/parameters/KeyIdOrName'
    put:
      description: Create or Update Key using ID or name.
      operationId: upsert-key
      parameters:
        - $ref: '#/components/parameters/Workspace'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Key'
        description: Description of the Key
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Key'
          description: Successfully upserted Key
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Upsert a Key
      tags:
        - Keys
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: Key#update
  /{workspace}/partials:
    get:
      description: List all Partials
      operationId: list-partial
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
        - $ref: '#/components/parameters/Workspace'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Partial'
                    type: array
                  next:
                    $ref: '#/components/schemas/PaginationNextResponse'
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
                type: object
          description: A successful response listing Partials
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: List all Partials
      tags:
        - Partials
    post:
      description: Create a new Partial
      operationId: create-partial
      parameters:
        - $ref: '#/components/parameters/Workspace'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Partial'
        description: Description of the new Partial for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Partial'
          description: Successfully created Partial
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Create a new Partial
      tags:
        - Partials
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: Partial#create
  /{workspace}/partials/{PartialId}:
    delete:
      description: Delete a Partial
      operationId: delete-partial
      parameters:
        - $ref: '#/components/parameters/PartialId'
        - $ref: '#/components/parameters/Workspace'
      responses:
        '204':
          description: Successfully deleted Partial or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete a Partial
      tags:
        - Partials
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: Partial#delete
    get:
      description: Get a Partial using ID.
      operationId: get-partial
      parameters:
        - $ref: '#/components/parameters/Workspace'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Partial'
          description: Successfully fetched Partial
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      summary: Fetch a Partial
      tags:
        - Partials
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: Partial#read
    parameters:
      - $ref: '#/components/parameters/PartialId'
    put:
      description: Create or Update Partial using ID.
      operationId: upsert-partial
      parameters:
        - $ref: '#/components/parameters/Workspace'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Partial'
        description: Description of the Partial
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Partial'
          description: Successfully upserted Partial
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Upsert a Partial
      tags:
        - Partials
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: Partial#update
  /{workspace}/routes:
    get:
      description: List all Routes
      operationId: list-route
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
        - $ref: '#/components/parameters/Workspace'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Route'
                    type: array
                  next:
                    $ref: '#/components/schemas/PaginationNextResponse'
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
                type: object
          description: A successful response listing Routes
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: List all Routes
      tags:
        - Routes
    post:
      description: Create a new Route
      operationId: create-route
      parameters:
        - $ref: '#/components/parameters/Workspace'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RouteJson'
        description: Description of the new Route for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RouteJson'
          description: Successfully created Route
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Create a new Route
      tags:
        - Routes
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: Route#create
  /{workspace}/routes#RouteExpression:
    post:
      description: Create a new Route
      operationId: create-route-RouteExpression
      parameters:
        - $ref: '#/components/parameters/Workspace'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RouteExpression'
        description: Description of the new Route for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RouteExpression'
          description: Successfully created Route
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Create a new Route
      tags:
        - Routes
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: RouteExpression#create
  /{workspace}/routes/{RouteIdOrName}:
    delete:
      description: Delete a Route
      operationId: delete-route
      parameters:
        - $ref: '#/components/parameters/RouteIdOrName'
        - $ref: '#/components/parameters/Workspace'
      responses:
        '204':
          description: Successfully deleted Route or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete a Route
      tags:
        - Routes
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: Route#delete
    get:
      description: Get a Route using ID or name.
      operationId: get-route
      parameters:
        - $ref: '#/components/parameters/Workspace'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RouteJson'
          description: Successfully fetched Route
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      summary: Fetch a Route
      tags:
        - Routes
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: Route#read
    parameters:
      - $ref: '#/components/parameters/RouteIdOrName'
    put:
      description: Create or Update Route using ID or name.
      operationId: upsert-route
      parameters:
        - $ref: '#/components/parameters/Workspace'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RouteJson'
        description: Description of the Route
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RouteJson'
          description: Successfully upserted Route
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Upsert a Route
      tags:
        - Routes
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: Route#update
  /{workspace}/routes/{RouteIdOrName}#RouteExpression:
    delete:
      description: Delete a Route
      operationId: delete-route-RouteExpression
      parameters:
        - $ref: '#/components/parameters/RouteIdOrName'
        - $ref: '#/components/parameters/Workspace'
      responses:
        '204':
          description: Successfully deleted Route or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete a Route
      tags:
        - Routes
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: RouteExpression#delete
    get:
      description: Get a Route using ID or name.
      operationId: get-route-RouteExpression
      parameters:
        - $ref: '#/components/parameters/Workspace'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RouteExpression'
          description: Successfully fetched Route
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      summary: Fetch a Route
      tags:
        - Routes
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: RouteExpression#read
    parameters:
      - $ref: '#/components/parameters/RouteIdOrName'
    put:
      description: Create or Update Route using ID or name.
      operationId: upsert-route-RouteExpression
      parameters:
        - $ref: '#/components/parameters/Workspace'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RouteExpression'
        description: Description of the Route
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RouteExpression'
          description: Successfully upserted Route
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Upsert a Route
      tags:
        - Routes
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: RouteExpression#update
  /{workspace}/services:
    get:
      description: List all Services
      operationId: list-service
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
        - $ref: '#/components/parameters/Workspace'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Service'
                    type: array
                  next:
                    $ref: '#/components/schemas/PaginationNextResponse'
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
                type: object
          description: A successful response listing Services
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: List all Services
      tags:
        - Services
    post:
      description: Create a new Service
      operationId: create-service
      parameters:
        - $ref: '#/components/parameters/Workspace'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
        description: Description of the new Service for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
          description: Successfully created Service
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Create a new Service
      tags:
        - Services
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: Service#create
  /{workspace}/services/{ServiceIdOrName}:
    delete:
      description: Delete a Service
      operationId: delete-service
      parameters:
        - $ref: '#/components/parameters/ServiceIdOrName'
        - $ref: '#/components/parameters/Workspace'
      responses:
        '204':
          description: Successfully deleted Service or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete a Service
      tags:
        - Services
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: Service#delete
    get:
      description: Get a Service using ID or name.
      operationId: get-service
      parameters:
        - $ref: '#/components/parameters/Workspace'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
          description: Successfully fetched Service
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      summary: Fetch a Service
      tags:
        - Services
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: Service#read
    parameters:
      - $ref: '#/components/parameters/ServiceIdOrName'
    put:
      description: Create or Update Service using ID or name.
      operationId: upsert-service
      parameters:
        - $ref: '#/components/parameters/Workspace'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
        description: Description of the Service
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
          description: Successfully upserted Service
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Upsert a Service
      tags:
        - Services
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: Service#update
  /{workspace}/snis:
    get:
      description: List all SNIs
      operationId: list-sni
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
        - $ref: '#/components/parameters/Workspace'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/SNI'
                    type: array
                  next:
                    $ref: '#/components/schemas/PaginationNextResponse'
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
                type: object
          description: A successful response listing SNIs
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: List all SNIs
      tags:
        - SNIs
    post:
      description: Create a new SNI
      operationId: create-sni
      parameters:
        - $ref: '#/components/parameters/Workspace'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SNI'
        description: Description of the new SNI for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SNI'
          description: Successfully created SNI
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Create a new SNI
      tags:
        - SNIs
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: SNI#create
  /{workspace}/snis/{SNIIdOrName}:
    delete:
      description: Delete an SNI
      operationId: delete-sni
      parameters:
        - $ref: '#/components/parameters/SNIIdOrName'
        - $ref: '#/components/parameters/Workspace'
      responses:
        '204':
          description: Successfully deleted SNI or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete an SNI
      tags:
        - SNIs
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: SNI#delete
    get:
      description: Get an SNI using ID or name.
      operationId: get-sni
      parameters:
        - $ref: '#/components/parameters/Workspace'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SNI'
          description: Successfully fetched SNI
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      summary: Fetch an SNI
      tags:
        - SNIs
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: SNI#read
    parameters:
      - $ref: '#/components/parameters/SNIIdOrName'
    put:
      description: Create or Update SNI using ID or name.
      operationId: upsert-sni
      parameters:
        - $ref: '#/components/parameters/Workspace'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SNI'
        description: Description of the SNI
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SNI'
          description: Successfully upserted SNI
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Upsert a SNI
      tags:
        - SNIs
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: SNI#update
  /{workspace}/upstreams:
    get:
      description: List all Upstreams
      operationId: list-upstream
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
        - $ref: '#/components/parameters/Workspace'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Upstream'
                    type: array
                  next:
                    $ref: '#/components/schemas/PaginationNextResponse'
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
                type: object
          description: A successful response listing Upstreams
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: List all Upstreams
      tags:
        - Upstreams
    post:
      description: Create a new Upstream
      operationId: create-upstream
      parameters:
        - $ref: '#/components/parameters/Workspace'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Upstream'
        description: Description of the new Upstream for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Upstream'
          description: Successfully created Upstream
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Create a new Upstream
      tags:
        - Upstreams
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: Upstream#create
  /{workspace}/upstreams/{UpstreamIdForTarget}/targets:
    get:
      description: List all Targets associated with an Upstream
      operationId: list-target-with-upstream
      parameters:
        - $ref: '#/components/parameters/UpstreamIdForTarget'
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
        - $ref: '#/components/parameters/Workspace'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Target'
                    type: array
                  next:
                    $ref: '#/components/schemas/PaginationNextResponse'
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
                type: object
          description: A successful response listing Targets
      summary: List all Targets associated with an Upstream
      tags:
        - Targets
    post:
      description: Create a new Target associated with an Upstream
      operationId: create-target-with-upstream
      parameters:
        - $ref: '#/components/parameters/UpstreamIdForTarget'
        - $ref: '#/components/parameters/Workspace'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TargetWithoutParents'
        description: Description of new Target for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Target'
          description: Successfully created Target
      summary: Create a new Target associated with an Upstream
      tags:
        - Targets
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: Target#create
  /{workspace}/upstreams/{UpstreamIdOrName}:
    delete:
      description: Delete an Upstream
      operationId: delete-upstream
      parameters:
        - $ref: '#/components/parameters/UpstreamIdOrName'
        - $ref: '#/components/parameters/Workspace'
      responses:
        '204':
          description: Successfully deleted Upstream or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete an Upstream
      tags:
        - Upstreams
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: Upstream#delete
    get:
      description: Get an Upstream using ID or name.
      operationId: get-upstream
      parameters:
        - $ref: '#/components/parameters/Workspace'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Upstream'
          description: Successfully fetched Upstream
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      summary: Fetch an Upstream
      tags:
        - Upstreams
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: Upstream#read
    parameters:
      - $ref: '#/components/parameters/UpstreamIdOrName'
    put:
      description: Create or Update Upstream using ID or name.
      operationId: upsert-upstream
      parameters:
        - $ref: '#/components/parameters/Workspace'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Upstream'
        description: Description of the Upstream
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Upstream'
          description: Successfully upserted Upstream
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Upsert a Upstream
      tags:
        - Upstreams
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: Upstream#update
  /{workspace}/vaults:
    get:
      description: List all Vaults
      operationId: list-vault
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
        - $ref: '#/components/parameters/Workspace'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Vault'
                    type: array
                  next:
                    $ref: '#/components/schemas/PaginationNextResponse'
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
                type: object
          description: A successful response listing Vaults
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: List all Vaults
      tags:
        - Vaults
    post:
      description: Create a new Vault
      operationId: create-vault
      parameters:
        - $ref: '#/components/parameters/Workspace'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vault'
        description: Description of the new Vault for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vault'
          description: Successfully created Vault
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Create a new Vault
      tags:
        - Vaults
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: Vault#create
  /{workspace}/vaults/{VaultIdOrPrefix}:
    delete:
      description: Delete a Vault
      operationId: delete-vault
      parameters:
        - $ref: '#/components/parameters/VaultIdOrPrefix'
        - $ref: '#/components/parameters/Workspace'
      responses:
        '204':
          description: Successfully deleted Vault or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete a Vault
      tags:
        - Vaults
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: Vault#delete
    get:
      description: Get a Vault using ID or prefix.
      operationId: get-vault
      parameters:
        - $ref: '#/components/parameters/Workspace'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vault'
          description: Successfully fetched Vault
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      summary: Fetch a Vault
      tags:
        - Vaults
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: Vault#read
    parameters:
      - $ref: '#/components/parameters/VaultIdOrPrefix'
    put:
      description: Create or Update Vault using ID or prefix.
      operationId: upsert-vault
      parameters:
        - $ref: '#/components/parameters/Workspace'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vault'
        description: Description of the Vault
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vault'
          description: Successfully upserted Vault
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Upsert a Vault
      tags:
        - Vaults
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: Vault#update
  /ca_certificates:
    get:
      description: List all CA Certificates
      operationId: list-ca_certificate
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/CACertificate'
                    type: array
                  next:
                    $ref: '#/components/schemas/PaginationNextResponse'
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
                type: object
          description: A successful response listing CA Certificates
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: List all CA Certificates
      tags:
        - CA Certificates
    post:
      description: Create a new CA Certificate
      operationId: create-ca_certificate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CACertificate'
        description: Description of the new CA Certificate for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CACertificate'
          description: Successfully created CA Certificate
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Create a new CA Certificate
      tags:
        - CA Certificates
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: CACertificate#create
  /ca_certificates/{CACertificateId}:
    delete:
      description: Delete a CA Certificate
      operationId: delete-ca_certificate
      parameters:
        - $ref: '#/components/parameters/CACertificateId'
      responses:
        '204':
          description: Successfully deleted CA Certificate or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete a CA Certificate
      tags:
        - CA Certificates
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: CACertificate#delete
    get:
      description: Get a CA Certificate using ID.
      operationId: get-ca_certificate
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CACertificate'
          description: Successfully fetched CA Certificate
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      summary: Fetch a CA Certificate
      tags:
        - CA Certificates
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: CACertificate#read
    parameters:
      - $ref: '#/components/parameters/CACertificateId'
    put:
      description: Create or Update CA Certificate using ID.
      operationId: upsert-ca_certificate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CACertificate'
        description: Description of the CA Certificate
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CACertificate'
          description: Successfully upserted CA Certificate
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Upsert a CA Certificate
      tags:
        - CA Certificates
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: CACertificate#update
  /plugins#BasicAuth:
    post:
      description: Create a BasicAuth plugin
      operationId: create-basicauth-plugin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BasicAuthPlugin'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicAuthPlugin'
          description: Created BasicAuth plugin
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Create a BasicAuth plugin
      tags:
        - Plugins
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: PluginBasicAuth#create
  /plugins/{PluginId}#BasicAuth:
    delete:
      description: Delete a BasicAuth plugin
      operationId: delete-basicauth-plugin
      responses:
        '204':
          description: Successfully deleted Plugin or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete a BasicAuth plugin
      tags:
        - Plugins
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: PluginBasicAuth#delete
    get:
      description: Get a BasicAuth plugin
      operationId: get-basicauth-plugin
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicAuthPlugin'
          description: BasicAuth plugin
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      summary: Get a BasicAuth plugin
      tags:
        - Plugins
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: PluginBasicAuth#read
    parameters:
      - $ref: '#/components/parameters/PluginId'
    put:
      description: Update a BasicAuth plugin
      operationId: update-basicauth-plugin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BasicAuthPlugin'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicAuthPlugin'
          description: BasicAuth plugin
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Update a BasicAuth plugin
      tags:
        - Plugins
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: PluginBasicAuth#update
  /workspaces:
    get:
      description: List all Workspaces
      operationId: list-workspace
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Workspace'
                    type: array
                  next:
                    $ref: '#/components/schemas/PaginationNextResponse'
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
                type: object
          description: A successful response listing Workspaces
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: List all Workspaces
      tags:
        - Workspaces
    post:
      description: Create a new Workspace
      operationId: create-workspace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workspace'
        description: Description of the new Workspace for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
          description: Successfully created Workspace
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Create a new Workspace
      tags:
        - Workspaces
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: Workspace#create
  /workspaces/{WorkspaceIdOrName}:
    delete:
      description: Delete a Workspace
      operationId: delete-workspace
      parameters:
        - $ref: '#/components/parameters/WorkspaceIdOrName'
      responses:
        '204':
          description: Successfully deleted Workspace or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete a Workspace
      tags:
        - Workspaces
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: Workspace#delete
    get:
      description: Get a Workspace using ID or name.
      operationId: get-workspace
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
          description: Successfully fetched Workspace
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      summary: Fetch a Workspace
      tags:
        - Workspaces
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: Workspace#read
    parameters:
      - $ref: '#/components/parameters/WorkspaceIdOrName'
    put:
      description: Create or Update Workspace using ID or name.
      operationId: upsert-workspace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workspace'
        description: Description of the Workspace
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
          description: Successfully upserted Workspace
        '401':
          $ref: '#/components/responses/HTTP401Error'
      summary: Upsert a Workspace
      tags:
        - Workspaces
      x-speakeasy-entity-operation:
        terraform-datasource: null
        terraform-resource: Workspace#update
security:
  - adminToken: []
servers:
  - description: Default Admin API URL
    url: '{protocol}://{hostname}:{port}{path}'
    variables:
      hostname:
        default: localhost
        description: Hostname for Kong's Admin API
      path:
        default: /
        description: Base path for Kong's Admin API
      port:
        default: '8001'
        description: Port for Kong's Admin API
      protocol:
        default: http
        description: Protocol for requests to Kong's Admin API
        enum:
          - http
          - https
tags:
  - name: ACLs
  - name: API-keys
  - name: Basic-auth credentials
  - description: >-
      A CA certificate object represents a trusted certificate authority.

      These objects are used by Kong Gateway to verify the validity of a client
      or server certificate.
    name: CA Certificates
  - description: >
      A certificate object represents a public certificate, and can be
      optionally paired with the corresponding private key. These objects are
      used by Kong Gateway to handle SSL/TLS termination for encrypted requests,
      or for use as a trusted CA store when validating peer certificate of
      client/service.

      <br><br>

      Certificates are optionally associated with SNI objects to tie a cert/key
      pair to one or more hostnames.

      <br><br>

      If intermediate certificates are required in addition to the main
      certificate, they should be concatenated together into one string.
    name: Certificates
  - description: >-
      Consumer groups enable the organization and categorization of consumers
      (users or applications) within an API ecosystem.

      By grouping consumers together, you eliminate the need to manage them
      individually, providing a scalable, efficient approach to managing
      configurations.
    name: Consumer Groups
  - description: >
      The consumer object represents a consumer - or a user - of a service.

      You can either rely on Kong Gateway as the primary datastore, or you can
      map the consumer list with your database to keep consistency between Kong
      Gateway and your existing primary datastore.
    name: Consumers
  - name: HMAC-auth credentials
  - name: JWTs
  - description: >
      A JSON Web key set. Key sets are the preferred way to expose keys to
      plugins because they tell the plugin where to look for keys or have a
      scoping mechanism to restrict plugins to specific keys.
    name: KeySets
  - description: >
      A key object holds a representation of asymmetric keys in various formats.
      When Kong Gateway or a Kong plugin requires a specific public or private
      key to perform certain operations, it can use this entity.
    name: Keys
  - name: MTLS-auth credentials
  - description: >-
      Some entities in Kong Gateway share common configuration settings that
      often need to be repeated. For example, multiple plugins that connect to
      Redis may require the same connection settings. Without Partials, you
      would need to replicate this configuration across all plugins. If the
      settings change, you would need to update each plugin individually.
    name: Partials
  - description: >-
      A plugin entity represents a plugin configuration that will be executed
      during the HTTP request/response lifecycle. Plugins let you add
      functionality to services that run behind a Kong Gateway instance, like
      authentication or rate limiting.

      You can find more information about available plugins and which values
      each plugin accepts at the [Plugin
      Hub](https://developer.konghq.com/plugins/).

      <br><br>

      When adding a plugin configuration to a service, the plugin will run on
      every request made by a client to that service. If a plugin needs to be
      tuned to different values for some specific consumers, you can do so by
      creating a separate plugin instance that specifies both the service and
      the consumer, through the service and consumer fields.
    name: Plugins
  - description: >
      Route entities define rules to match client requests. Each route is
      associated with a service, and a service may have multiple routes
      associated to it. Every request matching a given route will be proxied to
      the associated service. You need at least one matching rule that applies
      to the protocol being matched by the route.

      <br><br>

      The combination of routes and services, and the separation of concerns
      between them, offers a powerful routing mechanism with which it is
      possible to define fine-grained entrypoints in Kong Gateway leading to
      different upstream services of your infrastructure.

      <br><br>

      Depending on the protocol, one of the following attributes must be set:

      <br>


      - `http`: At least one of `methods`, `hosts`, `headers`, or `paths`

      - `https`: At least one of `methods`, `hosts`, `headers`, `paths`, or
      `snis`

      - `tcp`: At least one of `sources` or `destinations`

      - `tls`: at least one of `sources`, `destinations`, or `snis`

      - `tls_passthrough`: set `snis`

      - `grpc`: At least one of `hosts`, `headers`, or `paths`

      - `grpcs`: At least one of `hosts`, `headers`, `paths`, or `snis`

      - `ws`: At least one of `hosts`, `headers`, or `paths`

      - `wss`: At least one of `hosts`, `headers`, `paths`, or `snis`
        <br>
        A route can't have both `tls` and `tls_passthrough` protocols at same time.
        <br><br>
        Learn more about the router:
      - [Configure routes using
      expressions](https://developer.konghq.com/gateway/routing/expressions/)
    name: Routes
  - description: >-
      An SNI object represents a many-to-one mapping of hostnames to a
      certificate.

      <br><br>

      A certificate object can have many hostnames associated with it. When Kong
      Gateway receives an SSL request, it uses the SNI field in the Client Hello
      to look up the certificate object based on the SNI associated with the
      certificate.
    name: SNIs
  - description: >
      Service entities are abstractions of your microservice interfaces or
      formal APIs. For example, a service could be a data transformation
      microservice or a billing API.

      <br><br>

      The main attribute of a service is the destination URL for proxying
      traffic. This URL can be set as a single string or by specifying its
      protocol, host, port and path individually.

      <br><br>

      Services are associated to routes, and a single service can have many
      routes associated with it. Routes are entrypoints in Kong Gateway which
      define rules to match client requests. Once a route is matched, Kong
      Gateway proxies the request to its associated service. See the [Route
      documentation](https://developer.konghq.com/gateway/entities/route/) for a
      detailed explanation of how Kong proxies traffic.

      <br><br>

      Services can be both [tagged and filtered by
      tags](https://developer.konghq.com/admin-api/).
    name: Services
  - description: >
      A target is an IP address or hostname with a port that identifies an
      instance of a backend service. Every upstream can have many targets, and
      the targets can be dynamically added, modified, or deleted. Changes take
      effect on the fly.

      <br><br>

      To disable a target, post a new one with `weight=0`, or use the `DELETE`
      method to accomplish the same.
    name: Targets
  - description: >-
      The upstream object represents a virtual hostname and can be used to load
      balance incoming requests over multiple services (targets).

      <br><br>

      An upstream also includes a [health
      checker](https://developer.konghq.com/gateway/traffic-control/health-checks-circuit-breakers/),
      which can enable and disable targets based on their ability or inability
      to serve requests.

      The configuration for the health checker is stored in the upstream object,
      and applies to all of its targets.
    name: Upstreams
  - description: >
      Vault objects are used to configure different vault connectors for
      [managing
      secrets](https://developer.konghq.com/gateway/secrets-management/).

      Configuring a vault lets you reference secrets from other entities.

      This allows for a proper separation of secrets and configuration and
      prevents secret sprawl.

      <br><br>

      For example, you could store a certificate and a key in a vault, then
      reference them from a certificate entity. This way, the certificate and
      key are not stored in the entity directly and are more secure.

      <br><br>

      Secrets rotation can be managed using
      [TTLs](https://developer.konghq.com/gateway/entities/vault/).
    name: Vaults
  - description: >
      The workspace object describes the workspace entity, which has an ID and a
      name.

      <br><br>

      Workspaces provide a way to segment Kong Gateway entities. Entities in a
      workspace are isolated from those in other workspaces.
    name: Workspaces

