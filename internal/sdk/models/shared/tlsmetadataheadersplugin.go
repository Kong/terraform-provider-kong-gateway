// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/internal/utils"
)

type TLSMetadataHeadersPluginConfig struct {
	// Define the HTTP header name used for the SHA1 fingerprint of the client certificate.
	ClientCertFingerprintHeaderName *string `json:"client_cert_fingerprint_header_name,omitempty"`
	// Define the HTTP header name used for the PEM format URL encoded client certificate.
	ClientCertHeaderName *string `json:"client_cert_header_name,omitempty"`
	// Define the HTTP header name used for the issuer DN of the client certificate.
	ClientCertIssuerDnHeaderName *string `json:"client_cert_issuer_dn_header_name,omitempty"`
	// Define the HTTP header name used for the subject DN of the client certificate.
	ClientCertSubjectDnHeaderName *string `json:"client_cert_subject_dn_header_name,omitempty"`
	// Define the HTTP header name used for the serial number of the client certificate.
	ClientSerialHeaderName *string `json:"client_serial_header_name,omitempty"`
	// Enables TLS client certificate metadata values to be injected into HTTP headers.
	InjectClientCertDetails *bool `json:"inject_client_cert_details,omitempty"`
}

func (t *TLSMetadataHeadersPluginConfig) GetClientCertFingerprintHeaderName() *string {
	if t == nil {
		return nil
	}
	return t.ClientCertFingerprintHeaderName
}

func (t *TLSMetadataHeadersPluginConfig) GetClientCertHeaderName() *string {
	if t == nil {
		return nil
	}
	return t.ClientCertHeaderName
}

func (t *TLSMetadataHeadersPluginConfig) GetClientCertIssuerDnHeaderName() *string {
	if t == nil {
		return nil
	}
	return t.ClientCertIssuerDnHeaderName
}

func (t *TLSMetadataHeadersPluginConfig) GetClientCertSubjectDnHeaderName() *string {
	if t == nil {
		return nil
	}
	return t.ClientCertSubjectDnHeaderName
}

func (t *TLSMetadataHeadersPluginConfig) GetClientSerialHeaderName() *string {
	if t == nil {
		return nil
	}
	return t.ClientSerialHeaderName
}

func (t *TLSMetadataHeadersPluginConfig) GetInjectClientCertDetails() *bool {
	if t == nil {
		return nil
	}
	return t.InjectClientCertDetails
}

type TLSMetadataHeadersPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (t *TLSMetadataHeadersPluginAfter) GetAccess() []string {
	if t == nil {
		return nil
	}
	return t.Access
}

type TLSMetadataHeadersPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (t *TLSMetadataHeadersPluginBefore) GetAccess() []string {
	if t == nil {
		return nil
	}
	return t.Access
}

type TLSMetadataHeadersPluginOrdering struct {
	After  *TLSMetadataHeadersPluginAfter  `json:"after,omitempty"`
	Before *TLSMetadataHeadersPluginBefore `json:"before,omitempty"`
}

func (t *TLSMetadataHeadersPluginOrdering) GetAfter() *TLSMetadataHeadersPluginAfter {
	if t == nil {
		return nil
	}
	return t.After
}

func (t *TLSMetadataHeadersPluginOrdering) GetBefore() *TLSMetadataHeadersPluginBefore {
	if t == nil {
		return nil
	}
	return t.Before
}

type TLSMetadataHeadersPluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

func (t *TLSMetadataHeadersPluginPartials) GetID() *string {
	if t == nil {
		return nil
	}
	return t.ID
}

func (t *TLSMetadataHeadersPluginPartials) GetName() *string {
	if t == nil {
		return nil
	}
	return t.Name
}

func (t *TLSMetadataHeadersPluginPartials) GetPath() *string {
	if t == nil {
		return nil
	}
	return t.Path
}

type TLSMetadataHeadersPluginProtocols string

const (
	TLSMetadataHeadersPluginProtocolsGrpcs TLSMetadataHeadersPluginProtocols = "grpcs"
	TLSMetadataHeadersPluginProtocolsHTTPS TLSMetadataHeadersPluginProtocols = "https"
	TLSMetadataHeadersPluginProtocolsTLS   TLSMetadataHeadersPluginProtocols = "tls"
)

func (e TLSMetadataHeadersPluginProtocols) ToPointer() *TLSMetadataHeadersPluginProtocols {
	return &e
}
func (e *TLSMetadataHeadersPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpcs":
		fallthrough
	case "https":
		fallthrough
	case "tls":
		*e = TLSMetadataHeadersPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TLSMetadataHeadersPluginProtocols: %v", v)
	}
}

// TLSMetadataHeadersPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type TLSMetadataHeadersPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (t *TLSMetadataHeadersPluginRoute) GetID() *string {
	if t == nil {
		return nil
	}
	return t.ID
}

// TLSMetadataHeadersPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type TLSMetadataHeadersPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (t *TLSMetadataHeadersPluginService) GetID() *string {
	if t == nil {
		return nil
	}
	return t.ID
}

type TLSMetadataHeadersPlugin struct {
	Config *TLSMetadataHeadersPluginConfig `json:"config,omitempty"`
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `json:"enabled,omitempty"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string                           `json:"instance_name,omitempty"`
	name         string                            `const:"tls-metadata-headers" json:"name"`
	Ordering     *TLSMetadataHeadersPluginOrdering `json:"ordering,omitempty"`
	// A list of partials to be used by the plugin.
	Partials []TLSMetadataHeadersPluginPartials `json:"partials,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support tcp and tls.
	Protocols []TLSMetadataHeadersPluginProtocols `json:"protocols,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *TLSMetadataHeadersPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *TLSMetadataHeadersPluginService `json:"service,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64 `json:"updated_at,omitempty"`
}

func (t TLSMetadataHeadersPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TLSMetadataHeadersPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"name"}); err != nil {
		return err
	}
	return nil
}

func (t *TLSMetadataHeadersPlugin) GetConfig() *TLSMetadataHeadersPluginConfig {
	if t == nil {
		return nil
	}
	return t.Config
}

func (t *TLSMetadataHeadersPlugin) GetCreatedAt() *int64 {
	if t == nil {
		return nil
	}
	return t.CreatedAt
}

func (t *TLSMetadataHeadersPlugin) GetEnabled() *bool {
	if t == nil {
		return nil
	}
	return t.Enabled
}

func (t *TLSMetadataHeadersPlugin) GetID() *string {
	if t == nil {
		return nil
	}
	return t.ID
}

func (t *TLSMetadataHeadersPlugin) GetInstanceName() *string {
	if t == nil {
		return nil
	}
	return t.InstanceName
}

func (t *TLSMetadataHeadersPlugin) GetName() string {
	return "tls-metadata-headers"
}

func (t *TLSMetadataHeadersPlugin) GetOrdering() *TLSMetadataHeadersPluginOrdering {
	if t == nil {
		return nil
	}
	return t.Ordering
}

func (t *TLSMetadataHeadersPlugin) GetPartials() []TLSMetadataHeadersPluginPartials {
	if t == nil {
		return nil
	}
	return t.Partials
}

func (t *TLSMetadataHeadersPlugin) GetProtocols() []TLSMetadataHeadersPluginProtocols {
	if t == nil {
		return nil
	}
	return t.Protocols
}

func (t *TLSMetadataHeadersPlugin) GetRoute() *TLSMetadataHeadersPluginRoute {
	if t == nil {
		return nil
	}
	return t.Route
}

func (t *TLSMetadataHeadersPlugin) GetService() *TLSMetadataHeadersPluginService {
	if t == nil {
		return nil
	}
	return t.Service
}

func (t *TLSMetadataHeadersPlugin) GetTags() []string {
	if t == nil {
		return nil
	}
	return t.Tags
}

func (t *TLSMetadataHeadersPlugin) GetUpdatedAt() *int64 {
	if t == nil {
		return nil
	}
	return t.UpdatedAt
}
