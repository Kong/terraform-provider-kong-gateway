// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/internal/utils"
)

type ClientErrorsSeverity string

const (
	ClientErrorsSeverityAlert   ClientErrorsSeverity = "alert"
	ClientErrorsSeverityCrit    ClientErrorsSeverity = "crit"
	ClientErrorsSeverityDebug   ClientErrorsSeverity = "debug"
	ClientErrorsSeverityEmerg   ClientErrorsSeverity = "emerg"
	ClientErrorsSeverityErr     ClientErrorsSeverity = "err"
	ClientErrorsSeverityInfo    ClientErrorsSeverity = "info"
	ClientErrorsSeverityNotice  ClientErrorsSeverity = "notice"
	ClientErrorsSeverityWarning ClientErrorsSeverity = "warning"
)

func (e ClientErrorsSeverity) ToPointer() *ClientErrorsSeverity {
	return &e
}
func (e *ClientErrorsSeverity) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alert":
		fallthrough
	case "crit":
		fallthrough
	case "debug":
		fallthrough
	case "emerg":
		fallthrough
	case "err":
		fallthrough
	case "info":
		fallthrough
	case "notice":
		fallthrough
	case "warning":
		*e = ClientErrorsSeverity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ClientErrorsSeverity: %v", v)
	}
}

type LogLevel string

const (
	LogLevelAlert   LogLevel = "alert"
	LogLevelCrit    LogLevel = "crit"
	LogLevelDebug   LogLevel = "debug"
	LogLevelEmerg   LogLevel = "emerg"
	LogLevelErr     LogLevel = "err"
	LogLevelInfo    LogLevel = "info"
	LogLevelNotice  LogLevel = "notice"
	LogLevelWarning LogLevel = "warning"
)

func (e LogLevel) ToPointer() *LogLevel {
	return &e
}
func (e *LogLevel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alert":
		fallthrough
	case "crit":
		fallthrough
	case "debug":
		fallthrough
	case "emerg":
		fallthrough
	case "err":
		fallthrough
	case "info":
		fallthrough
	case "notice":
		fallthrough
	case "warning":
		*e = LogLevel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LogLevel: %v", v)
	}
}

type ServerErrorsSeverity string

const (
	ServerErrorsSeverityAlert   ServerErrorsSeverity = "alert"
	ServerErrorsSeverityCrit    ServerErrorsSeverity = "crit"
	ServerErrorsSeverityDebug   ServerErrorsSeverity = "debug"
	ServerErrorsSeverityEmerg   ServerErrorsSeverity = "emerg"
	ServerErrorsSeverityErr     ServerErrorsSeverity = "err"
	ServerErrorsSeverityInfo    ServerErrorsSeverity = "info"
	ServerErrorsSeverityNotice  ServerErrorsSeverity = "notice"
	ServerErrorsSeverityWarning ServerErrorsSeverity = "warning"
)

func (e ServerErrorsSeverity) ToPointer() *ServerErrorsSeverity {
	return &e
}
func (e *ServerErrorsSeverity) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alert":
		fallthrough
	case "crit":
		fallthrough
	case "debug":
		fallthrough
	case "emerg":
		fallthrough
	case "err":
		fallthrough
	case "info":
		fallthrough
	case "notice":
		fallthrough
	case "warning":
		*e = ServerErrorsSeverity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ServerErrorsSeverity: %v", v)
	}
}

type SuccessfulSeverity string

const (
	SuccessfulSeverityAlert   SuccessfulSeverity = "alert"
	SuccessfulSeverityCrit    SuccessfulSeverity = "crit"
	SuccessfulSeverityDebug   SuccessfulSeverity = "debug"
	SuccessfulSeverityEmerg   SuccessfulSeverity = "emerg"
	SuccessfulSeverityErr     SuccessfulSeverity = "err"
	SuccessfulSeverityInfo    SuccessfulSeverity = "info"
	SuccessfulSeverityNotice  SuccessfulSeverity = "notice"
	SuccessfulSeverityWarning SuccessfulSeverity = "warning"
)

func (e SuccessfulSeverity) ToPointer() *SuccessfulSeverity {
	return &e
}
func (e *SuccessfulSeverity) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alert":
		fallthrough
	case "crit":
		fallthrough
	case "debug":
		fallthrough
	case "emerg":
		fallthrough
	case "err":
		fallthrough
	case "info":
		fallthrough
	case "notice":
		fallthrough
	case "warning":
		*e = SuccessfulSeverity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SuccessfulSeverity: %v", v)
	}
}

type LogglyPluginConfig struct {
	ClientErrorsSeverity *ClientErrorsSeverity `json:"client_errors_severity,omitempty"`
	// Lua code as a key-value map
	CustomFieldsByLua map[string]any `json:"custom_fields_by_lua,omitempty"`
	// A string representing a host name, such as example.com.
	Host     *string   `json:"host,omitempty"`
	Key      string    `json:"key"`
	LogLevel *LogLevel `json:"log_level,omitempty"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port                 *int64                `json:"port,omitempty"`
	ServerErrorsSeverity *ServerErrorsSeverity `json:"server_errors_severity,omitempty"`
	SuccessfulSeverity   *SuccessfulSeverity   `json:"successful_severity,omitempty"`
	Tags                 []string              `json:"tags,omitempty"`
	Timeout              *float64              `json:"timeout,omitempty"`
}

func (l *LogglyPluginConfig) GetClientErrorsSeverity() *ClientErrorsSeverity {
	if l == nil {
		return nil
	}
	return l.ClientErrorsSeverity
}

func (l *LogglyPluginConfig) GetCustomFieldsByLua() map[string]any {
	if l == nil {
		return nil
	}
	return l.CustomFieldsByLua
}

func (l *LogglyPluginConfig) GetHost() *string {
	if l == nil {
		return nil
	}
	return l.Host
}

func (l *LogglyPluginConfig) GetKey() string {
	if l == nil {
		return ""
	}
	return l.Key
}

func (l *LogglyPluginConfig) GetLogLevel() *LogLevel {
	if l == nil {
		return nil
	}
	return l.LogLevel
}

func (l *LogglyPluginConfig) GetPort() *int64 {
	if l == nil {
		return nil
	}
	return l.Port
}

func (l *LogglyPluginConfig) GetServerErrorsSeverity() *ServerErrorsSeverity {
	if l == nil {
		return nil
	}
	return l.ServerErrorsSeverity
}

func (l *LogglyPluginConfig) GetSuccessfulSeverity() *SuccessfulSeverity {
	if l == nil {
		return nil
	}
	return l.SuccessfulSeverity
}

func (l *LogglyPluginConfig) GetTags() []string {
	if l == nil {
		return nil
	}
	return l.Tags
}

func (l *LogglyPluginConfig) GetTimeout() *float64 {
	if l == nil {
		return nil
	}
	return l.Timeout
}

// LogglyPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type LogglyPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (l *LogglyPluginConsumer) GetID() *string {
	if l == nil {
		return nil
	}
	return l.ID
}

type LogglyPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (l *LogglyPluginAfter) GetAccess() []string {
	if l == nil {
		return nil
	}
	return l.Access
}

type LogglyPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (l *LogglyPluginBefore) GetAccess() []string {
	if l == nil {
		return nil
	}
	return l.Access
}

type LogglyPluginOrdering struct {
	After  *LogglyPluginAfter  `json:"after,omitempty"`
	Before *LogglyPluginBefore `json:"before,omitempty"`
}

func (l *LogglyPluginOrdering) GetAfter() *LogglyPluginAfter {
	if l == nil {
		return nil
	}
	return l.After
}

func (l *LogglyPluginOrdering) GetBefore() *LogglyPluginBefore {
	if l == nil {
		return nil
	}
	return l.Before
}

type LogglyPluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

func (l *LogglyPluginPartials) GetID() *string {
	if l == nil {
		return nil
	}
	return l.ID
}

func (l *LogglyPluginPartials) GetName() *string {
	if l == nil {
		return nil
	}
	return l.Name
}

func (l *LogglyPluginPartials) GetPath() *string {
	if l == nil {
		return nil
	}
	return l.Path
}

// LogglyPluginProtocols - A string representing a protocol, such as HTTP or HTTPS.
type LogglyPluginProtocols string

const (
	LogglyPluginProtocolsGrpc           LogglyPluginProtocols = "grpc"
	LogglyPluginProtocolsGrpcs          LogglyPluginProtocols = "grpcs"
	LogglyPluginProtocolsHTTP           LogglyPluginProtocols = "http"
	LogglyPluginProtocolsHTTPS          LogglyPluginProtocols = "https"
	LogglyPluginProtocolsTCP            LogglyPluginProtocols = "tcp"
	LogglyPluginProtocolsTLS            LogglyPluginProtocols = "tls"
	LogglyPluginProtocolsTLSPassthrough LogglyPluginProtocols = "tls_passthrough"
	LogglyPluginProtocolsUDP            LogglyPluginProtocols = "udp"
	LogglyPluginProtocolsWs             LogglyPluginProtocols = "ws"
	LogglyPluginProtocolsWss            LogglyPluginProtocols = "wss"
)

func (e LogglyPluginProtocols) ToPointer() *LogglyPluginProtocols {
	return &e
}
func (e *LogglyPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = LogglyPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LogglyPluginProtocols: %v", v)
	}
}

// LogglyPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type LogglyPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (l *LogglyPluginRoute) GetID() *string {
	if l == nil {
		return nil
	}
	return l.ID
}

// LogglyPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type LogglyPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (l *LogglyPluginService) GetID() *string {
	if l == nil {
		return nil
	}
	return l.ID
}

type LogglyPlugin struct {
	Config *LogglyPluginConfig `json:"config,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer *LogglyPluginConsumer `json:"consumer,omitempty"`
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `json:"enabled,omitempty"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string               `json:"instance_name,omitempty"`
	name         string                `const:"loggly" json:"name"`
	Ordering     *LogglyPluginOrdering `json:"ordering,omitempty"`
	// A list of partials to be used by the plugin.
	Partials []LogglyPluginPartials `json:"partials,omitempty"`
	// A set of strings representing protocols.
	Protocols []LogglyPluginProtocols `json:"protocols,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *LogglyPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *LogglyPluginService `json:"service,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64 `json:"updated_at,omitempty"`
}

func (l LogglyPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *LogglyPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, []string{"name"}); err != nil {
		return err
	}
	return nil
}

func (l *LogglyPlugin) GetConfig() *LogglyPluginConfig {
	if l == nil {
		return nil
	}
	return l.Config
}

func (l *LogglyPlugin) GetConsumer() *LogglyPluginConsumer {
	if l == nil {
		return nil
	}
	return l.Consumer
}

func (l *LogglyPlugin) GetCreatedAt() *int64 {
	if l == nil {
		return nil
	}
	return l.CreatedAt
}

func (l *LogglyPlugin) GetEnabled() *bool {
	if l == nil {
		return nil
	}
	return l.Enabled
}

func (l *LogglyPlugin) GetID() *string {
	if l == nil {
		return nil
	}
	return l.ID
}

func (l *LogglyPlugin) GetInstanceName() *string {
	if l == nil {
		return nil
	}
	return l.InstanceName
}

func (l *LogglyPlugin) GetName() string {
	return "loggly"
}

func (l *LogglyPlugin) GetOrdering() *LogglyPluginOrdering {
	if l == nil {
		return nil
	}
	return l.Ordering
}

func (l *LogglyPlugin) GetPartials() []LogglyPluginPartials {
	if l == nil {
		return nil
	}
	return l.Partials
}

func (l *LogglyPlugin) GetProtocols() []LogglyPluginProtocols {
	if l == nil {
		return nil
	}
	return l.Protocols
}

func (l *LogglyPlugin) GetRoute() *LogglyPluginRoute {
	if l == nil {
		return nil
	}
	return l.Route
}

func (l *LogglyPlugin) GetService() *LogglyPluginService {
	if l == nil {
		return nil
	}
	return l.Service
}

func (l *LogglyPlugin) GetTags() []string {
	if l == nil {
		return nil
	}
	return l.Tags
}

func (l *LogglyPlugin) GetUpdatedAt() *int64 {
	if l == nil {
		return nil
	}
	return l.UpdatedAt
}
