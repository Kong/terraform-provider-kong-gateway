// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/internal/utils"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/types"
)

// RequestValidatorPluginIn - The location of the parameter.
type RequestValidatorPluginIn string

const (
	RequestValidatorPluginInQuery  RequestValidatorPluginIn = "query"
	RequestValidatorPluginInHeader RequestValidatorPluginIn = "header"
	RequestValidatorPluginInPath   RequestValidatorPluginIn = "path"
)

func (e RequestValidatorPluginIn) ToPointer() *RequestValidatorPluginIn {
	return &e
}
func (e *RequestValidatorPluginIn) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "query":
		fallthrough
	case "header":
		fallthrough
	case "path":
		*e = RequestValidatorPluginIn(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RequestValidatorPluginIn: %v", v)
	}
}

// RequestValidatorPluginStyle - Required when `schema` and `explode` are set. Describes how the parameter value will be deserialized depending on the type of the parameter value.
type RequestValidatorPluginStyle string

const (
	RequestValidatorPluginStyleLabel          RequestValidatorPluginStyle = "label"
	RequestValidatorPluginStyleForm           RequestValidatorPluginStyle = "form"
	RequestValidatorPluginStyleMatrix         RequestValidatorPluginStyle = "matrix"
	RequestValidatorPluginStyleSimple         RequestValidatorPluginStyle = "simple"
	RequestValidatorPluginStyleSpaceDelimited RequestValidatorPluginStyle = "spaceDelimited"
	RequestValidatorPluginStylePipeDelimited  RequestValidatorPluginStyle = "pipeDelimited"
	RequestValidatorPluginStyleDeepObject     RequestValidatorPluginStyle = "deepObject"
)

func (e RequestValidatorPluginStyle) ToPointer() *RequestValidatorPluginStyle {
	return &e
}
func (e *RequestValidatorPluginStyle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "label":
		fallthrough
	case "form":
		fallthrough
	case "matrix":
		fallthrough
	case "simple":
		fallthrough
	case "spaceDelimited":
		fallthrough
	case "pipeDelimited":
		fallthrough
	case "deepObject":
		*e = RequestValidatorPluginStyle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RequestValidatorPluginStyle: %v", v)
	}
}

type RequestValidatorPluginParameterSchema struct {
	// Required when `schema` and `style` are set. When `explode` is `true`, parameter values of type `array` or `object` generate separate parameters for each value of the array or key-value pair of the map. For other types of parameters, this property has no effect.
	Explode *bool `json:"explode,omitempty"`
	// The location of the parameter.
	In RequestValidatorPluginIn `json:"in"`
	// The name of the parameter. Parameter names are case-sensitive, and correspond to the parameter name used by the `in` property. If `in` is `path`, the `name` field MUST correspond to the named capture group from the configured `route`.
	Name string `json:"name"`
	// Determines whether this parameter is mandatory.
	Required bool `json:"required"`
	// Requred when `style` and `explode` are set. This is the schema defining the type used for the parameter. It is validated using `draft4` for JSON Schema draft 4 compliant validator. In addition to being a valid JSON Schema, the parameter schema MUST have a top-level `type` property to enable proper deserialization before validating.
	Schema *string `json:"schema,omitempty"`
	// Required when `schema` and `explode` are set. Describes how the parameter value will be deserialized depending on the type of the parameter value.
	Style *RequestValidatorPluginStyle `json:"style,omitempty"`
}

func (o *RequestValidatorPluginParameterSchema) GetExplode() *bool {
	if o == nil {
		return nil
	}
	return o.Explode
}

func (o *RequestValidatorPluginParameterSchema) GetIn() RequestValidatorPluginIn {
	if o == nil {
		return RequestValidatorPluginIn("")
	}
	return o.In
}

func (o *RequestValidatorPluginParameterSchema) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *RequestValidatorPluginParameterSchema) GetRequired() bool {
	if o == nil {
		return false
	}
	return o.Required
}

func (o *RequestValidatorPluginParameterSchema) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *RequestValidatorPluginParameterSchema) GetStyle() *RequestValidatorPluginStyle {
	if o == nil {
		return nil
	}
	return o.Style
}

// RequestValidatorPluginVersion - Which validator to use. Supported values are `kong` (default) for using Kong's own schema validator, or `draft4` for using a JSON Schema Draft 4-compliant validator.
type RequestValidatorPluginVersion string

const (
	RequestValidatorPluginVersionKong   RequestValidatorPluginVersion = "kong"
	RequestValidatorPluginVersionDraft4 RequestValidatorPluginVersion = "draft4"
)

func (e RequestValidatorPluginVersion) ToPointer() *RequestValidatorPluginVersion {
	return &e
}
func (e *RequestValidatorPluginVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "kong":
		fallthrough
	case "draft4":
		*e = RequestValidatorPluginVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RequestValidatorPluginVersion: %v", v)
	}
}

type RequestValidatorPluginConfig struct {
	// List of allowed content types. The value can be configured with the `charset` parameter. For example, `application/json; charset=UTF-8`.
	AllowedContentTypes []string `json:"allowed_content_types,omitempty"`
	// The request body schema specification. One of `body_schema` or `parameter_schema` must be specified.
	BodySchema *string `json:"body_schema,omitempty"`
	// Determines whether to enable parameters validation of request content-type.
	ContentTypeParameterValidation *bool `json:"content_type_parameter_validation,omitempty"`
	// Array of parameter validator specification. One of `body_schema` or `parameter_schema` must be specified.
	ParameterSchema []RequestValidatorPluginParameterSchema `json:"parameter_schema,omitempty"`
	// If enabled, the plugin returns more verbose and detailed validation errors.
	VerboseResponse *bool `json:"verbose_response,omitempty"`
	// Which validator to use. Supported values are `kong` (default) for using Kong's own schema validator, or `draft4` for using a JSON Schema Draft 4-compliant validator.
	Version *RequestValidatorPluginVersion `json:"version,omitempty"`
}

func (o *RequestValidatorPluginConfig) GetAllowedContentTypes() []string {
	if o == nil {
		return nil
	}
	return o.AllowedContentTypes
}

func (o *RequestValidatorPluginConfig) GetBodySchema() *string {
	if o == nil {
		return nil
	}
	return o.BodySchema
}

func (o *RequestValidatorPluginConfig) GetContentTypeParameterValidation() *bool {
	if o == nil {
		return nil
	}
	return o.ContentTypeParameterValidation
}

func (o *RequestValidatorPluginConfig) GetParameterSchema() []RequestValidatorPluginParameterSchema {
	if o == nil {
		return nil
	}
	return o.ParameterSchema
}

func (o *RequestValidatorPluginConfig) GetVerboseResponse() *bool {
	if o == nil {
		return nil
	}
	return o.VerboseResponse
}

func (o *RequestValidatorPluginConfig) GetVersion() *RequestValidatorPluginVersion {
	if o == nil {
		return nil
	}
	return o.Version
}

type RequestValidatorPluginProtocols string

const (
	RequestValidatorPluginProtocolsGrpc           RequestValidatorPluginProtocols = "grpc"
	RequestValidatorPluginProtocolsGrpcs          RequestValidatorPluginProtocols = "grpcs"
	RequestValidatorPluginProtocolsHTTP           RequestValidatorPluginProtocols = "http"
	RequestValidatorPluginProtocolsHTTPS          RequestValidatorPluginProtocols = "https"
	RequestValidatorPluginProtocolsTCP            RequestValidatorPluginProtocols = "tcp"
	RequestValidatorPluginProtocolsTLS            RequestValidatorPluginProtocols = "tls"
	RequestValidatorPluginProtocolsTLSPassthrough RequestValidatorPluginProtocols = "tls_passthrough"
	RequestValidatorPluginProtocolsUDP            RequestValidatorPluginProtocols = "udp"
	RequestValidatorPluginProtocolsWs             RequestValidatorPluginProtocols = "ws"
	RequestValidatorPluginProtocolsWss            RequestValidatorPluginProtocols = "wss"
)

func (e RequestValidatorPluginProtocols) ToPointer() *RequestValidatorPluginProtocols {
	return &e
}
func (e *RequestValidatorPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = RequestValidatorPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RequestValidatorPluginProtocols: %v", v)
	}
}

// RequestValidatorPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type RequestValidatorPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *RequestValidatorPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type RequestValidatorPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *RequestValidatorPluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// RequestValidatorPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type RequestValidatorPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *RequestValidatorPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// RequestValidatorPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type RequestValidatorPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *RequestValidatorPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type RequestValidatorPlugin struct {
	Config *RequestValidatorPluginConfig `json:"config,omitempty"`
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool   `json:"enabled,omitempty"`
	ID           *string `json:"id,omitempty"`
	InstanceName *string `json:"instance_name,omitempty"`
	name         *string `const:"request-validator" json:"name,omitempty"`
	Ordering     any     `json:"ordering,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []RequestValidatorPluginProtocols `json:"protocols,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64 `json:"updated_at,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *RequestValidatorPluginConsumer      `json:"consumer,omitempty"`
	ConsumerGroup *RequestValidatorPluginConsumerGroup `json:"consumer_group,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *RequestValidatorPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *RequestValidatorPluginService `json:"service,omitempty"`
}

func (r RequestValidatorPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RequestValidatorPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RequestValidatorPlugin) GetConfig() *RequestValidatorPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *RequestValidatorPlugin) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *RequestValidatorPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *RequestValidatorPlugin) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *RequestValidatorPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *RequestValidatorPlugin) GetName() *string {
	return types.String("request-validator")
}

func (o *RequestValidatorPlugin) GetOrdering() any {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *RequestValidatorPlugin) GetProtocols() []RequestValidatorPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *RequestValidatorPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *RequestValidatorPlugin) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *RequestValidatorPlugin) GetConsumer() *RequestValidatorPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *RequestValidatorPlugin) GetConsumerGroup() *RequestValidatorPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *RequestValidatorPlugin) GetRoute() *RequestValidatorPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *RequestValidatorPlugin) GetService() *RequestValidatorPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
