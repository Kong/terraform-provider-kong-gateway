// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-kong-gateway/internal/provider/types"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/models/shared"
)

func (r *WorkspaceResourceModel) RefreshFromSharedWorkspace(ctx context.Context, resp *shared.Workspace) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Comment = types.StringPointerValue(resp.Comment)
		if resp.Config == nil {
			r.Config = nil
		} else {
			r.Config = &tfTypes.Config{}
			if len(resp.Config.Meta) > 0 {
				r.Config.Meta = make(map[string]types.String, len(resp.Config.Meta))
				for key, value := range resp.Config.Meta {
					r.Config.Meta[key] = types.StringValue(value)
				}
			}
			r.Config.Portal = types.BoolPointerValue(resp.Config.Portal)
			r.Config.PortalAccessRequestEmail = types.BoolPointerValue(resp.Config.PortalAccessRequestEmail)
			r.Config.PortalApplicationRequestEmail = types.BoolPointerValue(resp.Config.PortalApplicationRequestEmail)
			r.Config.PortalApplicationStatusEmail = types.BoolPointerValue(resp.Config.PortalApplicationStatusEmail)
			r.Config.PortalApprovedEmail = types.BoolPointerValue(resp.Config.PortalApprovedEmail)
			r.Config.PortalAuth = types.StringPointerValue(resp.Config.PortalAuth)
			r.Config.PortalAuthConf = types.StringPointerValue(resp.Config.PortalAuthConf)
			r.Config.PortalAutoApprove = types.BoolPointerValue(resp.Config.PortalAutoApprove)
			r.Config.PortalCorsOrigins = make([]types.String, 0, len(resp.Config.PortalCorsOrigins))
			for _, v := range resp.Config.PortalCorsOrigins {
				r.Config.PortalCorsOrigins = append(r.Config.PortalCorsOrigins, types.StringValue(v))
			}
			r.Config.PortalDeveloperMetaFields = types.StringPointerValue(resp.Config.PortalDeveloperMetaFields)
			r.Config.PortalEmailsFrom = types.StringPointerValue(resp.Config.PortalEmailsFrom)
			r.Config.PortalEmailsReplyTo = types.StringPointerValue(resp.Config.PortalEmailsReplyTo)
			r.Config.PortalInviteEmail = types.BoolPointerValue(resp.Config.PortalInviteEmail)
			r.Config.PortalIsLegacy = types.BoolPointerValue(resp.Config.PortalIsLegacy)
			r.Config.PortalResetEmail = types.BoolPointerValue(resp.Config.PortalResetEmail)
			r.Config.PortalResetSuccessEmail = types.BoolPointerValue(resp.Config.PortalResetSuccessEmail)
			r.Config.PortalSessionConf = types.StringPointerValue(resp.Config.PortalSessionConf)
			r.Config.PortalSMTPAdminEmails = make([]types.String, 0, len(resp.Config.PortalSMTPAdminEmails))
			for _, v := range resp.Config.PortalSMTPAdminEmails {
				r.Config.PortalSMTPAdminEmails = append(r.Config.PortalSMTPAdminEmails, types.StringValue(v))
			}
			r.Config.PortalTokenExp = types.Int64PointerValue(resp.Config.PortalTokenExp)
		}
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.ID = types.StringPointerValue(resp.ID)
		if resp.Meta == nil {
			r.Meta = nil
		} else {
			r.Meta = &tfTypes.Meta{}
			r.Meta.Color = types.StringPointerValue(resp.Meta.Color)
			r.Meta.Thumbnail = types.StringPointerValue(resp.Meta.Thumbnail)
		}
		r.Name = types.StringValue(resp.Name)
		r.UpdatedAt = types.Int64PointerValue(resp.UpdatedAt)
	}

	return diags
}

func (r *WorkspaceResourceModel) ToOperationsDeleteWorkspaceRequest(ctx context.Context) (*operations.DeleteWorkspaceRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var workspaceIDOrName string
	workspaceIDOrName = r.ID.ValueString()

	out := operations.DeleteWorkspaceRequest{
		WorkspaceIDOrName: workspaceIDOrName,
	}

	return &out, diags
}

func (r *WorkspaceResourceModel) ToOperationsGetWorkspaceRequest(ctx context.Context) (*operations.GetWorkspaceRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var workspaceIDOrName string
	workspaceIDOrName = r.ID.ValueString()

	out := operations.GetWorkspaceRequest{
		WorkspaceIDOrName: workspaceIDOrName,
	}

	return &out, diags
}

func (r *WorkspaceResourceModel) ToOperationsUpsertWorkspaceRequest(ctx context.Context) (*operations.UpsertWorkspaceRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var workspaceIDOrName string
	workspaceIDOrName = r.ID.ValueString()

	workspace, workspaceDiags := r.ToSharedWorkspace(ctx)
	diags.Append(workspaceDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpsertWorkspaceRequest{
		WorkspaceIDOrName: workspaceIDOrName,
		Workspace:         *workspace,
	}

	return &out, diags
}

func (r *WorkspaceResourceModel) ToSharedWorkspace(ctx context.Context) (*shared.Workspace, diag.Diagnostics) {
	var diags diag.Diagnostics

	comment := new(string)
	if !r.Comment.IsUnknown() && !r.Comment.IsNull() {
		*comment = r.Comment.ValueString()
	} else {
		comment = nil
	}
	var config *shared.Config
	if r.Config != nil {
		meta := make(map[string]string)
		for metaKey, metaValue := range r.Config.Meta {
			var metaInst string
			metaInst = metaValue.ValueString()

			meta[metaKey] = metaInst
		}
		portal := new(bool)
		if !r.Config.Portal.IsUnknown() && !r.Config.Portal.IsNull() {
			*portal = r.Config.Portal.ValueBool()
		} else {
			portal = nil
		}
		portalAccessRequestEmail := new(bool)
		if !r.Config.PortalAccessRequestEmail.IsUnknown() && !r.Config.PortalAccessRequestEmail.IsNull() {
			*portalAccessRequestEmail = r.Config.PortalAccessRequestEmail.ValueBool()
		} else {
			portalAccessRequestEmail = nil
		}
		portalApplicationRequestEmail := new(bool)
		if !r.Config.PortalApplicationRequestEmail.IsUnknown() && !r.Config.PortalApplicationRequestEmail.IsNull() {
			*portalApplicationRequestEmail = r.Config.PortalApplicationRequestEmail.ValueBool()
		} else {
			portalApplicationRequestEmail = nil
		}
		portalApplicationStatusEmail := new(bool)
		if !r.Config.PortalApplicationStatusEmail.IsUnknown() && !r.Config.PortalApplicationStatusEmail.IsNull() {
			*portalApplicationStatusEmail = r.Config.PortalApplicationStatusEmail.ValueBool()
		} else {
			portalApplicationStatusEmail = nil
		}
		portalApprovedEmail := new(bool)
		if !r.Config.PortalApprovedEmail.IsUnknown() && !r.Config.PortalApprovedEmail.IsNull() {
			*portalApprovedEmail = r.Config.PortalApprovedEmail.ValueBool()
		} else {
			portalApprovedEmail = nil
		}
		portalAuth := new(string)
		if !r.Config.PortalAuth.IsUnknown() && !r.Config.PortalAuth.IsNull() {
			*portalAuth = r.Config.PortalAuth.ValueString()
		} else {
			portalAuth = nil
		}
		portalAuthConf := new(string)
		if !r.Config.PortalAuthConf.IsUnknown() && !r.Config.PortalAuthConf.IsNull() {
			*portalAuthConf = r.Config.PortalAuthConf.ValueString()
		} else {
			portalAuthConf = nil
		}
		portalAutoApprove := new(bool)
		if !r.Config.PortalAutoApprove.IsUnknown() && !r.Config.PortalAutoApprove.IsNull() {
			*portalAutoApprove = r.Config.PortalAutoApprove.ValueBool()
		} else {
			portalAutoApprove = nil
		}
		portalCorsOrigins := make([]string, 0, len(r.Config.PortalCorsOrigins))
		for _, portalCorsOriginsItem := range r.Config.PortalCorsOrigins {
			portalCorsOrigins = append(portalCorsOrigins, portalCorsOriginsItem.ValueString())
		}
		portalDeveloperMetaFields := new(string)
		if !r.Config.PortalDeveloperMetaFields.IsUnknown() && !r.Config.PortalDeveloperMetaFields.IsNull() {
			*portalDeveloperMetaFields = r.Config.PortalDeveloperMetaFields.ValueString()
		} else {
			portalDeveloperMetaFields = nil
		}
		portalEmailsFrom := new(string)
		if !r.Config.PortalEmailsFrom.IsUnknown() && !r.Config.PortalEmailsFrom.IsNull() {
			*portalEmailsFrom = r.Config.PortalEmailsFrom.ValueString()
		} else {
			portalEmailsFrom = nil
		}
		portalEmailsReplyTo := new(string)
		if !r.Config.PortalEmailsReplyTo.IsUnknown() && !r.Config.PortalEmailsReplyTo.IsNull() {
			*portalEmailsReplyTo = r.Config.PortalEmailsReplyTo.ValueString()
		} else {
			portalEmailsReplyTo = nil
		}
		portalInviteEmail := new(bool)
		if !r.Config.PortalInviteEmail.IsUnknown() && !r.Config.PortalInviteEmail.IsNull() {
			*portalInviteEmail = r.Config.PortalInviteEmail.ValueBool()
		} else {
			portalInviteEmail = nil
		}
		portalIsLegacy := new(bool)
		if !r.Config.PortalIsLegacy.IsUnknown() && !r.Config.PortalIsLegacy.IsNull() {
			*portalIsLegacy = r.Config.PortalIsLegacy.ValueBool()
		} else {
			portalIsLegacy = nil
		}
		portalResetEmail := new(bool)
		if !r.Config.PortalResetEmail.IsUnknown() && !r.Config.PortalResetEmail.IsNull() {
			*portalResetEmail = r.Config.PortalResetEmail.ValueBool()
		} else {
			portalResetEmail = nil
		}
		portalResetSuccessEmail := new(bool)
		if !r.Config.PortalResetSuccessEmail.IsUnknown() && !r.Config.PortalResetSuccessEmail.IsNull() {
			*portalResetSuccessEmail = r.Config.PortalResetSuccessEmail.ValueBool()
		} else {
			portalResetSuccessEmail = nil
		}
		portalSessionConf := new(string)
		if !r.Config.PortalSessionConf.IsUnknown() && !r.Config.PortalSessionConf.IsNull() {
			*portalSessionConf = r.Config.PortalSessionConf.ValueString()
		} else {
			portalSessionConf = nil
		}
		portalSMTPAdminEmails := make([]string, 0, len(r.Config.PortalSMTPAdminEmails))
		for _, portalSMTPAdminEmailsItem := range r.Config.PortalSMTPAdminEmails {
			portalSMTPAdminEmails = append(portalSMTPAdminEmails, portalSMTPAdminEmailsItem.ValueString())
		}
		portalTokenExp := new(int64)
		if !r.Config.PortalTokenExp.IsUnknown() && !r.Config.PortalTokenExp.IsNull() {
			*portalTokenExp = r.Config.PortalTokenExp.ValueInt64()
		} else {
			portalTokenExp = nil
		}
		config = &shared.Config{
			Meta:                          meta,
			Portal:                        portal,
			PortalAccessRequestEmail:      portalAccessRequestEmail,
			PortalApplicationRequestEmail: portalApplicationRequestEmail,
			PortalApplicationStatusEmail:  portalApplicationStatusEmail,
			PortalApprovedEmail:           portalApprovedEmail,
			PortalAuth:                    portalAuth,
			PortalAuthConf:                portalAuthConf,
			PortalAutoApprove:             portalAutoApprove,
			PortalCorsOrigins:             portalCorsOrigins,
			PortalDeveloperMetaFields:     portalDeveloperMetaFields,
			PortalEmailsFrom:              portalEmailsFrom,
			PortalEmailsReplyTo:           portalEmailsReplyTo,
			PortalInviteEmail:             portalInviteEmail,
			PortalIsLegacy:                portalIsLegacy,
			PortalResetEmail:              portalResetEmail,
			PortalResetSuccessEmail:       portalResetSuccessEmail,
			PortalSessionConf:             portalSessionConf,
			PortalSMTPAdminEmails:         portalSMTPAdminEmails,
			PortalTokenExp:                portalTokenExp,
		}
	}
	createdAt := new(int64)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt = r.CreatedAt.ValueInt64()
	} else {
		createdAt = nil
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	var meta1 *shared.Meta
	if r.Meta != nil {
		color := new(string)
		if !r.Meta.Color.IsUnknown() && !r.Meta.Color.IsNull() {
			*color = r.Meta.Color.ValueString()
		} else {
			color = nil
		}
		thumbnail := new(string)
		if !r.Meta.Thumbnail.IsUnknown() && !r.Meta.Thumbnail.IsNull() {
			*thumbnail = r.Meta.Thumbnail.ValueString()
		} else {
			thumbnail = nil
		}
		meta1 = &shared.Meta{
			Color:     color,
			Thumbnail: thumbnail,
		}
	}
	var name string
	name = r.Name.ValueString()

	updatedAt := new(int64)
	if !r.UpdatedAt.IsUnknown() && !r.UpdatedAt.IsNull() {
		*updatedAt = r.UpdatedAt.ValueInt64()
	} else {
		updatedAt = nil
	}
	out := shared.Workspace{
		Comment:   comment,
		Config:    config,
		CreatedAt: createdAt,
		ID:        id,
		Meta:      meta1,
		Name:      name,
		UpdatedAt: updatedAt,
	}

	return &out, diags
}
