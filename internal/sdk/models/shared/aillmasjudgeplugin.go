// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/internal/utils"
)

type AiLlmAsJudgePluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (a *AiLlmAsJudgePluginAfter) GetAccess() []string {
	if a == nil {
		return nil
	}
	return a.Access
}

type AiLlmAsJudgePluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (a *AiLlmAsJudgePluginBefore) GetAccess() []string {
	if a == nil {
		return nil
	}
	return a.Access
}

type AiLlmAsJudgePluginOrdering struct {
	After  *AiLlmAsJudgePluginAfter  `json:"after,omitempty"`
	Before *AiLlmAsJudgePluginBefore `json:"before,omitempty"`
}

func (a *AiLlmAsJudgePluginOrdering) GetAfter() *AiLlmAsJudgePluginAfter {
	if a == nil {
		return nil
	}
	return a.After
}

func (a *AiLlmAsJudgePluginOrdering) GetBefore() *AiLlmAsJudgePluginBefore {
	if a == nil {
		return nil
	}
	return a.Before
}

type AiLlmAsJudgePluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

func (a *AiLlmAsJudgePluginPartials) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *AiLlmAsJudgePluginPartials) GetName() *string {
	if a == nil {
		return nil
	}
	return a.Name
}

func (a *AiLlmAsJudgePluginPartials) GetPath() *string {
	if a == nil {
		return nil
	}
	return a.Path
}

// AiLlmAsJudgePluginParamLocation - Specify whether the 'param_name' and 'param_value' options go in a query string, or the POST form/JSON body.
type AiLlmAsJudgePluginParamLocation string

const (
	AiLlmAsJudgePluginParamLocationBody  AiLlmAsJudgePluginParamLocation = "body"
	AiLlmAsJudgePluginParamLocationQuery AiLlmAsJudgePluginParamLocation = "query"
)

func (e AiLlmAsJudgePluginParamLocation) ToPointer() *AiLlmAsJudgePluginParamLocation {
	return &e
}
func (e *AiLlmAsJudgePluginParamLocation) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "body":
		fallthrough
	case "query":
		*e = AiLlmAsJudgePluginParamLocation(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiLlmAsJudgePluginParamLocation: %v", v)
	}
}

type AiLlmAsJudgePluginAuth struct {
	// If enabled, the authorization header or parameter can be overridden in the request by the value configured in the plugin.
	AllowOverride *bool `json:"allow_override,omitempty"`
	// Set this if you are using an AWS provider (Bedrock) and you are authenticating using static IAM User credentials. Setting this will override the AWS_ACCESS_KEY_ID environment variable for this plugin instance.
	AwsAccessKeyID *string `json:"aws_access_key_id,omitempty"`
	// Set this if you are using an AWS provider (Bedrock) and you are authenticating using static IAM User credentials. Setting this will override the AWS_SECRET_ACCESS_KEY environment variable for this plugin instance.
	AwsSecretAccessKey *string `json:"aws_secret_access_key,omitempty"`
	// If azure_use_managed_identity is set to true, and you need to use a different user-assigned identity for this LLM instance, set the client ID.
	AzureClientID *string `json:"azure_client_id,omitempty"`
	// If azure_use_managed_identity is set to true, and you need to use a different user-assigned identity for this LLM instance, set the client secret.
	AzureClientSecret *string `json:"azure_client_secret,omitempty"`
	// If azure_use_managed_identity is set to true, and you need to use a different user-assigned identity for this LLM instance, set the tenant ID.
	AzureTenantID *string `json:"azure_tenant_id,omitempty"`
	// Set true to use the Azure Cloud Managed Identity (or user-assigned identity) to authenticate with Azure-provider models.
	AzureUseManagedIdentity *bool `json:"azure_use_managed_identity,omitempty"`
	// Set this field to the full JSON of the GCP service account to authenticate, if required. If null (and gcp_use_service_account is true), Kong will attempt to read from environment variable `GCP_SERVICE_ACCOUNT`.
	GcpServiceAccountJSON *string `json:"gcp_service_account_json,omitempty"`
	// Use service account auth for GCP-based providers and models.
	GcpUseServiceAccount *bool `json:"gcp_use_service_account,omitempty"`
	// If AI model requires authentication via Authorization or API key header, specify its name here.
	HeaderName *string `json:"header_name,omitempty"`
	// Specify the full auth header value for 'header_name', for example 'Bearer key' or just 'key'.
	HeaderValue *string `json:"header_value,omitempty"`
	// Specify whether the 'param_name' and 'param_value' options go in a query string, or the POST form/JSON body.
	ParamLocation *AiLlmAsJudgePluginParamLocation `json:"param_location,omitempty"`
	// If AI model requires authentication via query parameter, specify its name here.
	ParamName *string `json:"param_name,omitempty"`
	// Specify the full parameter value for 'param_name'.
	ParamValue *string `json:"param_value,omitempty"`
}

func (a *AiLlmAsJudgePluginAuth) GetAllowOverride() *bool {
	if a == nil {
		return nil
	}
	return a.AllowOverride
}

func (a *AiLlmAsJudgePluginAuth) GetAwsAccessKeyID() *string {
	if a == nil {
		return nil
	}
	return a.AwsAccessKeyID
}

func (a *AiLlmAsJudgePluginAuth) GetAwsSecretAccessKey() *string {
	if a == nil {
		return nil
	}
	return a.AwsSecretAccessKey
}

func (a *AiLlmAsJudgePluginAuth) GetAzureClientID() *string {
	if a == nil {
		return nil
	}
	return a.AzureClientID
}

func (a *AiLlmAsJudgePluginAuth) GetAzureClientSecret() *string {
	if a == nil {
		return nil
	}
	return a.AzureClientSecret
}

func (a *AiLlmAsJudgePluginAuth) GetAzureTenantID() *string {
	if a == nil {
		return nil
	}
	return a.AzureTenantID
}

func (a *AiLlmAsJudgePluginAuth) GetAzureUseManagedIdentity() *bool {
	if a == nil {
		return nil
	}
	return a.AzureUseManagedIdentity
}

func (a *AiLlmAsJudgePluginAuth) GetGcpServiceAccountJSON() *string {
	if a == nil {
		return nil
	}
	return a.GcpServiceAccountJSON
}

func (a *AiLlmAsJudgePluginAuth) GetGcpUseServiceAccount() *bool {
	if a == nil {
		return nil
	}
	return a.GcpUseServiceAccount
}

func (a *AiLlmAsJudgePluginAuth) GetHeaderName() *string {
	if a == nil {
		return nil
	}
	return a.HeaderName
}

func (a *AiLlmAsJudgePluginAuth) GetHeaderValue() *string {
	if a == nil {
		return nil
	}
	return a.HeaderValue
}

func (a *AiLlmAsJudgePluginAuth) GetParamLocation() *AiLlmAsJudgePluginParamLocation {
	if a == nil {
		return nil
	}
	return a.ParamLocation
}

func (a *AiLlmAsJudgePluginAuth) GetParamName() *string {
	if a == nil {
		return nil
	}
	return a.ParamName
}

func (a *AiLlmAsJudgePluginAuth) GetParamValue() *string {
	if a == nil {
		return nil
	}
	return a.ParamValue
}

type AiLlmAsJudgePluginLogging struct {
	// If enabled, will log the request and response body into the Kong log plugin(s) output.
	LogPayloads *bool `json:"log_payloads,omitempty"`
	// If enabled and supported by the driver, will add model usage and token metrics into the Kong log plugin(s) output.
	LogStatistics *bool `json:"log_statistics,omitempty"`
}

func (a *AiLlmAsJudgePluginLogging) GetLogPayloads() *bool {
	if a == nil {
		return nil
	}
	return a.LogPayloads
}

func (a *AiLlmAsJudgePluginLogging) GetLogStatistics() *bool {
	if a == nil {
		return nil
	}
	return a.LogStatistics
}

type AiLlmAsJudgePluginBedrock struct {
	// If using AWS providers (Bedrock) you can assume a different role after authentication with the current IAM context is successful.
	AwsAssumeRoleArn *string `json:"aws_assume_role_arn,omitempty"`
	// If using AWS providers (Bedrock) you can override the `AWS_REGION` environment variable by setting this option.
	AwsRegion *string `json:"aws_region,omitempty"`
	// If using AWS providers (Bedrock), set the identifier of the assumed role session.
	AwsRoleSessionName *string `json:"aws_role_session_name,omitempty"`
	// If using AWS providers (Bedrock), override the STS endpoint URL when assuming a different role.
	AwsStsEndpointURL *string `json:"aws_sts_endpoint_url,omitempty"`
	// If using AWS providers (Bedrock), set to true to normalize the embeddings.
	EmbeddingsNormalize *bool `json:"embeddings_normalize,omitempty"`
	// Force the client's performance configuration 'latency' for all requests. Leave empty to let the consumer select the performance configuration.
	PerformanceConfigLatency *string `json:"performance_config_latency,omitempty"`
}

func (a *AiLlmAsJudgePluginBedrock) GetAwsAssumeRoleArn() *string {
	if a == nil {
		return nil
	}
	return a.AwsAssumeRoleArn
}

func (a *AiLlmAsJudgePluginBedrock) GetAwsRegion() *string {
	if a == nil {
		return nil
	}
	return a.AwsRegion
}

func (a *AiLlmAsJudgePluginBedrock) GetAwsRoleSessionName() *string {
	if a == nil {
		return nil
	}
	return a.AwsRoleSessionName
}

func (a *AiLlmAsJudgePluginBedrock) GetAwsStsEndpointURL() *string {
	if a == nil {
		return nil
	}
	return a.AwsStsEndpointURL
}

func (a *AiLlmAsJudgePluginBedrock) GetEmbeddingsNormalize() *bool {
	if a == nil {
		return nil
	}
	return a.EmbeddingsNormalize
}

func (a *AiLlmAsJudgePluginBedrock) GetPerformanceConfigLatency() *string {
	if a == nil {
		return nil
	}
	return a.PerformanceConfigLatency
}

// AiLlmAsJudgePluginEmbeddingInputType - The purpose of the input text to calculate embedding vectors.
type AiLlmAsJudgePluginEmbeddingInputType string

const (
	AiLlmAsJudgePluginEmbeddingInputTypeClassification AiLlmAsJudgePluginEmbeddingInputType = "classification"
	AiLlmAsJudgePluginEmbeddingInputTypeClustering     AiLlmAsJudgePluginEmbeddingInputType = "clustering"
	AiLlmAsJudgePluginEmbeddingInputTypeImage          AiLlmAsJudgePluginEmbeddingInputType = "image"
	AiLlmAsJudgePluginEmbeddingInputTypeSearchDocument AiLlmAsJudgePluginEmbeddingInputType = "search_document"
	AiLlmAsJudgePluginEmbeddingInputTypeSearchQuery    AiLlmAsJudgePluginEmbeddingInputType = "search_query"
)

func (e AiLlmAsJudgePluginEmbeddingInputType) ToPointer() *AiLlmAsJudgePluginEmbeddingInputType {
	return &e
}
func (e *AiLlmAsJudgePluginEmbeddingInputType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "classification":
		fallthrough
	case "clustering":
		fallthrough
	case "image":
		fallthrough
	case "search_document":
		fallthrough
	case "search_query":
		*e = AiLlmAsJudgePluginEmbeddingInputType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiLlmAsJudgePluginEmbeddingInputType: %v", v)
	}
}

type AiLlmAsJudgePluginCohere struct {
	// The purpose of the input text to calculate embedding vectors.
	EmbeddingInputType *AiLlmAsJudgePluginEmbeddingInputType `json:"embedding_input_type,omitempty"`
	// Wait for the model if it is not ready
	WaitForModel *bool `json:"wait_for_model,omitempty"`
}

func (a *AiLlmAsJudgePluginCohere) GetEmbeddingInputType() *AiLlmAsJudgePluginEmbeddingInputType {
	if a == nil {
		return nil
	}
	return a.EmbeddingInputType
}

func (a *AiLlmAsJudgePluginCohere) GetWaitForModel() *bool {
	if a == nil {
		return nil
	}
	return a.WaitForModel
}

type AiLlmAsJudgePluginGemini struct {
	// If running Gemini on Vertex, specify the regional API endpoint (hostname only).
	APIEndpoint *string `json:"api_endpoint,omitempty"`
	// If running Gemini on Vertex Model Garden, specify the endpoint ID.
	EndpointID *string `json:"endpoint_id,omitempty"`
	// If running Gemini on Vertex, specify the location ID.
	LocationID *string `json:"location_id,omitempty"`
	// If running Gemini on Vertex, specify the project ID.
	ProjectID *string `json:"project_id,omitempty"`
}

func (a *AiLlmAsJudgePluginGemini) GetAPIEndpoint() *string {
	if a == nil {
		return nil
	}
	return a.APIEndpoint
}

func (a *AiLlmAsJudgePluginGemini) GetEndpointID() *string {
	if a == nil {
		return nil
	}
	return a.EndpointID
}

func (a *AiLlmAsJudgePluginGemini) GetLocationID() *string {
	if a == nil {
		return nil
	}
	return a.LocationID
}

func (a *AiLlmAsJudgePluginGemini) GetProjectID() *string {
	if a == nil {
		return nil
	}
	return a.ProjectID
}

type AiLlmAsJudgePluginHuggingface struct {
	// Use the cache layer on the inference API
	UseCache *bool `json:"use_cache,omitempty"`
	// Wait for the model if it is not ready
	WaitForModel *bool `json:"wait_for_model,omitempty"`
}

func (a *AiLlmAsJudgePluginHuggingface) GetUseCache() *bool {
	if a == nil {
		return nil
	}
	return a.UseCache
}

func (a *AiLlmAsJudgePluginHuggingface) GetWaitForModel() *bool {
	if a == nil {
		return nil
	}
	return a.WaitForModel
}

// AiLlmAsJudgePluginLlama2Format - If using llama2 provider, select the upstream message format.
type AiLlmAsJudgePluginLlama2Format string

const (
	AiLlmAsJudgePluginLlama2FormatOllama AiLlmAsJudgePluginLlama2Format = "ollama"
	AiLlmAsJudgePluginLlama2FormatOpenai AiLlmAsJudgePluginLlama2Format = "openai"
	AiLlmAsJudgePluginLlama2FormatRaw    AiLlmAsJudgePluginLlama2Format = "raw"
)

func (e AiLlmAsJudgePluginLlama2Format) ToPointer() *AiLlmAsJudgePluginLlama2Format {
	return &e
}
func (e *AiLlmAsJudgePluginLlama2Format) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ollama":
		fallthrough
	case "openai":
		fallthrough
	case "raw":
		*e = AiLlmAsJudgePluginLlama2Format(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiLlmAsJudgePluginLlama2Format: %v", v)
	}
}

// AiLlmAsJudgePluginMistralFormat - If using mistral provider, select the upstream message format.
type AiLlmAsJudgePluginMistralFormat string

const (
	AiLlmAsJudgePluginMistralFormatOllama AiLlmAsJudgePluginMistralFormat = "ollama"
	AiLlmAsJudgePluginMistralFormatOpenai AiLlmAsJudgePluginMistralFormat = "openai"
)

func (e AiLlmAsJudgePluginMistralFormat) ToPointer() *AiLlmAsJudgePluginMistralFormat {
	return &e
}
func (e *AiLlmAsJudgePluginMistralFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ollama":
		fallthrough
	case "openai":
		*e = AiLlmAsJudgePluginMistralFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiLlmAsJudgePluginMistralFormat: %v", v)
	}
}

// AiLlmAsJudgePluginOptions - Key/value settings for the model
type AiLlmAsJudgePluginOptions struct {
	// Defines the schema/API version, if using Anthropic provider.
	AnthropicVersion *string `json:"anthropic_version,omitempty"`
	// 'api-version' for Azure OpenAI instances.
	AzureAPIVersion *string `json:"azure_api_version,omitempty"`
	// Deployment ID for Azure OpenAI instances.
	AzureDeploymentID *string `json:"azure_deployment_id,omitempty"`
	// Instance name for Azure OpenAI hosted models.
	AzureInstance *string                    `json:"azure_instance,omitempty"`
	Bedrock       *AiLlmAsJudgePluginBedrock `json:"bedrock,omitempty"`
	Cohere        *AiLlmAsJudgePluginCohere  `json:"cohere,omitempty"`
	// If using embeddings models, set the number of dimensions to generate.
	EmbeddingsDimensions *int64                         `json:"embeddings_dimensions,omitempty"`
	Gemini               *AiLlmAsJudgePluginGemini      `json:"gemini,omitempty"`
	Huggingface          *AiLlmAsJudgePluginHuggingface `json:"huggingface,omitempty"`
	// Defines the cost per 1M tokens in your prompt.
	InputCost *float64 `json:"input_cost,omitempty"`
	// If using llama2 provider, select the upstream message format.
	Llama2Format *AiLlmAsJudgePluginLlama2Format `json:"llama2_format,omitempty"`
	// Defines the max_tokens, if using chat or completion models.
	MaxTokens *int64 `json:"max_tokens,omitempty"`
	// If using mistral provider, select the upstream message format.
	MistralFormat *AiLlmAsJudgePluginMistralFormat `json:"mistral_format,omitempty"`
	// Defines the cost per 1M tokens in the output of the AI.
	OutputCost *float64 `json:"output_cost,omitempty"`
	// Defines the matching temperature, if using chat or completion models.
	Temperature *float64 `json:"temperature,omitempty"`
	// Defines the top-k most likely tokens, if supported.
	TopK *int64 `json:"top_k,omitempty"`
	// Defines the top-p probability mass, if supported.
	TopP *float64 `json:"top_p,omitempty"`
	// Manually specify or override the AI operation path, used when e.g. using the 'preserve' route_type.
	UpstreamPath *string `json:"upstream_path,omitempty"`
	// Manually specify or override the full URL to the AI operation endpoints, when calling (self-)hosted models, or for running via a private endpoint.
	UpstreamURL *string `json:"upstream_url,omitempty"`
}

func (a *AiLlmAsJudgePluginOptions) GetAnthropicVersion() *string {
	if a == nil {
		return nil
	}
	return a.AnthropicVersion
}

func (a *AiLlmAsJudgePluginOptions) GetAzureAPIVersion() *string {
	if a == nil {
		return nil
	}
	return a.AzureAPIVersion
}

func (a *AiLlmAsJudgePluginOptions) GetAzureDeploymentID() *string {
	if a == nil {
		return nil
	}
	return a.AzureDeploymentID
}

func (a *AiLlmAsJudgePluginOptions) GetAzureInstance() *string {
	if a == nil {
		return nil
	}
	return a.AzureInstance
}

func (a *AiLlmAsJudgePluginOptions) GetBedrock() *AiLlmAsJudgePluginBedrock {
	if a == nil {
		return nil
	}
	return a.Bedrock
}

func (a *AiLlmAsJudgePluginOptions) GetCohere() *AiLlmAsJudgePluginCohere {
	if a == nil {
		return nil
	}
	return a.Cohere
}

func (a *AiLlmAsJudgePluginOptions) GetEmbeddingsDimensions() *int64 {
	if a == nil {
		return nil
	}
	return a.EmbeddingsDimensions
}

func (a *AiLlmAsJudgePluginOptions) GetGemini() *AiLlmAsJudgePluginGemini {
	if a == nil {
		return nil
	}
	return a.Gemini
}

func (a *AiLlmAsJudgePluginOptions) GetHuggingface() *AiLlmAsJudgePluginHuggingface {
	if a == nil {
		return nil
	}
	return a.Huggingface
}

func (a *AiLlmAsJudgePluginOptions) GetInputCost() *float64 {
	if a == nil {
		return nil
	}
	return a.InputCost
}

func (a *AiLlmAsJudgePluginOptions) GetLlama2Format() *AiLlmAsJudgePluginLlama2Format {
	if a == nil {
		return nil
	}
	return a.Llama2Format
}

func (a *AiLlmAsJudgePluginOptions) GetMaxTokens() *int64 {
	if a == nil {
		return nil
	}
	return a.MaxTokens
}

func (a *AiLlmAsJudgePluginOptions) GetMistralFormat() *AiLlmAsJudgePluginMistralFormat {
	if a == nil {
		return nil
	}
	return a.MistralFormat
}

func (a *AiLlmAsJudgePluginOptions) GetOutputCost() *float64 {
	if a == nil {
		return nil
	}
	return a.OutputCost
}

func (a *AiLlmAsJudgePluginOptions) GetTemperature() *float64 {
	if a == nil {
		return nil
	}
	return a.Temperature
}

func (a *AiLlmAsJudgePluginOptions) GetTopK() *int64 {
	if a == nil {
		return nil
	}
	return a.TopK
}

func (a *AiLlmAsJudgePluginOptions) GetTopP() *float64 {
	if a == nil {
		return nil
	}
	return a.TopP
}

func (a *AiLlmAsJudgePluginOptions) GetUpstreamPath() *string {
	if a == nil {
		return nil
	}
	return a.UpstreamPath
}

func (a *AiLlmAsJudgePluginOptions) GetUpstreamURL() *string {
	if a == nil {
		return nil
	}
	return a.UpstreamURL
}

// AiLlmAsJudgePluginProvider - AI provider request format - Kong translates requests to and from the specified backend compatible formats.
type AiLlmAsJudgePluginProvider string

const (
	AiLlmAsJudgePluginProviderAnthropic   AiLlmAsJudgePluginProvider = "anthropic"
	AiLlmAsJudgePluginProviderAzure       AiLlmAsJudgePluginProvider = "azure"
	AiLlmAsJudgePluginProviderBedrock     AiLlmAsJudgePluginProvider = "bedrock"
	AiLlmAsJudgePluginProviderCohere      AiLlmAsJudgePluginProvider = "cohere"
	AiLlmAsJudgePluginProviderGemini      AiLlmAsJudgePluginProvider = "gemini"
	AiLlmAsJudgePluginProviderHuggingface AiLlmAsJudgePluginProvider = "huggingface"
	AiLlmAsJudgePluginProviderLlama2      AiLlmAsJudgePluginProvider = "llama2"
	AiLlmAsJudgePluginProviderMistral     AiLlmAsJudgePluginProvider = "mistral"
	AiLlmAsJudgePluginProviderOpenai      AiLlmAsJudgePluginProvider = "openai"
)

func (e AiLlmAsJudgePluginProvider) ToPointer() *AiLlmAsJudgePluginProvider {
	return &e
}
func (e *AiLlmAsJudgePluginProvider) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "anthropic":
		fallthrough
	case "azure":
		fallthrough
	case "bedrock":
		fallthrough
	case "cohere":
		fallthrough
	case "gemini":
		fallthrough
	case "huggingface":
		fallthrough
	case "llama2":
		fallthrough
	case "mistral":
		fallthrough
	case "openai":
		*e = AiLlmAsJudgePluginProvider(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiLlmAsJudgePluginProvider: %v", v)
	}
}

type AiLlmAsJudgePluginModel struct {
	// Model name to execute.
	Name *string `json:"name,omitempty"`
	// Key/value settings for the model
	Options *AiLlmAsJudgePluginOptions `json:"options,omitempty"`
	// AI provider request format - Kong translates requests to and from the specified backend compatible formats.
	Provider AiLlmAsJudgePluginProvider `json:"provider"`
}

func (a *AiLlmAsJudgePluginModel) GetName() *string {
	if a == nil {
		return nil
	}
	return a.Name
}

func (a *AiLlmAsJudgePluginModel) GetOptions() *AiLlmAsJudgePluginOptions {
	if a == nil {
		return nil
	}
	return a.Options
}

func (a *AiLlmAsJudgePluginModel) GetProvider() AiLlmAsJudgePluginProvider {
	if a == nil {
		return AiLlmAsJudgePluginProvider("")
	}
	return a.Provider
}

// AiLlmAsJudgePluginRouteType - The model's operation implementation, for this provider.
type AiLlmAsJudgePluginRouteType string

const (
	AiLlmAsJudgePluginRouteTypeAudioV1AudioSpeech         AiLlmAsJudgePluginRouteType = "audio/v1/audio/speech"
	AiLlmAsJudgePluginRouteTypeAudioV1AudioTranscriptions AiLlmAsJudgePluginRouteType = "audio/v1/audio/transcriptions"
	AiLlmAsJudgePluginRouteTypeAudioV1AudioTranslations   AiLlmAsJudgePluginRouteType = "audio/v1/audio/translations"
	AiLlmAsJudgePluginRouteTypeImageV1ImagesEdits         AiLlmAsJudgePluginRouteType = "image/v1/images/edits"
	AiLlmAsJudgePluginRouteTypeImageV1ImagesGenerations   AiLlmAsJudgePluginRouteType = "image/v1/images/generations"
	AiLlmAsJudgePluginRouteTypeLlmV1Assistants            AiLlmAsJudgePluginRouteType = "llm/v1/assistants"
	AiLlmAsJudgePluginRouteTypeLlmV1Batches               AiLlmAsJudgePluginRouteType = "llm/v1/batches"
	AiLlmAsJudgePluginRouteTypeLlmV1Chat                  AiLlmAsJudgePluginRouteType = "llm/v1/chat"
	AiLlmAsJudgePluginRouteTypeLlmV1Completions           AiLlmAsJudgePluginRouteType = "llm/v1/completions"
	AiLlmAsJudgePluginRouteTypeLlmV1Embeddings            AiLlmAsJudgePluginRouteType = "llm/v1/embeddings"
	AiLlmAsJudgePluginRouteTypeLlmV1Files                 AiLlmAsJudgePluginRouteType = "llm/v1/files"
	AiLlmAsJudgePluginRouteTypeLlmV1Responses             AiLlmAsJudgePluginRouteType = "llm/v1/responses"
	AiLlmAsJudgePluginRouteTypePreserve                   AiLlmAsJudgePluginRouteType = "preserve"
	AiLlmAsJudgePluginRouteTypeRealtimeV1Realtime         AiLlmAsJudgePluginRouteType = "realtime/v1/realtime"
)

func (e AiLlmAsJudgePluginRouteType) ToPointer() *AiLlmAsJudgePluginRouteType {
	return &e
}
func (e *AiLlmAsJudgePluginRouteType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "audio/v1/audio/speech":
		fallthrough
	case "audio/v1/audio/transcriptions":
		fallthrough
	case "audio/v1/audio/translations":
		fallthrough
	case "image/v1/images/edits":
		fallthrough
	case "image/v1/images/generations":
		fallthrough
	case "llm/v1/assistants":
		fallthrough
	case "llm/v1/batches":
		fallthrough
	case "llm/v1/chat":
		fallthrough
	case "llm/v1/completions":
		fallthrough
	case "llm/v1/embeddings":
		fallthrough
	case "llm/v1/files":
		fallthrough
	case "llm/v1/responses":
		fallthrough
	case "preserve":
		fallthrough
	case "realtime/v1/realtime":
		*e = AiLlmAsJudgePluginRouteType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiLlmAsJudgePluginRouteType: %v", v)
	}
}

type Llm struct {
	Auth    *AiLlmAsJudgePluginAuth    `json:"auth,omitempty"`
	Logging *AiLlmAsJudgePluginLogging `json:"logging,omitempty"`
	Model   AiLlmAsJudgePluginModel    `json:"model"`
	// The model's operation implementation, for this provider.
	RouteType AiLlmAsJudgePluginRouteType `json:"route_type"`
}

func (l *Llm) GetAuth() *AiLlmAsJudgePluginAuth {
	if l == nil {
		return nil
	}
	return l.Auth
}

func (l *Llm) GetLogging() *AiLlmAsJudgePluginLogging {
	if l == nil {
		return nil
	}
	return l.Logging
}

func (l *Llm) GetModel() AiLlmAsJudgePluginModel {
	if l == nil {
		return AiLlmAsJudgePluginModel{}
	}
	return l.Model
}

func (l *Llm) GetRouteType() AiLlmAsJudgePluginRouteType {
	if l == nil {
		return AiLlmAsJudgePluginRouteType("")
	}
	return l.RouteType
}

type AiLlmAsJudgePluginConfig struct {
	// A string representing a host name, such as example.com.
	HTTPProxyHost *string `json:"http_proxy_host,omitempty"`
	// An integer representing a port number between 0 and 65535, inclusive.
	HTTPProxyPort *int64 `json:"http_proxy_port,omitempty"`
	// Timeout in milliseconds for the AI upstream service.
	HTTPTimeout *int64 `json:"http_timeout,omitempty"`
	// A string representing a host name, such as example.com.
	HTTPSProxyHost *string `json:"https_proxy_host,omitempty"`
	// An integer representing a port number between 0 and 65535, inclusive.
	HTTPSProxyPort *int64 `json:"https_proxy_port,omitempty"`
	// Verify the TLS certificate of the AI upstream service.
	HTTPSVerify *bool `json:"https_verify,omitempty"`
	// Ignore and discard any assistant prompts when evaluating the request
	IgnoreAssistantPrompts *bool `json:"ignore_assistant_prompts,omitempty"`
	// Ignore and discard any system prompts when evaluating the request
	IgnoreSystemPrompts *bool `json:"ignore_system_prompts,omitempty"`
	// Ignore and discard any tool prompts when evaluating the request
	IgnoreToolPrompts *bool `json:"ignore_tool_prompts,omitempty"`
	Llm               Llm   `json:"llm"`
	// Number of messages in the chat history to use for evaluating the request
	MessageCountback *float64 `json:"message_countback,omitempty"`
	// Use this prompt to tune the LLM system/assistant message for the llm as a judge prompt.
	Prompt *string `json:"prompt,omitempty"`
	// Judging request sampling rate for configuring the probability-based sampler.
	SamplingRate *float64 `json:"sampling_rate,omitempty"`
}

func (a *AiLlmAsJudgePluginConfig) GetHTTPProxyHost() *string {
	if a == nil {
		return nil
	}
	return a.HTTPProxyHost
}

func (a *AiLlmAsJudgePluginConfig) GetHTTPProxyPort() *int64 {
	if a == nil {
		return nil
	}
	return a.HTTPProxyPort
}

func (a *AiLlmAsJudgePluginConfig) GetHTTPTimeout() *int64 {
	if a == nil {
		return nil
	}
	return a.HTTPTimeout
}

func (a *AiLlmAsJudgePluginConfig) GetHTTPSProxyHost() *string {
	if a == nil {
		return nil
	}
	return a.HTTPSProxyHost
}

func (a *AiLlmAsJudgePluginConfig) GetHTTPSProxyPort() *int64 {
	if a == nil {
		return nil
	}
	return a.HTTPSProxyPort
}

func (a *AiLlmAsJudgePluginConfig) GetHTTPSVerify() *bool {
	if a == nil {
		return nil
	}
	return a.HTTPSVerify
}

func (a *AiLlmAsJudgePluginConfig) GetIgnoreAssistantPrompts() *bool {
	if a == nil {
		return nil
	}
	return a.IgnoreAssistantPrompts
}

func (a *AiLlmAsJudgePluginConfig) GetIgnoreSystemPrompts() *bool {
	if a == nil {
		return nil
	}
	return a.IgnoreSystemPrompts
}

func (a *AiLlmAsJudgePluginConfig) GetIgnoreToolPrompts() *bool {
	if a == nil {
		return nil
	}
	return a.IgnoreToolPrompts
}

func (a *AiLlmAsJudgePluginConfig) GetLlm() Llm {
	if a == nil {
		return Llm{}
	}
	return a.Llm
}

func (a *AiLlmAsJudgePluginConfig) GetMessageCountback() *float64 {
	if a == nil {
		return nil
	}
	return a.MessageCountback
}

func (a *AiLlmAsJudgePluginConfig) GetPrompt() *string {
	if a == nil {
		return nil
	}
	return a.Prompt
}

func (a *AiLlmAsJudgePluginConfig) GetSamplingRate() *float64 {
	if a == nil {
		return nil
	}
	return a.SamplingRate
}

// AiLlmAsJudgePluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type AiLlmAsJudgePluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (a *AiLlmAsJudgePluginConsumer) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

// AiLlmAsJudgePluginConsumerGroup - If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups
type AiLlmAsJudgePluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (a *AiLlmAsJudgePluginConsumerGroup) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

type AiLlmAsJudgePluginProtocols string

const (
	AiLlmAsJudgePluginProtocolsGrpc  AiLlmAsJudgePluginProtocols = "grpc"
	AiLlmAsJudgePluginProtocolsGrpcs AiLlmAsJudgePluginProtocols = "grpcs"
	AiLlmAsJudgePluginProtocolsHTTP  AiLlmAsJudgePluginProtocols = "http"
	AiLlmAsJudgePluginProtocolsHTTPS AiLlmAsJudgePluginProtocols = "https"
)

func (e AiLlmAsJudgePluginProtocols) ToPointer() *AiLlmAsJudgePluginProtocols {
	return &e
}
func (e *AiLlmAsJudgePluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		*e = AiLlmAsJudgePluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiLlmAsJudgePluginProtocols: %v", v)
	}
}

// AiLlmAsJudgePluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type AiLlmAsJudgePluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (a *AiLlmAsJudgePluginRoute) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

// AiLlmAsJudgePluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type AiLlmAsJudgePluginService struct {
	ID *string `json:"id,omitempty"`
}

func (a *AiLlmAsJudgePluginService) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

// AiLlmAsJudgePlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type AiLlmAsJudgePlugin struct {
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `json:"enabled,omitempty"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string                     `json:"instance_name,omitempty"`
	name         string                      `const:"ai-llm-as-judge" json:"name"`
	Ordering     *AiLlmAsJudgePluginOrdering `json:"ordering,omitempty"`
	// A list of partials to be used by the plugin.
	Partials []AiLlmAsJudgePluginPartials `json:"partials,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64                   `json:"updated_at,omitempty"`
	Config    AiLlmAsJudgePluginConfig `json:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer *AiLlmAsJudgePluginConsumer `json:"consumer,omitempty"`
	// If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups
	ConsumerGroup *AiLlmAsJudgePluginConsumerGroup `json:"consumer_group,omitempty"`
	// A set of strings representing HTTP protocols.
	Protocols []AiLlmAsJudgePluginProtocols `json:"protocols,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *AiLlmAsJudgePluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *AiLlmAsJudgePluginService `json:"service,omitempty"`
}

func (a AiLlmAsJudgePlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AiLlmAsJudgePlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"name", "config"}); err != nil {
		return err
	}
	return nil
}

func (a *AiLlmAsJudgePlugin) GetCreatedAt() *int64 {
	if a == nil {
		return nil
	}
	return a.CreatedAt
}

func (a *AiLlmAsJudgePlugin) GetEnabled() *bool {
	if a == nil {
		return nil
	}
	return a.Enabled
}

func (a *AiLlmAsJudgePlugin) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *AiLlmAsJudgePlugin) GetInstanceName() *string {
	if a == nil {
		return nil
	}
	return a.InstanceName
}

func (a *AiLlmAsJudgePlugin) GetName() string {
	return "ai-llm-as-judge"
}

func (a *AiLlmAsJudgePlugin) GetOrdering() *AiLlmAsJudgePluginOrdering {
	if a == nil {
		return nil
	}
	return a.Ordering
}

func (a *AiLlmAsJudgePlugin) GetPartials() []AiLlmAsJudgePluginPartials {
	if a == nil {
		return nil
	}
	return a.Partials
}

func (a *AiLlmAsJudgePlugin) GetTags() []string {
	if a == nil {
		return nil
	}
	return a.Tags
}

func (a *AiLlmAsJudgePlugin) GetUpdatedAt() *int64 {
	if a == nil {
		return nil
	}
	return a.UpdatedAt
}

func (a *AiLlmAsJudgePlugin) GetConfig() AiLlmAsJudgePluginConfig {
	if a == nil {
		return AiLlmAsJudgePluginConfig{}
	}
	return a.Config
}

func (a *AiLlmAsJudgePlugin) GetConsumer() *AiLlmAsJudgePluginConsumer {
	if a == nil {
		return nil
	}
	return a.Consumer
}

func (a *AiLlmAsJudgePlugin) GetConsumerGroup() *AiLlmAsJudgePluginConsumerGroup {
	if a == nil {
		return nil
	}
	return a.ConsumerGroup
}

func (a *AiLlmAsJudgePlugin) GetProtocols() []AiLlmAsJudgePluginProtocols {
	if a == nil {
		return nil
	}
	return a.Protocols
}

func (a *AiLlmAsJudgePlugin) GetRoute() *AiLlmAsJudgePluginRoute {
	if a == nil {
		return nil
	}
	return a.Route
}

func (a *AiLlmAsJudgePlugin) GetService() *AiLlmAsJudgePluginService {
	if a == nil {
		return nil
	}
	return a.Service
}
