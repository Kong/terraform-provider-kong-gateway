// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/models/shared"
)

func (r *ACLResourceModel) RefreshFromSharedACL(ctx context.Context, resp *shared.ACL) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.Group = types.StringValue(resp.Group)
		r.ID = types.StringPointerValue(resp.ID)
		if resp.Tags != nil {
			r.Tags = make([]types.String, 0, len(resp.Tags))
			for _, v := range resp.Tags {
				r.Tags = append(r.Tags, types.StringValue(v))
			}
		}
	}

	return diags
}

func (r *ACLResourceModel) ToOperationsCreateACLWithConsumerRequest(ctx context.Context) (*operations.CreateACLWithConsumerRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var consumerID string
	consumerID = r.ConsumerID.ValueString()

	var workspace string
	workspace = r.Workspace.ValueString()

	aclWithoutParents, aclWithoutParentsDiags := r.ToSharedACLWithoutParents(ctx)
	diags.Append(aclWithoutParentsDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateACLWithConsumerRequest{
		ConsumerID:        consumerID,
		Workspace:         workspace,
		ACLWithoutParents: *aclWithoutParents,
	}

	return &out, diags
}

func (r *ACLResourceModel) ToOperationsDeleteACLWithConsumerRequest(ctx context.Context) (*operations.DeleteACLWithConsumerRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var consumerID string
	consumerID = r.ConsumerID.ValueString()

	var aclID string
	aclID = r.ID.ValueString()

	var workspace string
	workspace = r.Workspace.ValueString()

	out := operations.DeleteACLWithConsumerRequest{
		ConsumerID: consumerID,
		ACLID:      aclID,
		Workspace:  workspace,
	}

	return &out, diags
}

func (r *ACLResourceModel) ToOperationsGetACLWithConsumerRequest(ctx context.Context) (*operations.GetACLWithConsumerRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var consumerID string
	consumerID = r.ConsumerID.ValueString()

	var aclID string
	aclID = r.ID.ValueString()

	var workspace string
	workspace = r.Workspace.ValueString()

	out := operations.GetACLWithConsumerRequest{
		ConsumerID: consumerID,
		ACLID:      aclID,
		Workspace:  workspace,
	}

	return &out, diags
}

func (r *ACLResourceModel) ToSharedACLWithoutParents(ctx context.Context) (*shared.ACLWithoutParents, diag.Diagnostics) {
	var diags diag.Diagnostics

	createdAt := new(int64)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt = r.CreatedAt.ValueInt64()
	} else {
		createdAt = nil
	}
	var group string
	group = r.Group.ValueString()

	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	var tags []string
	if r.Tags != nil {
		tags = make([]string, 0, len(r.Tags))
		for _, tagsItem := range r.Tags {
			tags = append(tags, tagsItem.ValueString())
		}
	}
	out := shared.ACLWithoutParents{
		CreatedAt: createdAt,
		Group:     group,
		ID:        id,
		Tags:      tags,
	}

	return &out, diags
}
