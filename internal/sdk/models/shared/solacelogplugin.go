// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/internal/utils"
)

type SolaceLogPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (s *SolaceLogPluginAfter) GetAccess() []string {
	if s == nil {
		return nil
	}
	return s.Access
}

type SolaceLogPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (s *SolaceLogPluginBefore) GetAccess() []string {
	if s == nil {
		return nil
	}
	return s.Access
}

type SolaceLogPluginOrdering struct {
	After  *SolaceLogPluginAfter  `json:"after,omitempty"`
	Before *SolaceLogPluginBefore `json:"before,omitempty"`
}

func (s *SolaceLogPluginOrdering) GetAfter() *SolaceLogPluginAfter {
	if s == nil {
		return nil
	}
	return s.After
}

func (s *SolaceLogPluginOrdering) GetBefore() *SolaceLogPluginBefore {
	if s == nil {
		return nil
	}
	return s.Before
}

type SolaceLogPluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

func (s *SolaceLogPluginPartials) GetID() *string {
	if s == nil {
		return nil
	}
	return s.ID
}

func (s *SolaceLogPluginPartials) GetName() *string {
	if s == nil {
		return nil
	}
	return s.Name
}

func (s *SolaceLogPluginPartials) GetPath() *string {
	if s == nil {
		return nil
	}
	return s.Path
}

// DeliveryMode - Sets the log message delivery mode.
type DeliveryMode string

const (
	DeliveryModeDirect     DeliveryMode = "DIRECT"
	DeliveryModePersistent DeliveryMode = "PERSISTENT"
)

func (e DeliveryMode) ToPointer() *DeliveryMode {
	return &e
}
func (e *DeliveryMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DIRECT":
		fallthrough
	case "PERSISTENT":
		*e = DeliveryMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeliveryMode: %v", v)
	}
}

// SolaceLogPluginType - The type of the destination.
type SolaceLogPluginType string

const (
	SolaceLogPluginTypeQueue SolaceLogPluginType = "QUEUE"
	SolaceLogPluginTypeTopic SolaceLogPluginType = "TOPIC"
)

func (e SolaceLogPluginType) ToPointer() *SolaceLogPluginType {
	return &e
}
func (e *SolaceLogPluginType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "QUEUE":
		fallthrough
	case "TOPIC":
		*e = SolaceLogPluginType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SolaceLogPluginType: %v", v)
	}
}

type SolaceLogPluginDestinations struct {
	// The name of the destination. You can use `$(uri_captures['<capture-identifier>'])` in this field to capture the name from a regex request URI (replace `<capture-identifier>` with a real value; for example `$(uri_captures['queue'])` when the matched route has a path `~/(?<queue>[a-z]+)`).
	Name string `json:"name"`
	// The type of the destination.
	Type *SolaceLogPluginType `json:"type,omitempty"`
}

func (s *SolaceLogPluginDestinations) GetName() string {
	if s == nil {
		return ""
	}
	return s.Name
}

func (s *SolaceLogPluginDestinations) GetType() *SolaceLogPluginType {
	if s == nil {
		return nil
	}
	return s.Type
}

// Message - The log message related configuration.
type Message struct {
	// When using a non-DIRECT guaranteed delivery mode, this property sets the log message acknowledgement timeout (waiting time).
	AckTimeout *int64 `json:"ack_timeout,omitempty"`
	// A key-value map that dynamically modifies log fields using Lua code.
	CustomFieldsByLua map[string]string `json:"custom_fields_by_lua,omitempty"`
	// Sets the log message delivery mode.
	DeliveryMode *DeliveryMode `json:"delivery_mode,omitempty"`
	// The log message destinations.
	Destinations []SolaceLogPluginDestinations `json:"destinations"`
	// Sets the dead message queue (DMQ) eligible property on the log message.
	DmqEligible *bool `json:"dmq_eligible,omitempty"`
	// Sets the log message priority.
	Priority *int64 `json:"priority,omitempty"`
	// Allows the application to set the sender identifier.
	SenderID *string `json:"sender_id,omitempty"`
	// Enable or disable the tracing. This is primarily used for distributed tracing and log message correlation, especially in debugging or tracking log message flows across multiple systems.
	Tracing *bool `json:"tracing,omitempty"`
	// Indicates whether the log message should be included in distributed tracing (i.e., if it should be "sampled" for the tracing).
	TracingSampled *bool `json:"tracing_sampled,omitempty"`
	// Sets the time to live (TTL) in milliseconds for the log message. Setting the time to live to zero disables the TTL for the log message.
	TTL *int64 `json:"ttl,omitempty"`
}

func (m *Message) GetAckTimeout() *int64 {
	if m == nil {
		return nil
	}
	return m.AckTimeout
}

func (m *Message) GetCustomFieldsByLua() map[string]string {
	if m == nil {
		return nil
	}
	return m.CustomFieldsByLua
}

func (m *Message) GetDeliveryMode() *DeliveryMode {
	if m == nil {
		return nil
	}
	return m.DeliveryMode
}

func (m *Message) GetDestinations() []SolaceLogPluginDestinations {
	if m == nil {
		return []SolaceLogPluginDestinations{}
	}
	return m.Destinations
}

func (m *Message) GetDmqEligible() *bool {
	if m == nil {
		return nil
	}
	return m.DmqEligible
}

func (m *Message) GetPriority() *int64 {
	if m == nil {
		return nil
	}
	return m.Priority
}

func (m *Message) GetSenderID() *string {
	if m == nil {
		return nil
	}
	return m.SenderID
}

func (m *Message) GetTracing() *bool {
	if m == nil {
		return nil
	}
	return m.Tracing
}

func (m *Message) GetTracingSampled() *bool {
	if m == nil {
		return nil
	}
	return m.TracingSampled
}

func (m *Message) GetTTL() *int64 {
	if m == nil {
		return nil
	}
	return m.TTL
}

// SolaceLogPluginScheme - The client authentication scheme used when connection to an event broker.
type SolaceLogPluginScheme string

const (
	SolaceLogPluginSchemeBasic  SolaceLogPluginScheme = "BASIC"
	SolaceLogPluginSchemeNone   SolaceLogPluginScheme = "NONE"
	SolaceLogPluginSchemeOauth2 SolaceLogPluginScheme = "OAUTH2"
)

func (e SolaceLogPluginScheme) ToPointer() *SolaceLogPluginScheme {
	return &e
}
func (e *SolaceLogPluginScheme) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BASIC":
		fallthrough
	case "NONE":
		fallthrough
	case "OAUTH2":
		*e = SolaceLogPluginScheme(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SolaceLogPluginScheme: %v", v)
	}
}

// SolaceLogPluginAuthentication - Session authentication related configuration.
type SolaceLogPluginAuthentication struct {
	// The OAuth2 access token used with `OAUTH2` authentication scheme when connecting to an event broker.
	AccessToken       *string `json:"access_token,omitempty"`
	AccessTokenHeader *string `json:"access_token_header,omitempty"`
	// The OpenID Connect ID token used with `OAUTH2` authentication scheme when connecting to an event broker.
	IDToken       *string `json:"id_token,omitempty"`
	IDTokenHeader *string `json:"id_token_header,omitempty"`
	// The password used with `BASIC` authentication scheme when connecting to an event broker.
	Password *string `json:"password,omitempty"`
	// The client authentication scheme used when connection to an event broker.
	Scheme *SolaceLogPluginScheme `json:"scheme,omitempty"`
	// The username used with `BASIC` authentication scheme when connecting to an event broker.
	Username *string `json:"username,omitempty"`
}

func (s *SolaceLogPluginAuthentication) GetAccessToken() *string {
	if s == nil {
		return nil
	}
	return s.AccessToken
}

func (s *SolaceLogPluginAuthentication) GetAccessTokenHeader() *string {
	if s == nil {
		return nil
	}
	return s.AccessTokenHeader
}

func (s *SolaceLogPluginAuthentication) GetIDToken() *string {
	if s == nil {
		return nil
	}
	return s.IDToken
}

func (s *SolaceLogPluginAuthentication) GetIDTokenHeader() *string {
	if s == nil {
		return nil
	}
	return s.IDTokenHeader
}

func (s *SolaceLogPluginAuthentication) GetPassword() *string {
	if s == nil {
		return nil
	}
	return s.Password
}

func (s *SolaceLogPluginAuthentication) GetScheme() *SolaceLogPluginScheme {
	if s == nil {
		return nil
	}
	return s.Scheme
}

func (s *SolaceLogPluginAuthentication) GetUsername() *string {
	if s == nil {
		return nil
	}
	return s.Username
}

// SolaceLogPluginSession - Session related configuration.
type SolaceLogPluginSession struct {
	// Session authentication related configuration.
	Authentication *SolaceLogPluginAuthentication `json:"authentication,omitempty"`
	// If this property is true and time-to-live has a positive value in a message, the expiration time is calculated when the message is sent or received
	CalculateMessageExpiry *bool `json:"calculate_message_expiry,omitempty"`
	// The timeout period (in milliseconds) for a connect operation to a given host (per host).
	ConnectTimeout *int64 `json:"connect_timeout,omitempty"`
	// When enabled, a receive timestamp is recorded for each message.
	GenerateRcvTimestamps *bool `json:"generate_rcv_timestamps,omitempty"`
	// When enabled, a send timestamp is automatically included (if not already present) in the Solace-defined fields for each message sent.
	GenerateSendTimestamps *bool `json:"generate_send_timestamps,omitempty"`
	// When enabled, a sender id is automatically included (if not already present) in the Solace-defined fields for each message sent.
	GenerateSenderID *bool `json:"generate_sender_id,omitempty"`
	// When enabled, a sequence number is automatically included (if not already present) in the Solace-defined fields for each message sent.
	GenerateSequenceNumber *bool `json:"generate_sequence_number,omitempty"`
	// The IPv4 or IPv6 address or host name to connect to (see: https://docs.solace.com/API-Developer-Online-Ref-Documentation/c/index.html#host-entry).
	Host string `json:"host"`
	// Additional Solace session properties (each setting needs to have `SESSION_` prefix).
	Properties map[string]any `json:"properties,omitempty"`
	// Indicates whether the API should validate server certificates with the trusted certificates.
	SslValidateCertificate *bool `json:"ssl_validate_certificate,omitempty"`
	// The name of the Message VPN to attempt to join when connecting to an event broker.
	VpnName *string `json:"vpn_name,omitempty"`
}

func (s *SolaceLogPluginSession) GetAuthentication() *SolaceLogPluginAuthentication {
	if s == nil {
		return nil
	}
	return s.Authentication
}

func (s *SolaceLogPluginSession) GetCalculateMessageExpiry() *bool {
	if s == nil {
		return nil
	}
	return s.CalculateMessageExpiry
}

func (s *SolaceLogPluginSession) GetConnectTimeout() *int64 {
	if s == nil {
		return nil
	}
	return s.ConnectTimeout
}

func (s *SolaceLogPluginSession) GetGenerateRcvTimestamps() *bool {
	if s == nil {
		return nil
	}
	return s.GenerateRcvTimestamps
}

func (s *SolaceLogPluginSession) GetGenerateSendTimestamps() *bool {
	if s == nil {
		return nil
	}
	return s.GenerateSendTimestamps
}

func (s *SolaceLogPluginSession) GetGenerateSenderID() *bool {
	if s == nil {
		return nil
	}
	return s.GenerateSenderID
}

func (s *SolaceLogPluginSession) GetGenerateSequenceNumber() *bool {
	if s == nil {
		return nil
	}
	return s.GenerateSequenceNumber
}

func (s *SolaceLogPluginSession) GetHost() string {
	if s == nil {
		return ""
	}
	return s.Host
}

func (s *SolaceLogPluginSession) GetProperties() map[string]any {
	if s == nil {
		return nil
	}
	return s.Properties
}

func (s *SolaceLogPluginSession) GetSslValidateCertificate() *bool {
	if s == nil {
		return nil
	}
	return s.SslValidateCertificate
}

func (s *SolaceLogPluginSession) GetVpnName() *string {
	if s == nil {
		return nil
	}
	return s.VpnName
}

type SolaceLogPluginConfig struct {
	// The log message related configuration.
	Message Message `json:"message"`
	// Session related configuration.
	Session SolaceLogPluginSession `json:"session"`
}

func (s *SolaceLogPluginConfig) GetMessage() Message {
	if s == nil {
		return Message{}
	}
	return s.Message
}

func (s *SolaceLogPluginConfig) GetSession() SolaceLogPluginSession {
	if s == nil {
		return SolaceLogPluginSession{}
	}
	return s.Session
}

type SolaceLogPluginProtocols string

const (
	SolaceLogPluginProtocolsGrpc  SolaceLogPluginProtocols = "grpc"
	SolaceLogPluginProtocolsGrpcs SolaceLogPluginProtocols = "grpcs"
	SolaceLogPluginProtocolsHTTP  SolaceLogPluginProtocols = "http"
	SolaceLogPluginProtocolsHTTPS SolaceLogPluginProtocols = "https"
	SolaceLogPluginProtocolsWs    SolaceLogPluginProtocols = "ws"
	SolaceLogPluginProtocolsWss   SolaceLogPluginProtocols = "wss"
)

func (e SolaceLogPluginProtocols) ToPointer() *SolaceLogPluginProtocols {
	return &e
}
func (e *SolaceLogPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = SolaceLogPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SolaceLogPluginProtocols: %v", v)
	}
}

// SolaceLogPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type SolaceLogPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (s *SolaceLogPluginRoute) GetID() *string {
	if s == nil {
		return nil
	}
	return s.ID
}

// SolaceLogPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type SolaceLogPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (s *SolaceLogPluginService) GetID() *string {
	if s == nil {
		return nil
	}
	return s.ID
}

// SolaceLogPlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type SolaceLogPlugin struct {
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `json:"enabled,omitempty"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string                  `json:"instance_name,omitempty"`
	name         string                   `const:"solace-log" json:"name"`
	Ordering     *SolaceLogPluginOrdering `json:"ordering,omitempty"`
	// A list of partials to be used by the plugin.
	Partials []SolaceLogPluginPartials `json:"partials,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64                `json:"updated_at,omitempty"`
	Config    SolaceLogPluginConfig `json:"config"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support tcp and tls.
	Protocols []SolaceLogPluginProtocols `json:"protocols,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *SolaceLogPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *SolaceLogPluginService `json:"service,omitempty"`
}

func (s SolaceLogPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SolaceLogPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, []string{"name", "config"}); err != nil {
		return err
	}
	return nil
}

func (s *SolaceLogPlugin) GetCreatedAt() *int64 {
	if s == nil {
		return nil
	}
	return s.CreatedAt
}

func (s *SolaceLogPlugin) GetEnabled() *bool {
	if s == nil {
		return nil
	}
	return s.Enabled
}

func (s *SolaceLogPlugin) GetID() *string {
	if s == nil {
		return nil
	}
	return s.ID
}

func (s *SolaceLogPlugin) GetInstanceName() *string {
	if s == nil {
		return nil
	}
	return s.InstanceName
}

func (s *SolaceLogPlugin) GetName() string {
	return "solace-log"
}

func (s *SolaceLogPlugin) GetOrdering() *SolaceLogPluginOrdering {
	if s == nil {
		return nil
	}
	return s.Ordering
}

func (s *SolaceLogPlugin) GetPartials() []SolaceLogPluginPartials {
	if s == nil {
		return nil
	}
	return s.Partials
}

func (s *SolaceLogPlugin) GetTags() []string {
	if s == nil {
		return nil
	}
	return s.Tags
}

func (s *SolaceLogPlugin) GetUpdatedAt() *int64 {
	if s == nil {
		return nil
	}
	return s.UpdatedAt
}

func (s *SolaceLogPlugin) GetConfig() SolaceLogPluginConfig {
	if s == nil {
		return SolaceLogPluginConfig{}
	}
	return s.Config
}

func (s *SolaceLogPlugin) GetProtocols() []SolaceLogPluginProtocols {
	if s == nil {
		return nil
	}
	return s.Protocols
}

func (s *SolaceLogPlugin) GetRoute() *SolaceLogPluginRoute {
	if s == nil {
		return nil
	}
	return s.Route
}

func (s *SolaceLogPlugin) GetService() *SolaceLogPluginService {
	if s == nil {
		return nil
	}
	return s.Service
}
