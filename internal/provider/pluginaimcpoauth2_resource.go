// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/mapvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/kong/terraform-provider-kong-gateway/internal/provider/types"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk"
	"github.com/kong/terraform-provider-kong-gateway/internal/validators"
	speakeasy_listvalidators "github.com/kong/terraform-provider-kong-gateway/internal/validators/listvalidators"
	speakeasy_objectvalidators "github.com/kong/terraform-provider-kong-gateway/internal/validators/objectvalidators"
	speakeasy_stringvalidators "github.com/kong/terraform-provider-kong-gateway/internal/validators/stringvalidators"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &PluginAiMcpOauth2Resource{}
var _ resource.ResourceWithImportState = &PluginAiMcpOauth2Resource{}

func NewPluginAiMcpOauth2Resource() resource.Resource {
	return &PluginAiMcpOauth2Resource{}
}

// PluginAiMcpOauth2Resource defines the resource implementation.
type PluginAiMcpOauth2Resource struct {
	// Provider configured SDK client.
	client *sdk.KongGateway
}

// PluginAiMcpOauth2ResourceModel describes the resource data model.
type PluginAiMcpOauth2ResourceModel struct {
	Config       *tfTypes.AiMcpOauth2PluginConfig `tfsdk:"config"`
	CreatedAt    types.Int64                      `tfsdk:"created_at"`
	Enabled      types.Bool                       `tfsdk:"enabled"`
	ID           types.String                     `tfsdk:"id"`
	InstanceName types.String                     `tfsdk:"instance_name"`
	Ordering     *tfTypes.AcePluginOrdering       `tfsdk:"ordering"`
	Partials     []tfTypes.AcePluginPartials      `tfsdk:"partials"`
	Protocols    []types.String                   `tfsdk:"protocols"`
	Route        *tfTypes.Set                     `tfsdk:"route"`
	Service      *tfTypes.Set                     `tfsdk:"service"`
	Tags         []types.String                   `tfsdk:"tags"`
	UpdatedAt    types.Int64                      `tfsdk:"updated_at"`
	Workspace    types.String                     `tfsdk:"workspace"`
}

func (r *PluginAiMcpOauth2Resource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_plugin_ai_mcp_oauth2"
}

func (r *PluginAiMcpOauth2Resource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "PluginAiMcpOauth2 Resource",
		Attributes: map[string]schema.Attribute{
			"config": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"args": schema.MapAttribute{
						Computed:    true,
						Optional:    true,
						ElementType: jsontypes.NormalizedType{},
						Description: `Additional arguments to send in the POST body.`,
						Validators: []validator.Map{
							mapvalidator.ValueStringsAre(validators.IsValidJSON()),
						},
					},
					"authorization_servers": schema.ListAttribute{
						Computed:    true,
						Optional:    true,
						ElementType: types.StringType,
						Description: `Not Null`,
						Validators: []validator.List{
							speakeasy_listvalidators.NotNull(),
						},
					},
					"cache_introspection": schema.BoolAttribute{
						Computed:    true,
						Optional:    true,
						Description: `If enabled, the plugin will cache the introspection response for the access token. This can improve performance by reducing the number of introspection requests to the authorization server.`,
					},
					"claim_to_header": schema.ListNestedAttribute{
						Computed: true,
						Optional: true,
						NestedObject: schema.NestedAttributeObject{
							Validators: []validator.Object{
								speakeasy_objectvalidators.NotNull(),
							},
							Attributes: map[string]schema.Attribute{
								"claim": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The claim name to be used in the access token. Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
								"header": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The HTTP header name to be used for forwarding the claim value to the upstream. Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
							},
						},
					},
					"client_alg": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `The client JWT signing algorithm. must be one of ["ES256", "ES384", "ES512", "EdDSA", "HS256", "HS384", "HS512", "PS256", "PS384", "PS512", "RS256", "RS384", "RS512"]`,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"ES256",
								"ES384",
								"ES512",
								"EdDSA",
								"HS256",
								"HS384",
								"HS512",
								"PS256",
								"PS384",
								"PS512",
								"RS256",
								"RS384",
								"RS512",
							),
						},
					},
					"client_auth": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `The client authentication method. must be one of ["client_secret_basic", "client_secret_jwt", "client_secret_post", "none", "private_key_jwt", "self_signed_tls_client_auth", "tls_client_auth"]`,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"client_secret_basic",
								"client_secret_jwt",
								"client_secret_post",
								"none",
								"private_key_jwt",
								"self_signed_tls_client_auth",
								"tls_client_auth",
							),
						},
					},
					"client_id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `The client ID for authentication. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"client_jwk": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `The client JWK for private_key_jwt authentication.`,
					},
					"client_secret": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `The client secret for authentication.`,
					},
					"headers": schema.MapAttribute{
						Computed:    true,
						Optional:    true,
						ElementType: jsontypes.NormalizedType{},
						Description: `Additional headers for the introspection request.`,
						Validators: []validator.Map{
							mapvalidator.ValueStringsAre(validators.IsValidJSON()),
						},
					},
					"http_proxy": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `HTTP proxy to use.`,
					},
					"http_proxy_authorization": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `HTTP proxy authorization header.`,
					},
					"http_version": schema.Float64Attribute{
						Computed:    true,
						Optional:    true,
						Description: `The HTTP version used for requests.`,
					},
					"https_proxy": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `HTTPS proxy to use.`,
					},
					"https_proxy_authorization": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `HTTPS proxy authorization header.`,
					},
					"insecure_relaxed_audience_validation": schema.BoolAttribute{
						Computed:    true,
						Optional:    true,
						Description: `If enabled, the plugin will not validate the audience of the access token. Disable it if the authorization server does not correctly set the audience claim according to RFC 8707 and MCP specification.`,
					},
					"introspection_endpoint": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `The introspection endpoint URL. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"introspection_format": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Controls introspection response format. must be one of ["base64", "base64url", "string"]`,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"base64",
								"base64url",
								"string",
							),
						},
					},
					"keepalive": schema.BoolAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Enable HTTP keepalive for requests.`,
					},
					"max_request_body_size": schema.Int64Attribute{
						Computed:    true,
						Optional:    true,
						Description: `max allowed body size allowed to be handled as MCP request.`,
					},
					"metadata_endpoint": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `The path for OAuth 2.0 Protected Resource Metadata. Default to $resource/.well-known/oauth-protected-resource. For example, if the configured resource is https://api.example.com/mcp, the metadata endpoint is /mcp/.well-known/oauth-protected-resource.`,
					},
					"mtls_introspection_endpoint": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `The mTLS alias for the introspection endpoint.`,
					},
					"no_proxy": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Comma-separated list of hosts to exclude from proxy.`,
					},
					"resource": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `The resource identifier. Not Null`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
						},
					},
					"scopes_supported": schema.ListAttribute{
						Computed:    true,
						Optional:    true,
						ElementType: types.StringType,
					},
					"ssl_verify": schema.BoolAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Verify the SSL certificate.`,
					},
					"timeout": schema.Float64Attribute{
						Computed:    true,
						Optional:    true,
						Description: `Network I/O timeout in milliseconds.`,
					},
					"tls_client_auth_cert": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `PEM-encoded client certificate for mTLS.`,
					},
					"tls_client_auth_key": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `PEM-encoded private key for mTLS.`,
					},
					"tls_client_auth_ssl_verify": schema.BoolAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Verify server certificate in mTLS.`,
					},
				},
				Description: `The configuration for MCP authorization in OAuth2. If this is enabled, make sure the configured metadata_endpoint is also covered by the same route so the authorization can be applied correctly.`,
			},
			"created_at": schema.Int64Attribute{
				Computed:    true,
				Optional:    true,
				Description: `Unix epoch when the resource was created.`,
			},
			"enabled": schema.BoolAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Whether the plugin is applied.`,
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `A string representing a UUID (universally unique identifier).`,
				Validators: []validator.String{
					stringvalidator.UTF8LengthAtLeast(1),
				},
			},
			"instance_name": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `A unique string representing a UTF-8 encoded name.`,
			},
			"ordering": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"after": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"access": schema.ListAttribute{
								Computed:    true,
								Optional:    true,
								ElementType: types.StringType,
							},
						},
					},
					"before": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"access": schema.ListAttribute{
								Computed:    true,
								Optional:    true,
								ElementType: types.StringType,
							},
						},
					},
				},
			},
			"partials": schema.ListNestedAttribute{
				Computed: true,
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Validators: []validator.Object{
						speakeasy_objectvalidators.NotNull(),
					},
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: `A string representing a UUID (universally unique identifier).`,
							Validators: []validator.String{
								stringvalidator.UTF8LengthAtLeast(1),
							},
						},
						"name": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: `A unique string representing a UTF-8 encoded name.`,
						},
						"path": schema.StringAttribute{
							Computed: true,
							Optional: true,
						},
					},
				},
				Description: `A list of partials to be used by the plugin.`,
			},
			"protocols": schema.SetAttribute{
				Computed:    true,
				Optional:    true,
				ElementType: types.StringType,
				Description: `A set of strings representing HTTP protocols.`,
			},
			"route": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
				},
				Description: `If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.`,
			},
			"service": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
				},
				Description: `If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.`,
			},
			"tags": schema.ListAttribute{
				Computed:    true,
				Optional:    true,
				ElementType: types.StringType,
				Description: `An optional set of strings associated with the Plugin for grouping and filtering.`,
			},
			"updated_at": schema.Int64Attribute{
				Computed:    true,
				Optional:    true,
				Description: `Unix epoch when the resource was last updated.`,
			},
			"workspace": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Default:     stringdefault.StaticString(`default`),
				Description: `The name or UUID of the workspace. Default: "default"`,
			},
		},
	}
}

func (r *PluginAiMcpOauth2Resource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.KongGateway)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.KongGateway, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *PluginAiMcpOauth2Resource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *PluginAiMcpOauth2ResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsCreateAimcpoauth2PluginRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Plugins.CreateAimcpoauth2Plugin(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 201 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.AiMcpOauth2Plugin != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedAiMcpOauth2Plugin(ctx, res.AiMcpOauth2Plugin)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *PluginAiMcpOauth2Resource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *PluginAiMcpOauth2ResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetAimcpoauth2PluginRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Plugins.GetAimcpoauth2Plugin(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.AiMcpOauth2Plugin != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedAiMcpOauth2Plugin(ctx, res.AiMcpOauth2Plugin)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *PluginAiMcpOauth2Resource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *PluginAiMcpOauth2ResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsUpdateAimcpoauth2PluginRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Plugins.UpdateAimcpoauth2Plugin(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.AiMcpOauth2Plugin != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedAiMcpOauth2Plugin(ctx, res.AiMcpOauth2Plugin)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *PluginAiMcpOauth2Resource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *PluginAiMcpOauth2ResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsDeleteAimcpoauth2PluginRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Plugins.DeleteAimcpoauth2Plugin(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 204 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *PluginAiMcpOauth2Resource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	dec := json.NewDecoder(bytes.NewReader([]byte(req.ID)))
	dec.DisallowUnknownFields()
	var data struct {
		ID        string `json:"id"`
		Workspace string `json:"workspace"`
	}

	if err := dec.Decode(&data); err != nil {
		resp.Diagnostics.AddError("Invalid ID", `The import ID is not valid. It is expected to be a JSON object string with the format: '{"id": "3473c251-5b6c-4f45-b1ff-7ede735a366d", "workspace": "747d1e5-8246-4f65-a939-b392f1ee17f8"}': `+err.Error())
		return
	}

	if len(data.ID) == 0 {
		resp.Diagnostics.AddError("Missing required field", `The field id is required but was not found in the json encoded ID. It's expected to be a value alike '"3473c251-5b6c-4f45-b1ff-7ede735a366d"`)
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("id"), data.ID)...)
	if len(data.Workspace) == 0 {
		resp.Diagnostics.AddError("Missing required field", `The field workspace is required but was not found in the json encoded ID. It's expected to be a value alike '"747d1e5-8246-4f65-a939-b392f1ee17f8"`)
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("workspace"), data.Workspace)...)
}
