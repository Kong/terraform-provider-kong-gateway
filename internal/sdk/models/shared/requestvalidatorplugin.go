// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/internal/utils"
)

// In - The location of the parameter.
type In string

const (
	InHeader In = "header"
	InPath   In = "path"
	InQuery  In = "query"
)

func (e In) ToPointer() *In {
	return &e
}
func (e *In) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "header":
		fallthrough
	case "path":
		fallthrough
	case "query":
		*e = In(v)
		return nil
	default:
		return fmt.Errorf("invalid value for In: %v", v)
	}
}

// Style - Required when `schema` and `explode` are set. Describes how the parameter value will be deserialized depending on the type of the parameter value.
type Style string

const (
	StyleDeepObject     Style = "deepObject"
	StyleForm           Style = "form"
	StyleLabel          Style = "label"
	StyleMatrix         Style = "matrix"
	StylePipeDelimited  Style = "pipeDelimited"
	StyleSimple         Style = "simple"
	StyleSpaceDelimited Style = "spaceDelimited"
)

func (e Style) ToPointer() *Style {
	return &e
}
func (e *Style) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deepObject":
		fallthrough
	case "form":
		fallthrough
	case "label":
		fallthrough
	case "matrix":
		fallthrough
	case "pipeDelimited":
		fallthrough
	case "simple":
		fallthrough
	case "spaceDelimited":
		*e = Style(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Style: %v", v)
	}
}

type ParameterSchema struct {
	// Required when `schema` and `style` are set. When `explode` is `true`, parameter values of type `array` or `object` generate separate parameters for each value of the array or key-value pair of the map. For other types of parameters, this property has no effect.
	Explode *bool `json:"explode,omitempty"`
	// The location of the parameter.
	In In `json:"in"`
	// The name of the parameter. Parameter names are case-sensitive, and correspond to the parameter name used by the `in` property. If `in` is `path`, the `name` field MUST correspond to the named capture group from the configured `route`.
	Name string `json:"name"`
	// Determines whether this parameter is mandatory.
	Required bool `json:"required"`
	// Required when `style` and `explode` are set. This is the schema defining the type used for the parameter. It is validated using `draft4` for JSON Schema draft 4 compliant validator. In addition to being a valid JSON Schema, the parameter schema MUST have a top-level `type` property to enable proper deserialization before validating.
	Schema *string `json:"schema,omitempty"`
	// Required when `schema` and `explode` are set. Describes how the parameter value will be deserialized depending on the type of the parameter value.
	Style *Style `json:"style,omitempty"`
}

func (p *ParameterSchema) GetExplode() *bool {
	if p == nil {
		return nil
	}
	return p.Explode
}

func (p *ParameterSchema) GetIn() In {
	if p == nil {
		return In("")
	}
	return p.In
}

func (p *ParameterSchema) GetName() string {
	if p == nil {
		return ""
	}
	return p.Name
}

func (p *ParameterSchema) GetRequired() bool {
	if p == nil {
		return false
	}
	return p.Required
}

func (p *ParameterSchema) GetSchema() *string {
	if p == nil {
		return nil
	}
	return p.Schema
}

func (p *ParameterSchema) GetStyle() *Style {
	if p == nil {
		return nil
	}
	return p.Style
}

// Version - Which validator to use. Supported values are `kong` (default) for using Kong's own schema validator, or `draft4`, `draft7`, `draft201909`, and `draft202012` for using their respective JSON Schema Draft compliant validators.
type Version string

const (
	VersionDraft201909 Version = "draft201909"
	VersionDraft202012 Version = "draft202012"
	VersionDraft4      Version = "draft4"
	VersionDraft6      Version = "draft6"
	VersionDraft7      Version = "draft7"
	VersionKong        Version = "kong"
)

func (e Version) ToPointer() *Version {
	return &e
}
func (e *Version) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "draft201909":
		fallthrough
	case "draft202012":
		fallthrough
	case "draft4":
		fallthrough
	case "draft6":
		fallthrough
	case "draft7":
		fallthrough
	case "kong":
		*e = Version(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Version: %v", v)
	}
}

type RequestValidatorPluginConfig struct {
	// List of allowed content types. The value can be configured with the `charset` parameter. For example, `application/json; charset=UTF-8`.
	AllowedContentTypes []string `json:"allowed_content_types,omitempty"`
	// The request body schema specification. One of `body_schema` or `parameter_schema` must be specified.
	BodySchema *string `json:"body_schema,omitempty"`
	// Determines whether to enable parameters validation of request content-type.
	ContentTypeParameterValidation *bool `json:"content_type_parameter_validation,omitempty"`
	// Array of parameter validator specification. One of `body_schema` or `parameter_schema` must be specified.
	ParameterSchema []ParameterSchema `json:"parameter_schema,omitempty"`
	// If enabled, the plugin returns more verbose and detailed validation errors.
	VerboseResponse *bool `json:"verbose_response,omitempty"`
	// Which validator to use. Supported values are `kong` (default) for using Kong's own schema validator, or `draft4`, `draft7`, `draft201909`, and `draft202012` for using their respective JSON Schema Draft compliant validators.
	Version *Version `json:"version,omitempty"`
}

func (r *RequestValidatorPluginConfig) GetAllowedContentTypes() []string {
	if r == nil {
		return nil
	}
	return r.AllowedContentTypes
}

func (r *RequestValidatorPluginConfig) GetBodySchema() *string {
	if r == nil {
		return nil
	}
	return r.BodySchema
}

func (r *RequestValidatorPluginConfig) GetContentTypeParameterValidation() *bool {
	if r == nil {
		return nil
	}
	return r.ContentTypeParameterValidation
}

func (r *RequestValidatorPluginConfig) GetParameterSchema() []ParameterSchema {
	if r == nil {
		return nil
	}
	return r.ParameterSchema
}

func (r *RequestValidatorPluginConfig) GetVerboseResponse() *bool {
	if r == nil {
		return nil
	}
	return r.VerboseResponse
}

func (r *RequestValidatorPluginConfig) GetVersion() *Version {
	if r == nil {
		return nil
	}
	return r.Version
}

// RequestValidatorPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type RequestValidatorPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (r *RequestValidatorPluginConsumer) GetID() *string {
	if r == nil {
		return nil
	}
	return r.ID
}

type RequestValidatorPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (r *RequestValidatorPluginAfter) GetAccess() []string {
	if r == nil {
		return nil
	}
	return r.Access
}

type RequestValidatorPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (r *RequestValidatorPluginBefore) GetAccess() []string {
	if r == nil {
		return nil
	}
	return r.Access
}

type RequestValidatorPluginOrdering struct {
	After  *RequestValidatorPluginAfter  `json:"after,omitempty"`
	Before *RequestValidatorPluginBefore `json:"before,omitempty"`
}

func (r *RequestValidatorPluginOrdering) GetAfter() *RequestValidatorPluginAfter {
	if r == nil {
		return nil
	}
	return r.After
}

func (r *RequestValidatorPluginOrdering) GetBefore() *RequestValidatorPluginBefore {
	if r == nil {
		return nil
	}
	return r.Before
}

type RequestValidatorPluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

func (r *RequestValidatorPluginPartials) GetID() *string {
	if r == nil {
		return nil
	}
	return r.ID
}

func (r *RequestValidatorPluginPartials) GetName() *string {
	if r == nil {
		return nil
	}
	return r.Name
}

func (r *RequestValidatorPluginPartials) GetPath() *string {
	if r == nil {
		return nil
	}
	return r.Path
}

type RequestValidatorPluginProtocols string

const (
	RequestValidatorPluginProtocolsGrpc  RequestValidatorPluginProtocols = "grpc"
	RequestValidatorPluginProtocolsGrpcs RequestValidatorPluginProtocols = "grpcs"
	RequestValidatorPluginProtocolsHTTP  RequestValidatorPluginProtocols = "http"
	RequestValidatorPluginProtocolsHTTPS RequestValidatorPluginProtocols = "https"
)

func (e RequestValidatorPluginProtocols) ToPointer() *RequestValidatorPluginProtocols {
	return &e
}
func (e *RequestValidatorPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		*e = RequestValidatorPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RequestValidatorPluginProtocols: %v", v)
	}
}

// RequestValidatorPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type RequestValidatorPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (r *RequestValidatorPluginRoute) GetID() *string {
	if r == nil {
		return nil
	}
	return r.ID
}

// RequestValidatorPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type RequestValidatorPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (r *RequestValidatorPluginService) GetID() *string {
	if r == nil {
		return nil
	}
	return r.ID
}

type RequestValidatorPlugin struct {
	Config *RequestValidatorPluginConfig `json:"config,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer *RequestValidatorPluginConsumer `json:"consumer,omitempty"`
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `json:"enabled,omitempty"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string                         `json:"instance_name,omitempty"`
	name         string                          `const:"request-validator" json:"name"`
	Ordering     *RequestValidatorPluginOrdering `json:"ordering,omitempty"`
	// A list of partials to be used by the plugin.
	Partials []RequestValidatorPluginPartials `json:"partials,omitempty"`
	// A set of strings representing HTTP protocols.
	Protocols []RequestValidatorPluginProtocols `json:"protocols,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *RequestValidatorPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *RequestValidatorPluginService `json:"service,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64 `json:"updated_at,omitempty"`
}

func (r RequestValidatorPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RequestValidatorPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, []string{"name"}); err != nil {
		return err
	}
	return nil
}

func (r *RequestValidatorPlugin) GetConfig() *RequestValidatorPluginConfig {
	if r == nil {
		return nil
	}
	return r.Config
}

func (r *RequestValidatorPlugin) GetConsumer() *RequestValidatorPluginConsumer {
	if r == nil {
		return nil
	}
	return r.Consumer
}

func (r *RequestValidatorPlugin) GetCreatedAt() *int64 {
	if r == nil {
		return nil
	}
	return r.CreatedAt
}

func (r *RequestValidatorPlugin) GetEnabled() *bool {
	if r == nil {
		return nil
	}
	return r.Enabled
}

func (r *RequestValidatorPlugin) GetID() *string {
	if r == nil {
		return nil
	}
	return r.ID
}

func (r *RequestValidatorPlugin) GetInstanceName() *string {
	if r == nil {
		return nil
	}
	return r.InstanceName
}

func (r *RequestValidatorPlugin) GetName() string {
	return "request-validator"
}

func (r *RequestValidatorPlugin) GetOrdering() *RequestValidatorPluginOrdering {
	if r == nil {
		return nil
	}
	return r.Ordering
}

func (r *RequestValidatorPlugin) GetPartials() []RequestValidatorPluginPartials {
	if r == nil {
		return nil
	}
	return r.Partials
}

func (r *RequestValidatorPlugin) GetProtocols() []RequestValidatorPluginProtocols {
	if r == nil {
		return nil
	}
	return r.Protocols
}

func (r *RequestValidatorPlugin) GetRoute() *RequestValidatorPluginRoute {
	if r == nil {
		return nil
	}
	return r.Route
}

func (r *RequestValidatorPlugin) GetService() *RequestValidatorPluginService {
	if r == nil {
		return nil
	}
	return r.Service
}

func (r *RequestValidatorPlugin) GetTags() []string {
	if r == nil {
		return nil
	}
	return r.Tags
}

func (r *RequestValidatorPlugin) GetUpdatedAt() *int64 {
	if r == nil {
		return nil
	}
	return r.UpdatedAt
}
