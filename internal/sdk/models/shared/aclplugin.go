// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/internal/utils"
)

type After struct {
	Access []string `json:"access,omitempty"`
}

func (o *After) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type Before struct {
	Access []string `json:"access,omitempty"`
}

func (o *Before) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type Ordering struct {
	After  *After  `json:"after,omitempty"`
	Before *Before `json:"before,omitempty"`
}

func (o *Ordering) GetAfter() *After {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *Ordering) GetBefore() *Before {
	if o == nil {
		return nil
	}
	return o.Before
}

type Partials struct {
	ID   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

func (o *Partials) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Partials) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Partials) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

type Config struct {
	// Arbitrary group names that are allowed to consume the service or route. One of `config.allow` or `config.deny` must be specified.
	Allow []string `json:"allow,omitempty"`
	// If enabled (`true`), the authenticated groups will always be used even when an authenticated consumer already exists. If the authenticated groups don't exist, it will fallback to use the groups associated with the consumer. By default the authenticated groups will only be used when there is no consumer or the consumer is anonymous.
	AlwaysUseAuthenticatedGroups *bool `json:"always_use_authenticated_groups,omitempty"`
	// Arbitrary group names that are not allowed to consume the service or route. One of `config.allow` or `config.deny` must be specified.
	Deny []string `json:"deny,omitempty"`
	// If enabled (`true`), prevents the `X-Consumer-Groups` header from being sent in the request to the upstream service.
	HideGroupsHeader *bool `json:"hide_groups_header,omitempty"`
	// If enabled (`true`), allows the consumer-groups to be used in the `allow|deny` fields
	IncludeConsumerGroups *bool `json:"include_consumer_groups,omitempty"`
}

func (o *Config) GetAllow() []string {
	if o == nil {
		return nil
	}
	return o.Allow
}

func (o *Config) GetAlwaysUseAuthenticatedGroups() *bool {
	if o == nil {
		return nil
	}
	return o.AlwaysUseAuthenticatedGroups
}

func (o *Config) GetDeny() []string {
	if o == nil {
		return nil
	}
	return o.Deny
}

func (o *Config) GetHideGroupsHeader() *bool {
	if o == nil {
		return nil
	}
	return o.HideGroupsHeader
}

func (o *Config) GetIncludeConsumerGroups() *bool {
	if o == nil {
		return nil
	}
	return o.IncludeConsumerGroups
}

type Protocols string

const (
	ProtocolsGrpc  Protocols = "grpc"
	ProtocolsGrpcs Protocols = "grpcs"
	ProtocolsHTTP  Protocols = "http"
	ProtocolsHTTPS Protocols = "https"
)

func (e Protocols) ToPointer() *Protocols {
	return &e
}
func (e *Protocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		*e = Protocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Protocols: %v", v)
	}
}

// Route - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type Route struct {
	ID *string `json:"id,omitempty"`
}

func (o *Route) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// ACLPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type ACLPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *ACLPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// ACLPlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type ACLPlugin struct {
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool      `json:"enabled,omitempty"`
	ID           *string    `json:"id,omitempty"`
	InstanceName *string    `json:"instance_name,omitempty"`
	name         string     `const:"acl" json:"name"`
	Ordering     *Ordering  `json:"ordering,omitempty"`
	Partials     []Partials `json:"partials,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64  `json:"updated_at,omitempty"`
	Config    *Config `json:"config,omitempty"`
	// A set of strings representing HTTP protocols.
	Protocols []Protocols `json:"protocols,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *Route `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *ACLPluginService `json:"service,omitempty"`
}

func (a ACLPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *ACLPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ACLPlugin) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *ACLPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *ACLPlugin) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *ACLPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *ACLPlugin) GetName() string {
	return "acl"
}

func (o *ACLPlugin) GetOrdering() *Ordering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *ACLPlugin) GetPartials() []Partials {
	if o == nil {
		return nil
	}
	return o.Partials
}

func (o *ACLPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *ACLPlugin) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *ACLPlugin) GetConfig() *Config {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *ACLPlugin) GetProtocols() []Protocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *ACLPlugin) GetRoute() *Route {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *ACLPlugin) GetService() *ACLPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
