// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/internal/utils"
)

// Mechanism - The SASL authentication mechanism.  Supported options: `PLAIN` or `SCRAM-SHA-256`.
type Mechanism string

const (
	MechanismPlain       Mechanism = "PLAIN"
	MechanismScramSha256 Mechanism = "SCRAM-SHA-256"
	MechanismScramSha512 Mechanism = "SCRAM-SHA-512"
)

func (e Mechanism) ToPointer() *Mechanism {
	return &e
}
func (e *Mechanism) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PLAIN":
		fallthrough
	case "SCRAM-SHA-256":
		fallthrough
	case "SCRAM-SHA-512":
		*e = Mechanism(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Mechanism: %v", v)
	}
}

// KafkaConsumePluginStrategy - The authentication strategy for the plugin, the only option for the value is `sasl`.
type KafkaConsumePluginStrategy string

const (
	KafkaConsumePluginStrategySasl KafkaConsumePluginStrategy = "sasl"
)

func (e KafkaConsumePluginStrategy) ToPointer() *KafkaConsumePluginStrategy {
	return &e
}
func (e *KafkaConsumePluginStrategy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sasl":
		*e = KafkaConsumePluginStrategy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for KafkaConsumePluginStrategy: %v", v)
	}
}

type Authentication struct {
	// The SASL authentication mechanism.  Supported options: `PLAIN` or `SCRAM-SHA-256`.
	Mechanism *Mechanism `json:"mechanism,omitempty"`
	// Password for SASL authentication.
	Password *string `json:"password,omitempty"`
	// The authentication strategy for the plugin, the only option for the value is `sasl`.
	Strategy *KafkaConsumePluginStrategy `json:"strategy,omitempty"`
	// Enable this to indicate `DelegationToken` authentication
	Tokenauth *bool `json:"tokenauth,omitempty"`
	// Username for SASL authentication.
	User *string `json:"user,omitempty"`
}

func (a *Authentication) GetMechanism() *Mechanism {
	if a == nil {
		return nil
	}
	return a.Mechanism
}

func (a *Authentication) GetPassword() *string {
	if a == nil {
		return nil
	}
	return a.Password
}

func (a *Authentication) GetStrategy() *KafkaConsumePluginStrategy {
	if a == nil {
		return nil
	}
	return a.Strategy
}

func (a *Authentication) GetTokenauth() *bool {
	if a == nil {
		return nil
	}
	return a.Tokenauth
}

func (a *Authentication) GetUser() *string {
	if a == nil {
		return nil
	}
	return a.User
}

// KafkaConsumePluginAutoOffsetReset - The offset to start from when there is no initial offset in the consumer group.
type KafkaConsumePluginAutoOffsetReset string

const (
	KafkaConsumePluginAutoOffsetResetEarliest KafkaConsumePluginAutoOffsetReset = "earliest"
	KafkaConsumePluginAutoOffsetResetLatest   KafkaConsumePluginAutoOffsetReset = "latest"
)

func (e KafkaConsumePluginAutoOffsetReset) ToPointer() *KafkaConsumePluginAutoOffsetReset {
	return &e
}
func (e *KafkaConsumePluginAutoOffsetReset) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "earliest":
		fallthrough
	case "latest":
		*e = KafkaConsumePluginAutoOffsetReset(v)
		return nil
	default:
		return fmt.Errorf("invalid value for KafkaConsumePluginAutoOffsetReset: %v", v)
	}
}

type KafkaConsumePluginBootstrapServers struct {
	// A string representing a host name, such as example.com.
	Host string `json:"host"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port int64 `json:"port"`
}

func (k *KafkaConsumePluginBootstrapServers) GetHost() string {
	if k == nil {
		return ""
	}
	return k.Host
}

func (k *KafkaConsumePluginBootstrapServers) GetPort() int64 {
	if k == nil {
		return 0
	}
	return k.Port
}

// KafkaConsumePluginCommitStrategy - The strategy to use for committing offsets.
type KafkaConsumePluginCommitStrategy string

const (
	KafkaConsumePluginCommitStrategyAuto KafkaConsumePluginCommitStrategy = "auto"
	KafkaConsumePluginCommitStrategyOff  KafkaConsumePluginCommitStrategy = "off"
)

func (e KafkaConsumePluginCommitStrategy) ToPointer() *KafkaConsumePluginCommitStrategy {
	return &e
}
func (e *KafkaConsumePluginCommitStrategy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "auto":
		fallthrough
	case "off":
		*e = KafkaConsumePluginCommitStrategy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for KafkaConsumePluginCommitStrategy: %v", v)
	}
}

// KafkaConsumePluginMessageDeserializer - The deserializer to use for the consumed messages.
type KafkaConsumePluginMessageDeserializer string

const (
	KafkaConsumePluginMessageDeserializerJSON KafkaConsumePluginMessageDeserializer = "json"
	KafkaConsumePluginMessageDeserializerNoop KafkaConsumePluginMessageDeserializer = "noop"
)

func (e KafkaConsumePluginMessageDeserializer) ToPointer() *KafkaConsumePluginMessageDeserializer {
	return &e
}
func (e *KafkaConsumePluginMessageDeserializer) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "noop":
		*e = KafkaConsumePluginMessageDeserializer(v)
		return nil
	default:
		return fmt.Errorf("invalid value for KafkaConsumePluginMessageDeserializer: %v", v)
	}
}

// KafkaConsumePluginMode - The mode of operation for the plugin.
type KafkaConsumePluginMode string

const (
	KafkaConsumePluginModeHTTPGet          KafkaConsumePluginMode = "http-get"
	KafkaConsumePluginModeServerSentEvents KafkaConsumePluginMode = "server-sent-events"
	KafkaConsumePluginModeWebsocket        KafkaConsumePluginMode = "websocket"
)

func (e KafkaConsumePluginMode) ToPointer() *KafkaConsumePluginMode {
	return &e
}
func (e *KafkaConsumePluginMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "http-get":
		fallthrough
	case "server-sent-events":
		fallthrough
	case "websocket":
		*e = KafkaConsumePluginMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for KafkaConsumePluginMode: %v", v)
	}
}

type KafkaConsumePluginBasic struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

func (k *KafkaConsumePluginBasic) GetPassword() string {
	if k == nil {
		return ""
	}
	return k.Password
}

func (k *KafkaConsumePluginBasic) GetUsername() string {
	if k == nil {
		return ""
	}
	return k.Username
}

// KafkaConsumePluginConfigMode - Authentication mode to use with the schema registry.
type KafkaConsumePluginConfigMode string

const (
	KafkaConsumePluginConfigModeBasic  KafkaConsumePluginConfigMode = "basic"
	KafkaConsumePluginConfigModeNone   KafkaConsumePluginConfigMode = "none"
	KafkaConsumePluginConfigModeOauth2 KafkaConsumePluginConfigMode = "oauth2"
)

func (e KafkaConsumePluginConfigMode) ToPointer() *KafkaConsumePluginConfigMode {
	return &e
}
func (e *KafkaConsumePluginConfigMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "basic":
		fallthrough
	case "none":
		fallthrough
	case "oauth2":
		*e = KafkaConsumePluginConfigMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for KafkaConsumePluginConfigMode: %v", v)
	}
}

// KafkaConsumePluginGrantType - The OAuth grant type to be used.
type KafkaConsumePluginGrantType string

const (
	KafkaConsumePluginGrantTypeClientCredentials KafkaConsumePluginGrantType = "client_credentials"
	KafkaConsumePluginGrantTypePassword          KafkaConsumePluginGrantType = "password"
)

func (e KafkaConsumePluginGrantType) ToPointer() *KafkaConsumePluginGrantType {
	return &e
}
func (e *KafkaConsumePluginGrantType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "client_credentials":
		fallthrough
	case "password":
		*e = KafkaConsumePluginGrantType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for KafkaConsumePluginGrantType: %v", v)
	}
}

type KafkaConsumePluginOauth2 struct {
	// List of audiences passed to the IdP when obtaining a new token.
	Audience []string `json:"audience,omitempty"`
	// The client ID for the application registration in the IdP.
	ClientID *string `json:"client_id,omitempty"`
	// The client secret for the application registration in the IdP.
	ClientSecret *string `json:"client_secret,omitempty"`
	// The OAuth grant type to be used.
	GrantType *KafkaConsumePluginGrantType `json:"grant_type,omitempty"`
	// The password to use if `config.oauth.grant_type` is set to `password`.
	Password *string `json:"password,omitempty"`
	// List of scopes to request from the IdP when obtaining a new token.
	Scopes []string `json:"scopes,omitempty"`
	// The token endpoint URI.
	TokenEndpoint string `json:"token_endpoint"`
	// Extra headers to be passed in the token endpoint request.
	TokenHeaders map[string]any `json:"token_headers,omitempty"`
	// Extra post arguments to be passed in the token endpoint request.
	TokenPostArgs map[string]any `json:"token_post_args,omitempty"`
	// The username to use if `config.oauth.grant_type` is set to `password`.
	Username *string `json:"username,omitempty"`
}

func (k *KafkaConsumePluginOauth2) GetAudience() []string {
	if k == nil {
		return nil
	}
	return k.Audience
}

func (k *KafkaConsumePluginOauth2) GetClientID() *string {
	if k == nil {
		return nil
	}
	return k.ClientID
}

func (k *KafkaConsumePluginOauth2) GetClientSecret() *string {
	if k == nil {
		return nil
	}
	return k.ClientSecret
}

func (k *KafkaConsumePluginOauth2) GetGrantType() *KafkaConsumePluginGrantType {
	if k == nil {
		return nil
	}
	return k.GrantType
}

func (k *KafkaConsumePluginOauth2) GetPassword() *string {
	if k == nil {
		return nil
	}
	return k.Password
}

func (k *KafkaConsumePluginOauth2) GetScopes() []string {
	if k == nil {
		return nil
	}
	return k.Scopes
}

func (k *KafkaConsumePluginOauth2) GetTokenEndpoint() string {
	if k == nil {
		return ""
	}
	return k.TokenEndpoint
}

func (k *KafkaConsumePluginOauth2) GetTokenHeaders() map[string]any {
	if k == nil {
		return nil
	}
	return k.TokenHeaders
}

func (k *KafkaConsumePluginOauth2) GetTokenPostArgs() map[string]any {
	if k == nil {
		return nil
	}
	return k.TokenPostArgs
}

func (k *KafkaConsumePluginOauth2) GetUsername() *string {
	if k == nil {
		return nil
	}
	return k.Username
}

// KafkaConsumePluginAuthMethod - The authentication method used in client requests to the IdP. Supported values are: `client_secret_basic` to send `client_id` and `client_secret` in the `Authorization: Basic` header, `client_secret_post` to send `client_id` and `client_secret` as part of the request body, or `client_secret_jwt` to send a JWT signed with the `client_secret` using the client assertion as part of the body.
type KafkaConsumePluginAuthMethod string

const (
	KafkaConsumePluginAuthMethodClientSecretBasic KafkaConsumePluginAuthMethod = "client_secret_basic"
	KafkaConsumePluginAuthMethodClientSecretJwt   KafkaConsumePluginAuthMethod = "client_secret_jwt"
	KafkaConsumePluginAuthMethodClientSecretPost  KafkaConsumePluginAuthMethod = "client_secret_post"
	KafkaConsumePluginAuthMethodNone              KafkaConsumePluginAuthMethod = "none"
)

func (e KafkaConsumePluginAuthMethod) ToPointer() *KafkaConsumePluginAuthMethod {
	return &e
}
func (e *KafkaConsumePluginAuthMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "client_secret_basic":
		fallthrough
	case "client_secret_jwt":
		fallthrough
	case "client_secret_post":
		fallthrough
	case "none":
		*e = KafkaConsumePluginAuthMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for KafkaConsumePluginAuthMethod: %v", v)
	}
}

// KafkaConsumePluginClientSecretJwtAlg - The algorithm to use with JWT when using `client_secret_jwt` authentication.
type KafkaConsumePluginClientSecretJwtAlg string

const (
	KafkaConsumePluginClientSecretJwtAlgHs256 KafkaConsumePluginClientSecretJwtAlg = "HS256"
	KafkaConsumePluginClientSecretJwtAlgHs512 KafkaConsumePluginClientSecretJwtAlg = "HS512"
)

func (e KafkaConsumePluginClientSecretJwtAlg) ToPointer() *KafkaConsumePluginClientSecretJwtAlg {
	return &e
}
func (e *KafkaConsumePluginClientSecretJwtAlg) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HS256":
		fallthrough
	case "HS512":
		*e = KafkaConsumePluginClientSecretJwtAlg(v)
		return nil
	default:
		return fmt.Errorf("invalid value for KafkaConsumePluginClientSecretJwtAlg: %v", v)
	}
}

type KafkaConsumePluginOauth2Client struct {
	// The authentication method used in client requests to the IdP. Supported values are: `client_secret_basic` to send `client_id` and `client_secret` in the `Authorization: Basic` header, `client_secret_post` to send `client_id` and `client_secret` as part of the request body, or `client_secret_jwt` to send a JWT signed with the `client_secret` using the client assertion as part of the body.
	AuthMethod *KafkaConsumePluginAuthMethod `json:"auth_method,omitempty"`
	// The algorithm to use with JWT when using `client_secret_jwt` authentication.
	ClientSecretJwtAlg *KafkaConsumePluginClientSecretJwtAlg `json:"client_secret_jwt_alg,omitempty"`
	// The proxy to use when making HTTP requests to the IdP.
	HTTPProxy *string `json:"http_proxy,omitempty"`
	// The `Proxy-Authorization` header value to be used with `http_proxy`.
	HTTPProxyAuthorization *string `json:"http_proxy_authorization,omitempty"`
	// The HTTP version used for requests made by this plugin. Supported values: `1.1` for HTTP 1.1 and `1.0` for HTTP 1.0.
	HTTPVersion *float64 `json:"http_version,omitempty"`
	// The proxy to use when making HTTPS requests to the IdP.
	HTTPSProxy *string `json:"https_proxy,omitempty"`
	// The `Proxy-Authorization` header value to be used with `https_proxy`.
	HTTPSProxyAuthorization *string `json:"https_proxy_authorization,omitempty"`
	// Whether to use keepalive connections to the IdP.
	KeepAlive *bool `json:"keep_alive,omitempty"`
	// A comma-separated list of hosts that should not be proxied.
	NoProxy *string `json:"no_proxy,omitempty"`
	// Whether to verify the certificate presented by the IdP when using HTTPS.
	SslVerify *bool `json:"ssl_verify,omitempty"`
	// Network I/O timeout for requests to the IdP in milliseconds.
	Timeout *int64 `json:"timeout,omitempty"`
}

func (k *KafkaConsumePluginOauth2Client) GetAuthMethod() *KafkaConsumePluginAuthMethod {
	if k == nil {
		return nil
	}
	return k.AuthMethod
}

func (k *KafkaConsumePluginOauth2Client) GetClientSecretJwtAlg() *KafkaConsumePluginClientSecretJwtAlg {
	if k == nil {
		return nil
	}
	return k.ClientSecretJwtAlg
}

func (k *KafkaConsumePluginOauth2Client) GetHTTPProxy() *string {
	if k == nil {
		return nil
	}
	return k.HTTPProxy
}

func (k *KafkaConsumePluginOauth2Client) GetHTTPProxyAuthorization() *string {
	if k == nil {
		return nil
	}
	return k.HTTPProxyAuthorization
}

func (k *KafkaConsumePluginOauth2Client) GetHTTPVersion() *float64 {
	if k == nil {
		return nil
	}
	return k.HTTPVersion
}

func (k *KafkaConsumePluginOauth2Client) GetHTTPSProxy() *string {
	if k == nil {
		return nil
	}
	return k.HTTPSProxy
}

func (k *KafkaConsumePluginOauth2Client) GetHTTPSProxyAuthorization() *string {
	if k == nil {
		return nil
	}
	return k.HTTPSProxyAuthorization
}

func (k *KafkaConsumePluginOauth2Client) GetKeepAlive() *bool {
	if k == nil {
		return nil
	}
	return k.KeepAlive
}

func (k *KafkaConsumePluginOauth2Client) GetNoProxy() *string {
	if k == nil {
		return nil
	}
	return k.NoProxy
}

func (k *KafkaConsumePluginOauth2Client) GetSslVerify() *bool {
	if k == nil {
		return nil
	}
	return k.SslVerify
}

func (k *KafkaConsumePluginOauth2Client) GetTimeout() *int64 {
	if k == nil {
		return nil
	}
	return k.Timeout
}

type KafkaConsumePluginAuthentication struct {
	Basic *KafkaConsumePluginBasic `json:"basic,omitempty"`
	// Authentication mode to use with the schema registry.
	Mode         *KafkaConsumePluginConfigMode   `json:"mode,omitempty"`
	Oauth2       *KafkaConsumePluginOauth2       `json:"oauth2,omitempty"`
	Oauth2Client *KafkaConsumePluginOauth2Client `json:"oauth2_client,omitempty"`
}

func (k *KafkaConsumePluginAuthentication) GetBasic() *KafkaConsumePluginBasic {
	if k == nil {
		return nil
	}
	return k.Basic
}

func (k *KafkaConsumePluginAuthentication) GetMode() *KafkaConsumePluginConfigMode {
	if k == nil {
		return nil
	}
	return k.Mode
}

func (k *KafkaConsumePluginAuthentication) GetOauth2() *KafkaConsumePluginOauth2 {
	if k == nil {
		return nil
	}
	return k.Oauth2
}

func (k *KafkaConsumePluginAuthentication) GetOauth2Client() *KafkaConsumePluginOauth2Client {
	if k == nil {
		return nil
	}
	return k.Oauth2Client
}

type KafkaConsumePluginConfluent struct {
	Authentication *KafkaConsumePluginAuthentication `json:"authentication,omitempty"`
	// Set to false to disable SSL certificate verification when connecting to the schema registry.
	SslVerify *bool `json:"ssl_verify,omitempty"`
	// The TTL in seconds for the schema registry cache.
	TTL *float64 `json:"ttl,omitempty"`
	// The URL of the schema registry.
	URL *string `json:"url,omitempty"`
}

func (k *KafkaConsumePluginConfluent) GetAuthentication() *KafkaConsumePluginAuthentication {
	if k == nil {
		return nil
	}
	return k.Authentication
}

func (k *KafkaConsumePluginConfluent) GetSslVerify() *bool {
	if k == nil {
		return nil
	}
	return k.SslVerify
}

func (k *KafkaConsumePluginConfluent) GetTTL() *float64 {
	if k == nil {
		return nil
	}
	return k.TTL
}

func (k *KafkaConsumePluginConfluent) GetURL() *string {
	if k == nil {
		return nil
	}
	return k.URL
}

// KafkaConsumePluginSchemaRegistry - The plugin-global schema registry configuration.
type KafkaConsumePluginSchemaRegistry struct {
	Confluent *KafkaConsumePluginConfluent `json:"confluent,omitempty"`
}

func (k *KafkaConsumePluginSchemaRegistry) GetConfluent() *KafkaConsumePluginConfluent {
	if k == nil {
		return nil
	}
	return k.Confluent
}

type KafkaConsumePluginSecurity struct {
	// UUID of certificate entity for mTLS authentication.
	CertificateID *string `json:"certificate_id,omitempty"`
	// Enables TLS.
	Ssl *bool `json:"ssl,omitempty"`
}

func (k *KafkaConsumePluginSecurity) GetCertificateID() *string {
	if k == nil {
		return nil
	}
	return k.CertificateID
}

func (k *KafkaConsumePluginSecurity) GetSsl() *bool {
	if k == nil {
		return nil
	}
	return k.Ssl
}

type KafkaConsumePluginConfigBasic struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

func (k *KafkaConsumePluginConfigBasic) GetPassword() string {
	if k == nil {
		return ""
	}
	return k.Password
}

func (k *KafkaConsumePluginConfigBasic) GetUsername() string {
	if k == nil {
		return ""
	}
	return k.Username
}

// KafkaConsumePluginConfigTopicsMode - Authentication mode to use with the schema registry.
type KafkaConsumePluginConfigTopicsMode string

const (
	KafkaConsumePluginConfigTopicsModeBasic  KafkaConsumePluginConfigTopicsMode = "basic"
	KafkaConsumePluginConfigTopicsModeNone   KafkaConsumePluginConfigTopicsMode = "none"
	KafkaConsumePluginConfigTopicsModeOauth2 KafkaConsumePluginConfigTopicsMode = "oauth2"
)

func (e KafkaConsumePluginConfigTopicsMode) ToPointer() *KafkaConsumePluginConfigTopicsMode {
	return &e
}
func (e *KafkaConsumePluginConfigTopicsMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "basic":
		fallthrough
	case "none":
		fallthrough
	case "oauth2":
		*e = KafkaConsumePluginConfigTopicsMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for KafkaConsumePluginConfigTopicsMode: %v", v)
	}
}

// KafkaConsumePluginConfigGrantType - The OAuth grant type to be used.
type KafkaConsumePluginConfigGrantType string

const (
	KafkaConsumePluginConfigGrantTypeClientCredentials KafkaConsumePluginConfigGrantType = "client_credentials"
	KafkaConsumePluginConfigGrantTypePassword          KafkaConsumePluginConfigGrantType = "password"
)

func (e KafkaConsumePluginConfigGrantType) ToPointer() *KafkaConsumePluginConfigGrantType {
	return &e
}
func (e *KafkaConsumePluginConfigGrantType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "client_credentials":
		fallthrough
	case "password":
		*e = KafkaConsumePluginConfigGrantType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for KafkaConsumePluginConfigGrantType: %v", v)
	}
}

type KafkaConsumePluginConfigOauth2 struct {
	// List of audiences passed to the IdP when obtaining a new token.
	Audience []string `json:"audience,omitempty"`
	// The client ID for the application registration in the IdP.
	ClientID *string `json:"client_id,omitempty"`
	// The client secret for the application registration in the IdP.
	ClientSecret *string `json:"client_secret,omitempty"`
	// The OAuth grant type to be used.
	GrantType *KafkaConsumePluginConfigGrantType `json:"grant_type,omitempty"`
	// The password to use if `config.oauth.grant_type` is set to `password`.
	Password *string `json:"password,omitempty"`
	// List of scopes to request from the IdP when obtaining a new token.
	Scopes []string `json:"scopes,omitempty"`
	// The token endpoint URI.
	TokenEndpoint string `json:"token_endpoint"`
	// Extra headers to be passed in the token endpoint request.
	TokenHeaders map[string]any `json:"token_headers,omitempty"`
	// Extra post arguments to be passed in the token endpoint request.
	TokenPostArgs map[string]any `json:"token_post_args,omitempty"`
	// The username to use if `config.oauth.grant_type` is set to `password`.
	Username *string `json:"username,omitempty"`
}

func (k *KafkaConsumePluginConfigOauth2) GetAudience() []string {
	if k == nil {
		return nil
	}
	return k.Audience
}

func (k *KafkaConsumePluginConfigOauth2) GetClientID() *string {
	if k == nil {
		return nil
	}
	return k.ClientID
}

func (k *KafkaConsumePluginConfigOauth2) GetClientSecret() *string {
	if k == nil {
		return nil
	}
	return k.ClientSecret
}

func (k *KafkaConsumePluginConfigOauth2) GetGrantType() *KafkaConsumePluginConfigGrantType {
	if k == nil {
		return nil
	}
	return k.GrantType
}

func (k *KafkaConsumePluginConfigOauth2) GetPassword() *string {
	if k == nil {
		return nil
	}
	return k.Password
}

func (k *KafkaConsumePluginConfigOauth2) GetScopes() []string {
	if k == nil {
		return nil
	}
	return k.Scopes
}

func (k *KafkaConsumePluginConfigOauth2) GetTokenEndpoint() string {
	if k == nil {
		return ""
	}
	return k.TokenEndpoint
}

func (k *KafkaConsumePluginConfigOauth2) GetTokenHeaders() map[string]any {
	if k == nil {
		return nil
	}
	return k.TokenHeaders
}

func (k *KafkaConsumePluginConfigOauth2) GetTokenPostArgs() map[string]any {
	if k == nil {
		return nil
	}
	return k.TokenPostArgs
}

func (k *KafkaConsumePluginConfigOauth2) GetUsername() *string {
	if k == nil {
		return nil
	}
	return k.Username
}

// KafkaConsumePluginConfigAuthMethod - The authentication method used in client requests to the IdP. Supported values are: `client_secret_basic` to send `client_id` and `client_secret` in the `Authorization: Basic` header, `client_secret_post` to send `client_id` and `client_secret` as part of the request body, or `client_secret_jwt` to send a JWT signed with the `client_secret` using the client assertion as part of the body.
type KafkaConsumePluginConfigAuthMethod string

const (
	KafkaConsumePluginConfigAuthMethodClientSecretBasic KafkaConsumePluginConfigAuthMethod = "client_secret_basic"
	KafkaConsumePluginConfigAuthMethodClientSecretJwt   KafkaConsumePluginConfigAuthMethod = "client_secret_jwt"
	KafkaConsumePluginConfigAuthMethodClientSecretPost  KafkaConsumePluginConfigAuthMethod = "client_secret_post"
	KafkaConsumePluginConfigAuthMethodNone              KafkaConsumePluginConfigAuthMethod = "none"
)

func (e KafkaConsumePluginConfigAuthMethod) ToPointer() *KafkaConsumePluginConfigAuthMethod {
	return &e
}
func (e *KafkaConsumePluginConfigAuthMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "client_secret_basic":
		fallthrough
	case "client_secret_jwt":
		fallthrough
	case "client_secret_post":
		fallthrough
	case "none":
		*e = KafkaConsumePluginConfigAuthMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for KafkaConsumePluginConfigAuthMethod: %v", v)
	}
}

// KafkaConsumePluginConfigClientSecretJwtAlg - The algorithm to use with JWT when using `client_secret_jwt` authentication.
type KafkaConsumePluginConfigClientSecretJwtAlg string

const (
	KafkaConsumePluginConfigClientSecretJwtAlgHs256 KafkaConsumePluginConfigClientSecretJwtAlg = "HS256"
	KafkaConsumePluginConfigClientSecretJwtAlgHs512 KafkaConsumePluginConfigClientSecretJwtAlg = "HS512"
)

func (e KafkaConsumePluginConfigClientSecretJwtAlg) ToPointer() *KafkaConsumePluginConfigClientSecretJwtAlg {
	return &e
}
func (e *KafkaConsumePluginConfigClientSecretJwtAlg) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HS256":
		fallthrough
	case "HS512":
		*e = KafkaConsumePluginConfigClientSecretJwtAlg(v)
		return nil
	default:
		return fmt.Errorf("invalid value for KafkaConsumePluginConfigClientSecretJwtAlg: %v", v)
	}
}

type KafkaConsumePluginConfigOauth2Client struct {
	// The authentication method used in client requests to the IdP. Supported values are: `client_secret_basic` to send `client_id` and `client_secret` in the `Authorization: Basic` header, `client_secret_post` to send `client_id` and `client_secret` as part of the request body, or `client_secret_jwt` to send a JWT signed with the `client_secret` using the client assertion as part of the body.
	AuthMethod *KafkaConsumePluginConfigAuthMethod `json:"auth_method,omitempty"`
	// The algorithm to use with JWT when using `client_secret_jwt` authentication.
	ClientSecretJwtAlg *KafkaConsumePluginConfigClientSecretJwtAlg `json:"client_secret_jwt_alg,omitempty"`
	// The proxy to use when making HTTP requests to the IdP.
	HTTPProxy *string `json:"http_proxy,omitempty"`
	// The `Proxy-Authorization` header value to be used with `http_proxy`.
	HTTPProxyAuthorization *string `json:"http_proxy_authorization,omitempty"`
	// The HTTP version used for requests made by this plugin. Supported values: `1.1` for HTTP 1.1 and `1.0` for HTTP 1.0.
	HTTPVersion *float64 `json:"http_version,omitempty"`
	// The proxy to use when making HTTPS requests to the IdP.
	HTTPSProxy *string `json:"https_proxy,omitempty"`
	// The `Proxy-Authorization` header value to be used with `https_proxy`.
	HTTPSProxyAuthorization *string `json:"https_proxy_authorization,omitempty"`
	// Whether to use keepalive connections to the IdP.
	KeepAlive *bool `json:"keep_alive,omitempty"`
	// A comma-separated list of hosts that should not be proxied.
	NoProxy *string `json:"no_proxy,omitempty"`
	// Whether to verify the certificate presented by the IdP when using HTTPS.
	SslVerify *bool `json:"ssl_verify,omitempty"`
	// Network I/O timeout for requests to the IdP in milliseconds.
	Timeout *int64 `json:"timeout,omitempty"`
}

func (k *KafkaConsumePluginConfigOauth2Client) GetAuthMethod() *KafkaConsumePluginConfigAuthMethod {
	if k == nil {
		return nil
	}
	return k.AuthMethod
}

func (k *KafkaConsumePluginConfigOauth2Client) GetClientSecretJwtAlg() *KafkaConsumePluginConfigClientSecretJwtAlg {
	if k == nil {
		return nil
	}
	return k.ClientSecretJwtAlg
}

func (k *KafkaConsumePluginConfigOauth2Client) GetHTTPProxy() *string {
	if k == nil {
		return nil
	}
	return k.HTTPProxy
}

func (k *KafkaConsumePluginConfigOauth2Client) GetHTTPProxyAuthorization() *string {
	if k == nil {
		return nil
	}
	return k.HTTPProxyAuthorization
}

func (k *KafkaConsumePluginConfigOauth2Client) GetHTTPVersion() *float64 {
	if k == nil {
		return nil
	}
	return k.HTTPVersion
}

func (k *KafkaConsumePluginConfigOauth2Client) GetHTTPSProxy() *string {
	if k == nil {
		return nil
	}
	return k.HTTPSProxy
}

func (k *KafkaConsumePluginConfigOauth2Client) GetHTTPSProxyAuthorization() *string {
	if k == nil {
		return nil
	}
	return k.HTTPSProxyAuthorization
}

func (k *KafkaConsumePluginConfigOauth2Client) GetKeepAlive() *bool {
	if k == nil {
		return nil
	}
	return k.KeepAlive
}

func (k *KafkaConsumePluginConfigOauth2Client) GetNoProxy() *string {
	if k == nil {
		return nil
	}
	return k.NoProxy
}

func (k *KafkaConsumePluginConfigOauth2Client) GetSslVerify() *bool {
	if k == nil {
		return nil
	}
	return k.SslVerify
}

func (k *KafkaConsumePluginConfigOauth2Client) GetTimeout() *int64 {
	if k == nil {
		return nil
	}
	return k.Timeout
}

type KafkaConsumePluginConfigAuthentication struct {
	Basic *KafkaConsumePluginConfigBasic `json:"basic,omitempty"`
	// Authentication mode to use with the schema registry.
	Mode         *KafkaConsumePluginConfigTopicsMode   `json:"mode,omitempty"`
	Oauth2       *KafkaConsumePluginConfigOauth2       `json:"oauth2,omitempty"`
	Oauth2Client *KafkaConsumePluginConfigOauth2Client `json:"oauth2_client,omitempty"`
}

func (k *KafkaConsumePluginConfigAuthentication) GetBasic() *KafkaConsumePluginConfigBasic {
	if k == nil {
		return nil
	}
	return k.Basic
}

func (k *KafkaConsumePluginConfigAuthentication) GetMode() *KafkaConsumePluginConfigTopicsMode {
	if k == nil {
		return nil
	}
	return k.Mode
}

func (k *KafkaConsumePluginConfigAuthentication) GetOauth2() *KafkaConsumePluginConfigOauth2 {
	if k == nil {
		return nil
	}
	return k.Oauth2
}

func (k *KafkaConsumePluginConfigAuthentication) GetOauth2Client() *KafkaConsumePluginConfigOauth2Client {
	if k == nil {
		return nil
	}
	return k.Oauth2Client
}

type KafkaConsumePluginConfigConfluent struct {
	Authentication *KafkaConsumePluginConfigAuthentication `json:"authentication,omitempty"`
	// Set to false to disable SSL certificate verification when connecting to the schema registry.
	SslVerify *bool `json:"ssl_verify,omitempty"`
	// The TTL in seconds for the schema registry cache.
	TTL *float64 `json:"ttl,omitempty"`
	// The URL of the schema registry.
	URL *string `json:"url,omitempty"`
}

func (k *KafkaConsumePluginConfigConfluent) GetAuthentication() *KafkaConsumePluginConfigAuthentication {
	if k == nil {
		return nil
	}
	return k.Authentication
}

func (k *KafkaConsumePluginConfigConfluent) GetSslVerify() *bool {
	if k == nil {
		return nil
	}
	return k.SslVerify
}

func (k *KafkaConsumePluginConfigConfluent) GetTTL() *float64 {
	if k == nil {
		return nil
	}
	return k.TTL
}

func (k *KafkaConsumePluginConfigConfluent) GetURL() *string {
	if k == nil {
		return nil
	}
	return k.URL
}

// KafkaConsumePluginConfigSchemaRegistry - The plugin-global schema registry configuration.
type KafkaConsumePluginConfigSchemaRegistry struct {
	Confluent *KafkaConsumePluginConfigConfluent `json:"confluent,omitempty"`
}

func (k *KafkaConsumePluginConfigSchemaRegistry) GetConfluent() *KafkaConsumePluginConfigConfluent {
	if k == nil {
		return nil
	}
	return k.Confluent
}

type KafkaConsumePluginTopics struct {
	Name string `json:"name"`
	// The plugin-global schema registry configuration.
	SchemaRegistry *KafkaConsumePluginConfigSchemaRegistry `json:"schema_registry,omitempty"`
}

func (k *KafkaConsumePluginTopics) GetName() string {
	if k == nil {
		return ""
	}
	return k.Name
}

func (k *KafkaConsumePluginTopics) GetSchemaRegistry() *KafkaConsumePluginConfigSchemaRegistry {
	if k == nil {
		return nil
	}
	return k.SchemaRegistry
}

type KafkaConsumePluginConfig struct {
	Authentication *Authentication `json:"authentication,omitempty"`
	// The offset to start from when there is no initial offset in the consumer group.
	AutoOffsetReset *KafkaConsumePluginAutoOffsetReset `json:"auto_offset_reset,omitempty"`
	// Set of bootstrap brokers in a `{host: host, port: port}` list format.
	BootstrapServers []KafkaConsumePluginBootstrapServers `json:"bootstrap_servers"`
	// An identifier for the Kafka cluster.
	ClusterName *string `json:"cluster_name,omitempty"`
	// The strategy to use for committing offsets.
	CommitStrategy *KafkaConsumePluginCommitStrategy `json:"commit_strategy,omitempty"`
	// The topic to use for the Dead Letter Queue.
	DlqTopic *string `json:"dlq_topic,omitempty"`
	// Enables Dead Letter Queue. When enabled, if the message doesn't conform to the schema (from Schema Registry) or there's an error in the `message_by_lua_functions`, it will be forwarded to `dlq_topic` that can be processed later.
	EnableDlq *bool `json:"enable_dlq,omitempty"`
	// The Lua functions that manipulates the message being sent to the client.
	MessageByLuaFunctions []string `json:"message_by_lua_functions,omitempty"`
	// The deserializer to use for the consumed messages.
	MessageDeserializer *KafkaConsumePluginMessageDeserializer `json:"message_deserializer,omitempty"`
	// The mode of operation for the plugin.
	Mode *KafkaConsumePluginMode `json:"mode,omitempty"`
	// The plugin-global schema registry configuration.
	SchemaRegistry *KafkaConsumePluginSchemaRegistry `json:"schema_registry,omitempty"`
	Security       *KafkaConsumePluginSecurity       `json:"security,omitempty"`
	// The Kafka topics and their configuration you want to consume from.
	Topics []KafkaConsumePluginTopics `json:"topics"`
}

func (k *KafkaConsumePluginConfig) GetAuthentication() *Authentication {
	if k == nil {
		return nil
	}
	return k.Authentication
}

func (k *KafkaConsumePluginConfig) GetAutoOffsetReset() *KafkaConsumePluginAutoOffsetReset {
	if k == nil {
		return nil
	}
	return k.AutoOffsetReset
}

func (k *KafkaConsumePluginConfig) GetBootstrapServers() []KafkaConsumePluginBootstrapServers {
	if k == nil {
		return []KafkaConsumePluginBootstrapServers{}
	}
	return k.BootstrapServers
}

func (k *KafkaConsumePluginConfig) GetClusterName() *string {
	if k == nil {
		return nil
	}
	return k.ClusterName
}

func (k *KafkaConsumePluginConfig) GetCommitStrategy() *KafkaConsumePluginCommitStrategy {
	if k == nil {
		return nil
	}
	return k.CommitStrategy
}

func (k *KafkaConsumePluginConfig) GetDlqTopic() *string {
	if k == nil {
		return nil
	}
	return k.DlqTopic
}

func (k *KafkaConsumePluginConfig) GetEnableDlq() *bool {
	if k == nil {
		return nil
	}
	return k.EnableDlq
}

func (k *KafkaConsumePluginConfig) GetMessageByLuaFunctions() []string {
	if k == nil {
		return nil
	}
	return k.MessageByLuaFunctions
}

func (k *KafkaConsumePluginConfig) GetMessageDeserializer() *KafkaConsumePluginMessageDeserializer {
	if k == nil {
		return nil
	}
	return k.MessageDeserializer
}

func (k *KafkaConsumePluginConfig) GetMode() *KafkaConsumePluginMode {
	if k == nil {
		return nil
	}
	return k.Mode
}

func (k *KafkaConsumePluginConfig) GetSchemaRegistry() *KafkaConsumePluginSchemaRegistry {
	if k == nil {
		return nil
	}
	return k.SchemaRegistry
}

func (k *KafkaConsumePluginConfig) GetSecurity() *KafkaConsumePluginSecurity {
	if k == nil {
		return nil
	}
	return k.Security
}

func (k *KafkaConsumePluginConfig) GetTopics() []KafkaConsumePluginTopics {
	if k == nil {
		return []KafkaConsumePluginTopics{}
	}
	return k.Topics
}

// KafkaConsumePluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type KafkaConsumePluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (k *KafkaConsumePluginConsumer) GetID() *string {
	if k == nil {
		return nil
	}
	return k.ID
}

type KafkaConsumePluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (k *KafkaConsumePluginAfter) GetAccess() []string {
	if k == nil {
		return nil
	}
	return k.Access
}

type KafkaConsumePluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (k *KafkaConsumePluginBefore) GetAccess() []string {
	if k == nil {
		return nil
	}
	return k.Access
}

type KafkaConsumePluginOrdering struct {
	After  *KafkaConsumePluginAfter  `json:"after,omitempty"`
	Before *KafkaConsumePluginBefore `json:"before,omitempty"`
}

func (k *KafkaConsumePluginOrdering) GetAfter() *KafkaConsumePluginAfter {
	if k == nil {
		return nil
	}
	return k.After
}

func (k *KafkaConsumePluginOrdering) GetBefore() *KafkaConsumePluginBefore {
	if k == nil {
		return nil
	}
	return k.Before
}

type KafkaConsumePluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

func (k *KafkaConsumePluginPartials) GetID() *string {
	if k == nil {
		return nil
	}
	return k.ID
}

func (k *KafkaConsumePluginPartials) GetName() *string {
	if k == nil {
		return nil
	}
	return k.Name
}

func (k *KafkaConsumePluginPartials) GetPath() *string {
	if k == nil {
		return nil
	}
	return k.Path
}

type KafkaConsumePluginProtocols string

const (
	KafkaConsumePluginProtocolsGrpc  KafkaConsumePluginProtocols = "grpc"
	KafkaConsumePluginProtocolsGrpcs KafkaConsumePluginProtocols = "grpcs"
	KafkaConsumePluginProtocolsHTTP  KafkaConsumePluginProtocols = "http"
	KafkaConsumePluginProtocolsHTTPS KafkaConsumePluginProtocols = "https"
	KafkaConsumePluginProtocolsWs    KafkaConsumePluginProtocols = "ws"
	KafkaConsumePluginProtocolsWss   KafkaConsumePluginProtocols = "wss"
)

func (e KafkaConsumePluginProtocols) ToPointer() *KafkaConsumePluginProtocols {
	return &e
}
func (e *KafkaConsumePluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = KafkaConsumePluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for KafkaConsumePluginProtocols: %v", v)
	}
}

// KafkaConsumePluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type KafkaConsumePluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (k *KafkaConsumePluginRoute) GetID() *string {
	if k == nil {
		return nil
	}
	return k.ID
}

type KafkaConsumePlugin struct {
	Config *KafkaConsumePluginConfig `json:"config,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer *KafkaConsumePluginConsumer `json:"consumer,omitempty"`
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `json:"enabled,omitempty"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string                     `json:"instance_name,omitempty"`
	name         string                      `const:"kafka-consume" json:"name"`
	Ordering     *KafkaConsumePluginOrdering `json:"ordering,omitempty"`
	// A list of partials to be used by the plugin.
	Partials []KafkaConsumePluginPartials `json:"partials,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support tcp and tls.
	Protocols []KafkaConsumePluginProtocols `json:"protocols,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *KafkaConsumePluginRoute `json:"route,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64 `json:"updated_at,omitempty"`
}

func (k KafkaConsumePlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(k, "", false)
}

func (k *KafkaConsumePlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &k, "", false, []string{"name"}); err != nil {
		return err
	}
	return nil
}

func (k *KafkaConsumePlugin) GetConfig() *KafkaConsumePluginConfig {
	if k == nil {
		return nil
	}
	return k.Config
}

func (k *KafkaConsumePlugin) GetConsumer() *KafkaConsumePluginConsumer {
	if k == nil {
		return nil
	}
	return k.Consumer
}

func (k *KafkaConsumePlugin) GetCreatedAt() *int64 {
	if k == nil {
		return nil
	}
	return k.CreatedAt
}

func (k *KafkaConsumePlugin) GetEnabled() *bool {
	if k == nil {
		return nil
	}
	return k.Enabled
}

func (k *KafkaConsumePlugin) GetID() *string {
	if k == nil {
		return nil
	}
	return k.ID
}

func (k *KafkaConsumePlugin) GetInstanceName() *string {
	if k == nil {
		return nil
	}
	return k.InstanceName
}

func (k *KafkaConsumePlugin) GetName() string {
	return "kafka-consume"
}

func (k *KafkaConsumePlugin) GetOrdering() *KafkaConsumePluginOrdering {
	if k == nil {
		return nil
	}
	return k.Ordering
}

func (k *KafkaConsumePlugin) GetPartials() []KafkaConsumePluginPartials {
	if k == nil {
		return nil
	}
	return k.Partials
}

func (k *KafkaConsumePlugin) GetProtocols() []KafkaConsumePluginProtocols {
	if k == nil {
		return nil
	}
	return k.Protocols
}

func (k *KafkaConsumePlugin) GetRoute() *KafkaConsumePluginRoute {
	if k == nil {
		return nil
	}
	return k.Route
}

func (k *KafkaConsumePlugin) GetTags() []string {
	if k == nil {
		return nil
	}
	return k.Tags
}

func (k *KafkaConsumePlugin) GetUpdatedAt() *int64 {
	if k == nil {
		return nil
	}
	return k.UpdatedAt
}
