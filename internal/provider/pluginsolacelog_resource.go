// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/mapvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/kong/terraform-provider-kong-gateway/internal/provider/types"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk"
	"github.com/kong/terraform-provider-kong-gateway/internal/validators"
	speakeasy_listvalidators "github.com/kong/terraform-provider-kong-gateway/internal/validators/listvalidators"
	speakeasy_objectvalidators "github.com/kong/terraform-provider-kong-gateway/internal/validators/objectvalidators"
	speakeasy_stringvalidators "github.com/kong/terraform-provider-kong-gateway/internal/validators/stringvalidators"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &PluginSolaceLogResource{}
var _ resource.ResourceWithImportState = &PluginSolaceLogResource{}

func NewPluginSolaceLogResource() resource.Resource {
	return &PluginSolaceLogResource{}
}

// PluginSolaceLogResource defines the resource implementation.
type PluginSolaceLogResource struct {
	// Provider configured SDK client.
	client *sdk.KongGateway
}

// PluginSolaceLogResourceModel describes the resource data model.
type PluginSolaceLogResourceModel struct {
	Config       *tfTypes.SolaceLogPluginConfig `tfsdk:"config"`
	CreatedAt    types.Int64                    `tfsdk:"created_at"`
	Enabled      types.Bool                     `tfsdk:"enabled"`
	ID           types.String                   `tfsdk:"id"`
	InstanceName types.String                   `tfsdk:"instance_name"`
	Ordering     *tfTypes.AcePluginOrdering     `tfsdk:"ordering"`
	Partials     []tfTypes.AcePluginPartials    `tfsdk:"partials"`
	Protocols    []types.String                 `tfsdk:"protocols"`
	Route        *tfTypes.Set                   `tfsdk:"route"`
	Service      *tfTypes.Set                   `tfsdk:"service"`
	Tags         []types.String                 `tfsdk:"tags"`
	UpdatedAt    types.Int64                    `tfsdk:"updated_at"`
	Workspace    types.String                   `tfsdk:"workspace"`
}

func (r *PluginSolaceLogResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_plugin_solace_log"
}

func (r *PluginSolaceLogResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "PluginSolaceLog Resource",
		Attributes: map[string]schema.Attribute{
			"config": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"message": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"ack_timeout": schema.Int64Attribute{
								Computed:    true,
								Optional:    true,
								Description: `When using a non-DIRECT guaranteed delivery mode, this property sets the log message acknowledgement timeout (waiting time).`,
								Validators: []validator.Int64{
									int64validator.Between(1, 100000),
								},
							},
							"custom_fields_by_lua": schema.MapAttribute{
								Computed:    true,
								Optional:    true,
								ElementType: types.StringType,
								Description: `A key-value map that dynamically modifies log fields using Lua code.`,
							},
							"delivery_mode": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Sets the log message delivery mode. must be one of ["DIRECT", "PERSISTENT"]`,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"DIRECT",
										"PERSISTENT",
									),
								},
							},
							"destinations": schema.ListNestedAttribute{
								Computed: true,
								Optional: true,
								NestedObject: schema.NestedAttributeObject{
									Validators: []validator.Object{
										speakeasy_objectvalidators.NotNull(),
									},
									Attributes: map[string]schema.Attribute{
										"name": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `The name of the destination. You can use ` + "`" + `$(uri_captures['<capture-identifier>'])` + "`" + ` in this field to capture the name from a regex request URI (replace ` + "`" + `<capture-identifier>` + "`" + ` with a real value; for example ` + "`" + `$(uri_captures['queue'])` + "`" + ` when the matched route has a path ` + "`" + `~/(?<queue>[a-z]+)` + "`" + `). Not Null`,
											Validators: []validator.String{
												speakeasy_stringvalidators.NotNull(),
											},
										},
										"type": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `The type of the destination. must be one of ["QUEUE", "TOPIC"]`,
											Validators: []validator.String{
												stringvalidator.OneOf(
													"QUEUE",
													"TOPIC",
												),
											},
										},
									},
								},
								Description: `The log message destinations. Not Null`,
								Validators: []validator.List{
									speakeasy_listvalidators.NotNull(),
								},
							},
							"dmq_eligible": schema.BoolAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Sets the dead message queue (DMQ) eligible property on the log message.`,
							},
							"priority": schema.Int64Attribute{
								Computed:    true,
								Optional:    true,
								Description: `Sets the log message priority.`,
								Validators: []validator.Int64{
									int64validator.AtMost(255),
								},
							},
							"sender_id": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Allows the application to set the sender identifier.`,
							},
							"tracing": schema.BoolAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Enable or disable the tracing. This is primarily used for distributed tracing and log message correlation, especially in debugging or tracking log message flows across multiple systems.`,
							},
							"tracing_sampled": schema.BoolAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Indicates whether the log message should be included in distributed tracing (i.e., if it should be "sampled" for the tracing).`,
							},
							"ttl": schema.Int64Attribute{
								Computed:    true,
								Optional:    true,
								Description: `Sets the time to live (TTL) in milliseconds for the log message. Setting the time to live to zero disables the TTL for the log message.`,
							},
						},
						Description: `The log message related configuration. Not Null`,
						Validators: []validator.Object{
							speakeasy_objectvalidators.NotNull(),
						},
					},
					"session": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"authentication": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"access_token": schema.StringAttribute{
										Computed:    true,
										Optional:    true,
										Description: `The OAuth2 access token used with ` + "`" + `OAUTH2` + "`" + ` authentication scheme when connecting to an event broker.`,
									},
									"access_token_header": schema.StringAttribute{
										Computed: true,
										Optional: true,
									},
									"id_token": schema.StringAttribute{
										Computed:    true,
										Optional:    true,
										Description: `The OpenID Connect ID token used with ` + "`" + `OAUTH2` + "`" + ` authentication scheme when connecting to an event broker.`,
									},
									"id_token_header": schema.StringAttribute{
										Computed: true,
										Optional: true,
									},
									"password": schema.StringAttribute{
										Computed:    true,
										Optional:    true,
										Description: `The password used with ` + "`" + `BASIC` + "`" + ` authentication scheme when connecting to an event broker.`,
										Validators: []validator.String{
											stringvalidator.UTF8LengthAtMost(128),
										},
									},
									"scheme": schema.StringAttribute{
										Computed:    true,
										Optional:    true,
										Description: `The client authentication scheme used when connection to an event broker. must be one of ["BASIC", "NONE", "OAUTH2"]`,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"BASIC",
												"NONE",
												"OAUTH2",
											),
										},
									},
									"username": schema.StringAttribute{
										Computed:    true,
										Optional:    true,
										Description: `The username used with ` + "`" + `BASIC` + "`" + ` authentication scheme when connecting to an event broker.`,
										Validators: []validator.String{
											stringvalidator.UTF8LengthAtMost(189),
										},
									},
								},
								Description: `Session authentication related configuration.`,
							},
							"calculate_message_expiry": schema.BoolAttribute{
								Computed:    true,
								Optional:    true,
								Description: `If this property is true and time-to-live has a positive value in a message, the expiration time is calculated when the message is sent or received`,
							},
							"connect_timeout": schema.Int64Attribute{
								Computed:    true,
								Optional:    true,
								Description: `The timeout period (in milliseconds) for a connect operation to a given host (per host).`,
								Validators: []validator.Int64{
									int64validator.Between(100, 100000),
								},
							},
							"generate_rcv_timestamps": schema.BoolAttribute{
								Computed:    true,
								Optional:    true,
								Description: `When enabled, a receive timestamp is recorded for each message.`,
							},
							"generate_send_timestamps": schema.BoolAttribute{
								Computed:    true,
								Optional:    true,
								Description: `When enabled, a send timestamp is automatically included (if not already present) in the Solace-defined fields for each message sent.`,
							},
							"generate_sender_id": schema.BoolAttribute{
								Computed:    true,
								Optional:    true,
								Description: `When enabled, a sender id is automatically included (if not already present) in the Solace-defined fields for each message sent.`,
							},
							"generate_sequence_number": schema.BoolAttribute{
								Computed:    true,
								Optional:    true,
								Description: `When enabled, a sequence number is automatically included (if not already present) in the Solace-defined fields for each message sent.`,
							},
							"host": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `The IPv4 or IPv6 address or host name to connect to (see: https://docs.solace.com/API-Developer-Online-Ref-Documentation/c/index.html#host-entry). Not Null`,
								Validators: []validator.String{
									speakeasy_stringvalidators.NotNull(),
								},
							},
							"properties": schema.MapAttribute{
								Computed:    true,
								Optional:    true,
								ElementType: jsontypes.NormalizedType{},
								Description: `Additional Solace session properties (each setting needs to have ` + "`" + `SESSION_` + "`" + ` prefix).`,
								Validators: []validator.Map{
									mapvalidator.ValueStringsAre(validators.IsValidJSON()),
								},
							},
							"ssl_validate_certificate": schema.BoolAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Indicates whether the API should validate server certificates with the trusted certificates.`,
							},
							"vpn_name": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `The name of the Message VPN to attempt to join when connecting to an event broker.`,
								Validators: []validator.String{
									stringvalidator.UTF8LengthAtMost(32),
								},
							},
						},
						Description: `Session related configuration. Not Null`,
						Validators: []validator.Object{
							speakeasy_objectvalidators.NotNull(),
						},
					},
				},
			},
			"created_at": schema.Int64Attribute{
				Computed:    true,
				Optional:    true,
				Description: `Unix epoch when the resource was created.`,
			},
			"enabled": schema.BoolAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Whether the plugin is applied.`,
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `A string representing a UUID (universally unique identifier).`,
				Validators: []validator.String{
					stringvalidator.UTF8LengthAtLeast(1),
				},
			},
			"instance_name": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `A unique string representing a UTF-8 encoded name.`,
			},
			"ordering": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"after": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"access": schema.ListAttribute{
								Computed:    true,
								Optional:    true,
								ElementType: types.StringType,
							},
						},
					},
					"before": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"access": schema.ListAttribute{
								Computed:    true,
								Optional:    true,
								ElementType: types.StringType,
							},
						},
					},
				},
			},
			"partials": schema.ListNestedAttribute{
				Computed: true,
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Validators: []validator.Object{
						speakeasy_objectvalidators.NotNull(),
					},
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: `A string representing a UUID (universally unique identifier).`,
							Validators: []validator.String{
								stringvalidator.UTF8LengthAtLeast(1),
							},
						},
						"name": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: `A unique string representing a UTF-8 encoded name.`,
						},
						"path": schema.StringAttribute{
							Computed: true,
							Optional: true,
						},
					},
				},
				Description: `A list of partials to be used by the plugin.`,
			},
			"protocols": schema.SetAttribute{
				Computed:    true,
				Optional:    true,
				ElementType: types.StringType,
				Description: `A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support tcp and tls.`,
			},
			"route": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
				},
				Description: `If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.`,
			},
			"service": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
				},
				Description: `If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.`,
			},
			"tags": schema.ListAttribute{
				Computed:    true,
				Optional:    true,
				ElementType: types.StringType,
				Description: `An optional set of strings associated with the Plugin for grouping and filtering.`,
			},
			"updated_at": schema.Int64Attribute{
				Computed:    true,
				Optional:    true,
				Description: `Unix epoch when the resource was last updated.`,
			},
			"workspace": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Default:     stringdefault.StaticString(`default`),
				Description: `The name or UUID of the workspace. Default: "default"`,
			},
		},
	}
}

func (r *PluginSolaceLogResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.KongGateway)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.KongGateway, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *PluginSolaceLogResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *PluginSolaceLogResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsCreateSolacelogPluginRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Plugins.CreateSolacelogPlugin(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 201 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.SolaceLogPlugin != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedSolaceLogPlugin(ctx, res.SolaceLogPlugin)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *PluginSolaceLogResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *PluginSolaceLogResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetSolacelogPluginRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Plugins.GetSolacelogPlugin(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.SolaceLogPlugin != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedSolaceLogPlugin(ctx, res.SolaceLogPlugin)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *PluginSolaceLogResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *PluginSolaceLogResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsUpdateSolacelogPluginRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Plugins.UpdateSolacelogPlugin(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.SolaceLogPlugin != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedSolaceLogPlugin(ctx, res.SolaceLogPlugin)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *PluginSolaceLogResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *PluginSolaceLogResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsDeleteSolacelogPluginRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Plugins.DeleteSolacelogPlugin(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 204 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *PluginSolaceLogResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	dec := json.NewDecoder(bytes.NewReader([]byte(req.ID)))
	dec.DisallowUnknownFields()
	var data struct {
		ID        string `json:"id"`
		Workspace string `json:"workspace"`
	}

	if err := dec.Decode(&data); err != nil {
		resp.Diagnostics.AddError("Invalid ID", `The import ID is not valid. It is expected to be a JSON object string with the format: '{"id": "3473c251-5b6c-4f45-b1ff-7ede735a366d", "workspace": "747d1e5-8246-4f65-a939-b392f1ee17f8"}': `+err.Error())
		return
	}

	if len(data.ID) == 0 {
		resp.Diagnostics.AddError("Missing required field", `The field id is required but was not found in the json encoded ID. It's expected to be a value alike '"3473c251-5b6c-4f45-b1ff-7ede735a366d"`)
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("id"), data.ID)...)
	if len(data.Workspace) == 0 {
		resp.Diagnostics.AddError("Missing required field", `The field workspace is required but was not found in the json encoded ID. It's expected to be a value alike '"747d1e5-8246-4f65-a939-b392f1ee17f8"`)
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("workspace"), data.Workspace)...)
}
