// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/provider"
	"github.com/hashicorp/terraform-plugin-framework/provider/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk"
	"net/http"
)

var _ provider.Provider = &KongGatewayProvider{}

type KongGatewayProvider struct {
	// version is set to the provider version on release, "dev" when the
	// provider is built and ran locally, and "test" when running acceptance
	// testing.
	version string
}

// KongGatewayProviderModel describes the provider data model.
type KongGatewayProviderModel struct {
	ServerURL types.String `tfsdk:"server_url"`
}

func (p *KongGatewayProvider) Metadata(ctx context.Context, req provider.MetadataRequest, resp *provider.MetadataResponse) {
	resp.TypeName = "kong-gateway"
	resp.Version = p.version
}

func (p *KongGatewayProvider) Schema(ctx context.Context, req provider.SchemaRequest, resp *provider.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: `Kong Gateway Admin API: OpenAPI 3.0 spec for Kong Gateway's Admin API.` + "\n" +
			`` + "\n" +
			`You can lean more about Kong Gateway at [docs.konghq.com](https://docs.konghq.com)` + "\n" +
			`.Give Kong a star at [Kong/kong](https://github.com/kong/kong) repository.`,
		Attributes: map[string]schema.Attribute{
			"server_url": schema.StringAttribute{
				MarkdownDescription: "Server URL (defaults to {protocol}://{hostname}:{port}{path})",
				Optional:            true,
				Required:            false,
			},
		},
	}
}

func (p *KongGatewayProvider) Configure(ctx context.Context, req provider.ConfigureRequest, resp *provider.ConfigureResponse) {
	var data KongGatewayProviderModel

	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	ServerURL := data.ServerURL.ValueString()

	if ServerURL == "" {
		ServerURL = "{protocol}://{hostname}:{port}{path}"
	}

	opts := []sdk.SDKOption{
		sdk.WithServerURL(ServerURL),
		sdk.WithClient(http.DefaultClient),
	}
	client := sdk.New(opts...)

	resp.DataSourceData = client
	resp.ResourceData = client
}

func (p *KongGatewayProvider) Resources(ctx context.Context) []func() resource.Resource {
	return []func() resource.Resource{
		NewACLResource,
		NewBasicAuthResource,
		NewCACertificateResource,
		NewCertificateResource,
		NewConsumerResource,
		NewConsumerGroupResource,
		NewHMACAuthResource,
		NewJwtResource,
		NewKeyResource,
		NewKeyAuthResource,
		NewKeySetResource,
		NewPluginACLResource,
		NewPluginAIPromptDecoratorResource,
		NewPluginAIPromptGuardResource,
		NewPluginAIPromptTemplateResource,
		NewPluginAIProxyResource,
		NewPluginAWSLambdaResource,
		NewPluginBasicAuthResource,
		NewPluginCorrelationIDResource,
		NewPluginCORSResource,
		NewPluginFileLogResource,
		NewPluginIPRestrictionResource,
		NewPluginJQResource,
		NewPluginJWTResource,
		NewPluginJWTSignerResource,
		NewPluginKeyAuthResource,
		NewPluginOauth2Resource,
		NewPluginOpenidConnectResource,
		NewPluginOpentelemetryResource,
		NewPluginPreFunctionResource,
		NewPluginPrometheusResource,
		NewPluginProxyCacheResource,
		NewPluginRateLimitingResource,
		NewPluginRateLimitingAdvancedResource,
		NewPluginRequestTerminationResource,
		NewPluginRequestTransformerResource,
		NewPluginRequestTransformerAdvancedResource,
		NewPluginResponseTransformerResource,
		NewPluginResponseTransformerAdvancedResource,
		NewPluginSamlResource,
		NewRouteResource,
		NewServiceResource,
		NewSniResource,
		NewTargetResource,
		NewUpstreamResource,
		NewVaultResource,
	}
}

func (p *KongGatewayProvider) DataSources(ctx context.Context) []func() datasource.DataSource {
	return []func() datasource.DataSource{
		NewACLDataSource,
		NewBasicAuthDataSource,
		NewCACertificateDataSource,
		NewCertificateDataSource,
		NewConsumerDataSource,
		NewConsumerGroupDataSource,
		NewHMACAuthDataSource,
		NewJwtDataSource,
		NewKeyDataSource,
		NewKeyAuthDataSource,
		NewKeySetDataSource,
		NewPluginACLDataSource,
		NewPluginAIPromptDecoratorDataSource,
		NewPluginAIPromptGuardDataSource,
		NewPluginAIPromptTemplateDataSource,
		NewPluginAIProxyDataSource,
		NewPluginAWSLambdaDataSource,
		NewPluginBasicAuthDataSource,
		NewPluginCorrelationIDDataSource,
		NewPluginCORSDataSource,
		NewPluginFileLogDataSource,
		NewPluginIPRestrictionDataSource,
		NewPluginJQDataSource,
		NewPluginJWTDataSource,
		NewPluginJWTSignerDataSource,
		NewPluginKeyAuthDataSource,
		NewPluginOauth2DataSource,
		NewPluginOpenidConnectDataSource,
		NewPluginOpentelemetryDataSource,
		NewPluginPreFunctionDataSource,
		NewPluginPrometheusDataSource,
		NewPluginProxyCacheDataSource,
		NewPluginRateLimitingDataSource,
		NewPluginRateLimitingAdvancedDataSource,
		NewPluginRequestTerminationDataSource,
		NewPluginRequestTransformerDataSource,
		NewPluginRequestTransformerAdvancedDataSource,
		NewPluginResponseTransformerDataSource,
		NewPluginResponseTransformerAdvancedDataSource,
		NewPluginSamlDataSource,
		NewRouteDataSource,
		NewServiceDataSource,
		NewSniDataSource,
		NewTargetDataSource,
		NewUpstreamDataSource,
		NewVaultDataSource,
	}
}

func New(version string) func() provider.Provider {
	return func() provider.Provider {
		return &KongGatewayProvider{
			version: version,
		}
	}
}
