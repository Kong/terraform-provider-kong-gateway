// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/internal/utils"
)

type AiRequestTransformerPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (a *AiRequestTransformerPluginAfter) GetAccess() []string {
	if a == nil {
		return nil
	}
	return a.Access
}

type AiRequestTransformerPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (a *AiRequestTransformerPluginBefore) GetAccess() []string {
	if a == nil {
		return nil
	}
	return a.Access
}

type AiRequestTransformerPluginOrdering struct {
	After  *AiRequestTransformerPluginAfter  `json:"after,omitempty"`
	Before *AiRequestTransformerPluginBefore `json:"before,omitempty"`
}

func (a *AiRequestTransformerPluginOrdering) GetAfter() *AiRequestTransformerPluginAfter {
	if a == nil {
		return nil
	}
	return a.After
}

func (a *AiRequestTransformerPluginOrdering) GetBefore() *AiRequestTransformerPluginBefore {
	if a == nil {
		return nil
	}
	return a.Before
}

type AiRequestTransformerPluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

func (a *AiRequestTransformerPluginPartials) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *AiRequestTransformerPluginPartials) GetName() *string {
	if a == nil {
		return nil
	}
	return a.Name
}

func (a *AiRequestTransformerPluginPartials) GetPath() *string {
	if a == nil {
		return nil
	}
	return a.Path
}

// AiRequestTransformerPluginParamLocation - Specify whether the 'param_name' and 'param_value' options go in a query string, or the POST form/JSON body.
type AiRequestTransformerPluginParamLocation string

const (
	AiRequestTransformerPluginParamLocationBody  AiRequestTransformerPluginParamLocation = "body"
	AiRequestTransformerPluginParamLocationQuery AiRequestTransformerPluginParamLocation = "query"
)

func (e AiRequestTransformerPluginParamLocation) ToPointer() *AiRequestTransformerPluginParamLocation {
	return &e
}
func (e *AiRequestTransformerPluginParamLocation) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "body":
		fallthrough
	case "query":
		*e = AiRequestTransformerPluginParamLocation(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiRequestTransformerPluginParamLocation: %v", v)
	}
}

type AiRequestTransformerPluginAuth struct {
	// If enabled, the authorization header or parameter can be overridden in the request by the value configured in the plugin.
	AllowOverride *bool `json:"allow_override,omitempty"`
	// Set this if you are using an AWS provider (Bedrock) and you are authenticating using static IAM User credentials. Setting this will override the AWS_ACCESS_KEY_ID environment variable for this plugin instance.
	AwsAccessKeyID *string `json:"aws_access_key_id,omitempty"`
	// Set this if you are using an AWS provider (Bedrock) and you are authenticating using static IAM User credentials. Setting this will override the AWS_SECRET_ACCESS_KEY environment variable for this plugin instance.
	AwsSecretAccessKey *string `json:"aws_secret_access_key,omitempty"`
	// If azure_use_managed_identity is set to true, and you need to use a different user-assigned identity for this LLM instance, set the client ID.
	AzureClientID *string `json:"azure_client_id,omitempty"`
	// If azure_use_managed_identity is set to true, and you need to use a different user-assigned identity for this LLM instance, set the client secret.
	AzureClientSecret *string `json:"azure_client_secret,omitempty"`
	// If azure_use_managed_identity is set to true, and you need to use a different user-assigned identity for this LLM instance, set the tenant ID.
	AzureTenantID *string `json:"azure_tenant_id,omitempty"`
	// Set true to use the Azure Cloud Managed Identity (or user-assigned identity) to authenticate with Azure-provider models.
	AzureUseManagedIdentity *bool `json:"azure_use_managed_identity,omitempty"`
	// Set this field to the full JSON of the GCP service account to authenticate, if required. If null (and gcp_use_service_account is true), Kong will attempt to read from environment variable `GCP_SERVICE_ACCOUNT`.
	GcpServiceAccountJSON *string `json:"gcp_service_account_json,omitempty"`
	// Use service account auth for GCP-based providers and models.
	GcpUseServiceAccount *bool `json:"gcp_use_service_account,omitempty"`
	// If AI model requires authentication via Authorization or API key header, specify its name here.
	HeaderName *string `json:"header_name,omitempty"`
	// Specify the full auth header value for 'header_name', for example 'Bearer key' or just 'key'.
	HeaderValue *string `json:"header_value,omitempty"`
	// Specify whether the 'param_name' and 'param_value' options go in a query string, or the POST form/JSON body.
	ParamLocation *AiRequestTransformerPluginParamLocation `json:"param_location,omitempty"`
	// If AI model requires authentication via query parameter, specify its name here.
	ParamName *string `json:"param_name,omitempty"`
	// Specify the full parameter value for 'param_name'.
	ParamValue *string `json:"param_value,omitempty"`
}

func (a *AiRequestTransformerPluginAuth) GetAllowOverride() *bool {
	if a == nil {
		return nil
	}
	return a.AllowOverride
}

func (a *AiRequestTransformerPluginAuth) GetAwsAccessKeyID() *string {
	if a == nil {
		return nil
	}
	return a.AwsAccessKeyID
}

func (a *AiRequestTransformerPluginAuth) GetAwsSecretAccessKey() *string {
	if a == nil {
		return nil
	}
	return a.AwsSecretAccessKey
}

func (a *AiRequestTransformerPluginAuth) GetAzureClientID() *string {
	if a == nil {
		return nil
	}
	return a.AzureClientID
}

func (a *AiRequestTransformerPluginAuth) GetAzureClientSecret() *string {
	if a == nil {
		return nil
	}
	return a.AzureClientSecret
}

func (a *AiRequestTransformerPluginAuth) GetAzureTenantID() *string {
	if a == nil {
		return nil
	}
	return a.AzureTenantID
}

func (a *AiRequestTransformerPluginAuth) GetAzureUseManagedIdentity() *bool {
	if a == nil {
		return nil
	}
	return a.AzureUseManagedIdentity
}

func (a *AiRequestTransformerPluginAuth) GetGcpServiceAccountJSON() *string {
	if a == nil {
		return nil
	}
	return a.GcpServiceAccountJSON
}

func (a *AiRequestTransformerPluginAuth) GetGcpUseServiceAccount() *bool {
	if a == nil {
		return nil
	}
	return a.GcpUseServiceAccount
}

func (a *AiRequestTransformerPluginAuth) GetHeaderName() *string {
	if a == nil {
		return nil
	}
	return a.HeaderName
}

func (a *AiRequestTransformerPluginAuth) GetHeaderValue() *string {
	if a == nil {
		return nil
	}
	return a.HeaderValue
}

func (a *AiRequestTransformerPluginAuth) GetParamLocation() *AiRequestTransformerPluginParamLocation {
	if a == nil {
		return nil
	}
	return a.ParamLocation
}

func (a *AiRequestTransformerPluginAuth) GetParamName() *string {
	if a == nil {
		return nil
	}
	return a.ParamName
}

func (a *AiRequestTransformerPluginAuth) GetParamValue() *string {
	if a == nil {
		return nil
	}
	return a.ParamValue
}

type AiRequestTransformerPluginLogging struct {
	// If enabled, will log the request and response body into the Kong log plugin(s) output.
	LogPayloads *bool `json:"log_payloads,omitempty"`
	// If enabled and supported by the driver, will add model usage and token metrics into the Kong log plugin(s) output.
	LogStatistics *bool `json:"log_statistics,omitempty"`
}

func (a *AiRequestTransformerPluginLogging) GetLogPayloads() *bool {
	if a == nil {
		return nil
	}
	return a.LogPayloads
}

func (a *AiRequestTransformerPluginLogging) GetLogStatistics() *bool {
	if a == nil {
		return nil
	}
	return a.LogStatistics
}

type AiRequestTransformerPluginBedrock struct {
	// If using AWS providers (Bedrock) you can assume a different role after authentication with the current IAM context is successful.
	AwsAssumeRoleArn *string `json:"aws_assume_role_arn,omitempty"`
	// If using AWS providers (Bedrock) you can override the `AWS_REGION` environment variable by setting this option.
	AwsRegion *string `json:"aws_region,omitempty"`
	// If using AWS providers (Bedrock), set the identifier of the assumed role session.
	AwsRoleSessionName *string `json:"aws_role_session_name,omitempty"`
	// If using AWS providers (Bedrock), override the STS endpoint URL when assuming a different role.
	AwsStsEndpointURL *string `json:"aws_sts_endpoint_url,omitempty"`
	// If using AWS providers (Bedrock), set to true to normalize the embeddings.
	EmbeddingsNormalize *bool `json:"embeddings_normalize,omitempty"`
	// Force the client's performance configuration 'latency' for all requests. Leave empty to let the consumer select the performance configuration.
	PerformanceConfigLatency *string `json:"performance_config_latency,omitempty"`
}

func (a *AiRequestTransformerPluginBedrock) GetAwsAssumeRoleArn() *string {
	if a == nil {
		return nil
	}
	return a.AwsAssumeRoleArn
}

func (a *AiRequestTransformerPluginBedrock) GetAwsRegion() *string {
	if a == nil {
		return nil
	}
	return a.AwsRegion
}

func (a *AiRequestTransformerPluginBedrock) GetAwsRoleSessionName() *string {
	if a == nil {
		return nil
	}
	return a.AwsRoleSessionName
}

func (a *AiRequestTransformerPluginBedrock) GetAwsStsEndpointURL() *string {
	if a == nil {
		return nil
	}
	return a.AwsStsEndpointURL
}

func (a *AiRequestTransformerPluginBedrock) GetEmbeddingsNormalize() *bool {
	if a == nil {
		return nil
	}
	return a.EmbeddingsNormalize
}

func (a *AiRequestTransformerPluginBedrock) GetPerformanceConfigLatency() *string {
	if a == nil {
		return nil
	}
	return a.PerformanceConfigLatency
}

// AiRequestTransformerPluginEmbeddingInputType - The purpose of the input text to calculate embedding vectors.
type AiRequestTransformerPluginEmbeddingInputType string

const (
	AiRequestTransformerPluginEmbeddingInputTypeClassification AiRequestTransformerPluginEmbeddingInputType = "classification"
	AiRequestTransformerPluginEmbeddingInputTypeClustering     AiRequestTransformerPluginEmbeddingInputType = "clustering"
	AiRequestTransformerPluginEmbeddingInputTypeImage          AiRequestTransformerPluginEmbeddingInputType = "image"
	AiRequestTransformerPluginEmbeddingInputTypeSearchDocument AiRequestTransformerPluginEmbeddingInputType = "search_document"
	AiRequestTransformerPluginEmbeddingInputTypeSearchQuery    AiRequestTransformerPluginEmbeddingInputType = "search_query"
)

func (e AiRequestTransformerPluginEmbeddingInputType) ToPointer() *AiRequestTransformerPluginEmbeddingInputType {
	return &e
}
func (e *AiRequestTransformerPluginEmbeddingInputType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "classification":
		fallthrough
	case "clustering":
		fallthrough
	case "image":
		fallthrough
	case "search_document":
		fallthrough
	case "search_query":
		*e = AiRequestTransformerPluginEmbeddingInputType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiRequestTransformerPluginEmbeddingInputType: %v", v)
	}
}

type AiRequestTransformerPluginCohere struct {
	// The purpose of the input text to calculate embedding vectors.
	EmbeddingInputType *AiRequestTransformerPluginEmbeddingInputType `json:"embedding_input_type,omitempty"`
	// Wait for the model if it is not ready
	WaitForModel *bool `json:"wait_for_model,omitempty"`
}

func (a *AiRequestTransformerPluginCohere) GetEmbeddingInputType() *AiRequestTransformerPluginEmbeddingInputType {
	if a == nil {
		return nil
	}
	return a.EmbeddingInputType
}

func (a *AiRequestTransformerPluginCohere) GetWaitForModel() *bool {
	if a == nil {
		return nil
	}
	return a.WaitForModel
}

type AiRequestTransformerPluginGemini struct {
	// If running Gemini on Vertex, specify the regional API endpoint (hostname only).
	APIEndpoint *string `json:"api_endpoint,omitempty"`
	// If running Gemini on Vertex Model Garden, specify the endpoint ID.
	EndpointID *string `json:"endpoint_id,omitempty"`
	// If running Gemini on Vertex, specify the location ID.
	LocationID *string `json:"location_id,omitempty"`
	// If running Gemini on Vertex, specify the project ID.
	ProjectID *string `json:"project_id,omitempty"`
}

func (a *AiRequestTransformerPluginGemini) GetAPIEndpoint() *string {
	if a == nil {
		return nil
	}
	return a.APIEndpoint
}

func (a *AiRequestTransformerPluginGemini) GetEndpointID() *string {
	if a == nil {
		return nil
	}
	return a.EndpointID
}

func (a *AiRequestTransformerPluginGemini) GetLocationID() *string {
	if a == nil {
		return nil
	}
	return a.LocationID
}

func (a *AiRequestTransformerPluginGemini) GetProjectID() *string {
	if a == nil {
		return nil
	}
	return a.ProjectID
}

type AiRequestTransformerPluginHuggingface struct {
	// Use the cache layer on the inference API
	UseCache *bool `json:"use_cache,omitempty"`
	// Wait for the model if it is not ready
	WaitForModel *bool `json:"wait_for_model,omitempty"`
}

func (a *AiRequestTransformerPluginHuggingface) GetUseCache() *bool {
	if a == nil {
		return nil
	}
	return a.UseCache
}

func (a *AiRequestTransformerPluginHuggingface) GetWaitForModel() *bool {
	if a == nil {
		return nil
	}
	return a.WaitForModel
}

// AiRequestTransformerPluginLlama2Format - If using llama2 provider, select the upstream message format.
type AiRequestTransformerPluginLlama2Format string

const (
	AiRequestTransformerPluginLlama2FormatOllama AiRequestTransformerPluginLlama2Format = "ollama"
	AiRequestTransformerPluginLlama2FormatOpenai AiRequestTransformerPluginLlama2Format = "openai"
	AiRequestTransformerPluginLlama2FormatRaw    AiRequestTransformerPluginLlama2Format = "raw"
)

func (e AiRequestTransformerPluginLlama2Format) ToPointer() *AiRequestTransformerPluginLlama2Format {
	return &e
}
func (e *AiRequestTransformerPluginLlama2Format) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ollama":
		fallthrough
	case "openai":
		fallthrough
	case "raw":
		*e = AiRequestTransformerPluginLlama2Format(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiRequestTransformerPluginLlama2Format: %v", v)
	}
}

// AiRequestTransformerPluginMistralFormat - If using mistral provider, select the upstream message format.
type AiRequestTransformerPluginMistralFormat string

const (
	AiRequestTransformerPluginMistralFormatOllama AiRequestTransformerPluginMistralFormat = "ollama"
	AiRequestTransformerPluginMistralFormatOpenai AiRequestTransformerPluginMistralFormat = "openai"
)

func (e AiRequestTransformerPluginMistralFormat) ToPointer() *AiRequestTransformerPluginMistralFormat {
	return &e
}
func (e *AiRequestTransformerPluginMistralFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ollama":
		fallthrough
	case "openai":
		*e = AiRequestTransformerPluginMistralFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiRequestTransformerPluginMistralFormat: %v", v)
	}
}

// AiRequestTransformerPluginOptions - Key/value settings for the model
type AiRequestTransformerPluginOptions struct {
	// Defines the schema/API version, if using Anthropic provider.
	AnthropicVersion *string `json:"anthropic_version,omitempty"`
	// 'api-version' for Azure OpenAI instances.
	AzureAPIVersion *string `json:"azure_api_version,omitempty"`
	// Deployment ID for Azure OpenAI instances.
	AzureDeploymentID *string `json:"azure_deployment_id,omitempty"`
	// Instance name for Azure OpenAI hosted models.
	AzureInstance *string                            `json:"azure_instance,omitempty"`
	Bedrock       *AiRequestTransformerPluginBedrock `json:"bedrock,omitempty"`
	Cohere        *AiRequestTransformerPluginCohere  `json:"cohere,omitempty"`
	// If using embeddings models, set the number of dimensions to generate.
	EmbeddingsDimensions *int64                                 `json:"embeddings_dimensions,omitempty"`
	Gemini               *AiRequestTransformerPluginGemini      `json:"gemini,omitempty"`
	Huggingface          *AiRequestTransformerPluginHuggingface `json:"huggingface,omitempty"`
	// Defines the cost per 1M tokens in your prompt.
	InputCost *float64 `json:"input_cost,omitempty"`
	// If using llama2 provider, select the upstream message format.
	Llama2Format *AiRequestTransformerPluginLlama2Format `json:"llama2_format,omitempty"`
	// Defines the max_tokens, if using chat or completion models.
	MaxTokens *int64 `json:"max_tokens,omitempty"`
	// If using mistral provider, select the upstream message format.
	MistralFormat *AiRequestTransformerPluginMistralFormat `json:"mistral_format,omitempty"`
	// Defines the cost per 1M tokens in the output of the AI.
	OutputCost *float64 `json:"output_cost,omitempty"`
	// Defines the matching temperature, if using chat or completion models.
	Temperature *float64 `json:"temperature,omitempty"`
	// Defines the top-k most likely tokens, if supported.
	TopK *int64 `json:"top_k,omitempty"`
	// Defines the top-p probability mass, if supported.
	TopP *float64 `json:"top_p,omitempty"`
	// Manually specify or override the AI operation path, used when e.g. using the 'preserve' route_type.
	UpstreamPath *string `json:"upstream_path,omitempty"`
	// Manually specify or override the full URL to the AI operation endpoints, when calling (self-)hosted models, or for running via a private endpoint.
	UpstreamURL *string `json:"upstream_url,omitempty"`
}

func (a *AiRequestTransformerPluginOptions) GetAnthropicVersion() *string {
	if a == nil {
		return nil
	}
	return a.AnthropicVersion
}

func (a *AiRequestTransformerPluginOptions) GetAzureAPIVersion() *string {
	if a == nil {
		return nil
	}
	return a.AzureAPIVersion
}

func (a *AiRequestTransformerPluginOptions) GetAzureDeploymentID() *string {
	if a == nil {
		return nil
	}
	return a.AzureDeploymentID
}

func (a *AiRequestTransformerPluginOptions) GetAzureInstance() *string {
	if a == nil {
		return nil
	}
	return a.AzureInstance
}

func (a *AiRequestTransformerPluginOptions) GetBedrock() *AiRequestTransformerPluginBedrock {
	if a == nil {
		return nil
	}
	return a.Bedrock
}

func (a *AiRequestTransformerPluginOptions) GetCohere() *AiRequestTransformerPluginCohere {
	if a == nil {
		return nil
	}
	return a.Cohere
}

func (a *AiRequestTransformerPluginOptions) GetEmbeddingsDimensions() *int64 {
	if a == nil {
		return nil
	}
	return a.EmbeddingsDimensions
}

func (a *AiRequestTransformerPluginOptions) GetGemini() *AiRequestTransformerPluginGemini {
	if a == nil {
		return nil
	}
	return a.Gemini
}

func (a *AiRequestTransformerPluginOptions) GetHuggingface() *AiRequestTransformerPluginHuggingface {
	if a == nil {
		return nil
	}
	return a.Huggingface
}

func (a *AiRequestTransformerPluginOptions) GetInputCost() *float64 {
	if a == nil {
		return nil
	}
	return a.InputCost
}

func (a *AiRequestTransformerPluginOptions) GetLlama2Format() *AiRequestTransformerPluginLlama2Format {
	if a == nil {
		return nil
	}
	return a.Llama2Format
}

func (a *AiRequestTransformerPluginOptions) GetMaxTokens() *int64 {
	if a == nil {
		return nil
	}
	return a.MaxTokens
}

func (a *AiRequestTransformerPluginOptions) GetMistralFormat() *AiRequestTransformerPluginMistralFormat {
	if a == nil {
		return nil
	}
	return a.MistralFormat
}

func (a *AiRequestTransformerPluginOptions) GetOutputCost() *float64 {
	if a == nil {
		return nil
	}
	return a.OutputCost
}

func (a *AiRequestTransformerPluginOptions) GetTemperature() *float64 {
	if a == nil {
		return nil
	}
	return a.Temperature
}

func (a *AiRequestTransformerPluginOptions) GetTopK() *int64 {
	if a == nil {
		return nil
	}
	return a.TopK
}

func (a *AiRequestTransformerPluginOptions) GetTopP() *float64 {
	if a == nil {
		return nil
	}
	return a.TopP
}

func (a *AiRequestTransformerPluginOptions) GetUpstreamPath() *string {
	if a == nil {
		return nil
	}
	return a.UpstreamPath
}

func (a *AiRequestTransformerPluginOptions) GetUpstreamURL() *string {
	if a == nil {
		return nil
	}
	return a.UpstreamURL
}

// AiRequestTransformerPluginProvider - AI provider request format - Kong translates requests to and from the specified backend compatible formats.
type AiRequestTransformerPluginProvider string

const (
	AiRequestTransformerPluginProviderAnthropic   AiRequestTransformerPluginProvider = "anthropic"
	AiRequestTransformerPluginProviderAzure       AiRequestTransformerPluginProvider = "azure"
	AiRequestTransformerPluginProviderBedrock     AiRequestTransformerPluginProvider = "bedrock"
	AiRequestTransformerPluginProviderCohere      AiRequestTransformerPluginProvider = "cohere"
	AiRequestTransformerPluginProviderGemini      AiRequestTransformerPluginProvider = "gemini"
	AiRequestTransformerPluginProviderHuggingface AiRequestTransformerPluginProvider = "huggingface"
	AiRequestTransformerPluginProviderLlama2      AiRequestTransformerPluginProvider = "llama2"
	AiRequestTransformerPluginProviderMistral     AiRequestTransformerPluginProvider = "mistral"
	AiRequestTransformerPluginProviderOpenai      AiRequestTransformerPluginProvider = "openai"
)

func (e AiRequestTransformerPluginProvider) ToPointer() *AiRequestTransformerPluginProvider {
	return &e
}
func (e *AiRequestTransformerPluginProvider) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "anthropic":
		fallthrough
	case "azure":
		fallthrough
	case "bedrock":
		fallthrough
	case "cohere":
		fallthrough
	case "gemini":
		fallthrough
	case "huggingface":
		fallthrough
	case "llama2":
		fallthrough
	case "mistral":
		fallthrough
	case "openai":
		*e = AiRequestTransformerPluginProvider(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiRequestTransformerPluginProvider: %v", v)
	}
}

type AiRequestTransformerPluginModel struct {
	// Model name to execute.
	Name *string `json:"name,omitempty"`
	// Key/value settings for the model
	Options *AiRequestTransformerPluginOptions `json:"options,omitempty"`
	// AI provider request format - Kong translates requests to and from the specified backend compatible formats.
	Provider AiRequestTransformerPluginProvider `json:"provider"`
}

func (a *AiRequestTransformerPluginModel) GetName() *string {
	if a == nil {
		return nil
	}
	return a.Name
}

func (a *AiRequestTransformerPluginModel) GetOptions() *AiRequestTransformerPluginOptions {
	if a == nil {
		return nil
	}
	return a.Options
}

func (a *AiRequestTransformerPluginModel) GetProvider() AiRequestTransformerPluginProvider {
	if a == nil {
		return AiRequestTransformerPluginProvider("")
	}
	return a.Provider
}

// AiRequestTransformerPluginRouteType - The model's operation implementation, for this provider.
type AiRequestTransformerPluginRouteType string

const (
	AiRequestTransformerPluginRouteTypeAudioV1AudioSpeech         AiRequestTransformerPluginRouteType = "audio/v1/audio/speech"
	AiRequestTransformerPluginRouteTypeAudioV1AudioTranscriptions AiRequestTransformerPluginRouteType = "audio/v1/audio/transcriptions"
	AiRequestTransformerPluginRouteTypeAudioV1AudioTranslations   AiRequestTransformerPluginRouteType = "audio/v1/audio/translations"
	AiRequestTransformerPluginRouteTypeImageV1ImagesEdits         AiRequestTransformerPluginRouteType = "image/v1/images/edits"
	AiRequestTransformerPluginRouteTypeImageV1ImagesGenerations   AiRequestTransformerPluginRouteType = "image/v1/images/generations"
	AiRequestTransformerPluginRouteTypeLlmV1Assistants            AiRequestTransformerPluginRouteType = "llm/v1/assistants"
	AiRequestTransformerPluginRouteTypeLlmV1Batches               AiRequestTransformerPluginRouteType = "llm/v1/batches"
	AiRequestTransformerPluginRouteTypeLlmV1Chat                  AiRequestTransformerPluginRouteType = "llm/v1/chat"
	AiRequestTransformerPluginRouteTypeLlmV1Completions           AiRequestTransformerPluginRouteType = "llm/v1/completions"
	AiRequestTransformerPluginRouteTypeLlmV1Embeddings            AiRequestTransformerPluginRouteType = "llm/v1/embeddings"
	AiRequestTransformerPluginRouteTypeLlmV1Files                 AiRequestTransformerPluginRouteType = "llm/v1/files"
	AiRequestTransformerPluginRouteTypeLlmV1Responses             AiRequestTransformerPluginRouteType = "llm/v1/responses"
	AiRequestTransformerPluginRouteTypePreserve                   AiRequestTransformerPluginRouteType = "preserve"
	AiRequestTransformerPluginRouteTypeRealtimeV1Realtime         AiRequestTransformerPluginRouteType = "realtime/v1/realtime"
)

func (e AiRequestTransformerPluginRouteType) ToPointer() *AiRequestTransformerPluginRouteType {
	return &e
}
func (e *AiRequestTransformerPluginRouteType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "audio/v1/audio/speech":
		fallthrough
	case "audio/v1/audio/transcriptions":
		fallthrough
	case "audio/v1/audio/translations":
		fallthrough
	case "image/v1/images/edits":
		fallthrough
	case "image/v1/images/generations":
		fallthrough
	case "llm/v1/assistants":
		fallthrough
	case "llm/v1/batches":
		fallthrough
	case "llm/v1/chat":
		fallthrough
	case "llm/v1/completions":
		fallthrough
	case "llm/v1/embeddings":
		fallthrough
	case "llm/v1/files":
		fallthrough
	case "llm/v1/responses":
		fallthrough
	case "preserve":
		fallthrough
	case "realtime/v1/realtime":
		*e = AiRequestTransformerPluginRouteType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiRequestTransformerPluginRouteType: %v", v)
	}
}

type AiRequestTransformerPluginLlm struct {
	Auth    *AiRequestTransformerPluginAuth    `json:"auth,omitempty"`
	Logging *AiRequestTransformerPluginLogging `json:"logging,omitempty"`
	Model   AiRequestTransformerPluginModel    `json:"model"`
	// The model's operation implementation, for this provider.
	RouteType AiRequestTransformerPluginRouteType `json:"route_type"`
}

func (a *AiRequestTransformerPluginLlm) GetAuth() *AiRequestTransformerPluginAuth {
	if a == nil {
		return nil
	}
	return a.Auth
}

func (a *AiRequestTransformerPluginLlm) GetLogging() *AiRequestTransformerPluginLogging {
	if a == nil {
		return nil
	}
	return a.Logging
}

func (a *AiRequestTransformerPluginLlm) GetModel() AiRequestTransformerPluginModel {
	if a == nil {
		return AiRequestTransformerPluginModel{}
	}
	return a.Model
}

func (a *AiRequestTransformerPluginLlm) GetRouteType() AiRequestTransformerPluginRouteType {
	if a == nil {
		return AiRequestTransformerPluginRouteType("")
	}
	return a.RouteType
}

type AiRequestTransformerPluginConfig struct {
	// A string representing a host name, such as example.com.
	HTTPProxyHost *string `json:"http_proxy_host,omitempty"`
	// An integer representing a port number between 0 and 65535, inclusive.
	HTTPProxyPort *int64 `json:"http_proxy_port,omitempty"`
	// Timeout in milliseconds for the AI upstream service.
	HTTPTimeout *int64 `json:"http_timeout,omitempty"`
	// A string representing a host name, such as example.com.
	HTTPSProxyHost *string `json:"https_proxy_host,omitempty"`
	// An integer representing a port number between 0 and 65535, inclusive.
	HTTPSProxyPort *int64 `json:"https_proxy_port,omitempty"`
	// Verify the TLS certificate of the AI upstream service.
	HTTPSVerify *bool                         `json:"https_verify,omitempty"`
	Llm         AiRequestTransformerPluginLlm `json:"llm"`
	// max allowed body size allowed to be introspected. 0 means unlimited, but the size of this body will still be limited by Nginx's client_max_body_size.
	MaxRequestBodySize *int64 `json:"max_request_body_size,omitempty"`
	// Use this prompt to tune the LLM system/assistant message for the incoming proxy request (from the client), and what you are expecting in return.
	Prompt string `json:"prompt"`
	// Defines the regular expression that must match to indicate a successful AI transformation at the request phase. The first match will be set as the outgoing body. If the AI service's response doesn't match this pattern, it is marked as a failure.
	TransformationExtractPattern *string `json:"transformation_extract_pattern,omitempty"`
}

func (a *AiRequestTransformerPluginConfig) GetHTTPProxyHost() *string {
	if a == nil {
		return nil
	}
	return a.HTTPProxyHost
}

func (a *AiRequestTransformerPluginConfig) GetHTTPProxyPort() *int64 {
	if a == nil {
		return nil
	}
	return a.HTTPProxyPort
}

func (a *AiRequestTransformerPluginConfig) GetHTTPTimeout() *int64 {
	if a == nil {
		return nil
	}
	return a.HTTPTimeout
}

func (a *AiRequestTransformerPluginConfig) GetHTTPSProxyHost() *string {
	if a == nil {
		return nil
	}
	return a.HTTPSProxyHost
}

func (a *AiRequestTransformerPluginConfig) GetHTTPSProxyPort() *int64 {
	if a == nil {
		return nil
	}
	return a.HTTPSProxyPort
}

func (a *AiRequestTransformerPluginConfig) GetHTTPSVerify() *bool {
	if a == nil {
		return nil
	}
	return a.HTTPSVerify
}

func (a *AiRequestTransformerPluginConfig) GetLlm() AiRequestTransformerPluginLlm {
	if a == nil {
		return AiRequestTransformerPluginLlm{}
	}
	return a.Llm
}

func (a *AiRequestTransformerPluginConfig) GetMaxRequestBodySize() *int64 {
	if a == nil {
		return nil
	}
	return a.MaxRequestBodySize
}

func (a *AiRequestTransformerPluginConfig) GetPrompt() string {
	if a == nil {
		return ""
	}
	return a.Prompt
}

func (a *AiRequestTransformerPluginConfig) GetTransformationExtractPattern() *string {
	if a == nil {
		return nil
	}
	return a.TransformationExtractPattern
}

// AiRequestTransformerPluginConsumerGroup - If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups
type AiRequestTransformerPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (a *AiRequestTransformerPluginConsumerGroup) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

type AiRequestTransformerPluginProtocols string

const (
	AiRequestTransformerPluginProtocolsGrpc  AiRequestTransformerPluginProtocols = "grpc"
	AiRequestTransformerPluginProtocolsGrpcs AiRequestTransformerPluginProtocols = "grpcs"
	AiRequestTransformerPluginProtocolsHTTP  AiRequestTransformerPluginProtocols = "http"
	AiRequestTransformerPluginProtocolsHTTPS AiRequestTransformerPluginProtocols = "https"
)

func (e AiRequestTransformerPluginProtocols) ToPointer() *AiRequestTransformerPluginProtocols {
	return &e
}
func (e *AiRequestTransformerPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		*e = AiRequestTransformerPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiRequestTransformerPluginProtocols: %v", v)
	}
}

// AiRequestTransformerPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type AiRequestTransformerPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (a *AiRequestTransformerPluginRoute) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

// AiRequestTransformerPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type AiRequestTransformerPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (a *AiRequestTransformerPluginService) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

// AiRequestTransformerPlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type AiRequestTransformerPlugin struct {
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `json:"enabled,omitempty"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string                             `json:"instance_name,omitempty"`
	name         string                              `const:"ai-request-transformer" json:"name"`
	Ordering     *AiRequestTransformerPluginOrdering `json:"ordering,omitempty"`
	// A list of partials to be used by the plugin.
	Partials []AiRequestTransformerPluginPartials `json:"partials,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64                           `json:"updated_at,omitempty"`
	Config    AiRequestTransformerPluginConfig `json:"config"`
	// If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups
	ConsumerGroup *AiRequestTransformerPluginConsumerGroup `json:"consumer_group,omitempty"`
	// A set of strings representing HTTP protocols.
	Protocols []AiRequestTransformerPluginProtocols `json:"protocols,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *AiRequestTransformerPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *AiRequestTransformerPluginService `json:"service,omitempty"`
}

func (a AiRequestTransformerPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AiRequestTransformerPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"name", "config"}); err != nil {
		return err
	}
	return nil
}

func (a *AiRequestTransformerPlugin) GetCreatedAt() *int64 {
	if a == nil {
		return nil
	}
	return a.CreatedAt
}

func (a *AiRequestTransformerPlugin) GetEnabled() *bool {
	if a == nil {
		return nil
	}
	return a.Enabled
}

func (a *AiRequestTransformerPlugin) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *AiRequestTransformerPlugin) GetInstanceName() *string {
	if a == nil {
		return nil
	}
	return a.InstanceName
}

func (a *AiRequestTransformerPlugin) GetName() string {
	return "ai-request-transformer"
}

func (a *AiRequestTransformerPlugin) GetOrdering() *AiRequestTransformerPluginOrdering {
	if a == nil {
		return nil
	}
	return a.Ordering
}

func (a *AiRequestTransformerPlugin) GetPartials() []AiRequestTransformerPluginPartials {
	if a == nil {
		return nil
	}
	return a.Partials
}

func (a *AiRequestTransformerPlugin) GetTags() []string {
	if a == nil {
		return nil
	}
	return a.Tags
}

func (a *AiRequestTransformerPlugin) GetUpdatedAt() *int64 {
	if a == nil {
		return nil
	}
	return a.UpdatedAt
}

func (a *AiRequestTransformerPlugin) GetConfig() AiRequestTransformerPluginConfig {
	if a == nil {
		return AiRequestTransformerPluginConfig{}
	}
	return a.Config
}

func (a *AiRequestTransformerPlugin) GetConsumerGroup() *AiRequestTransformerPluginConsumerGroup {
	if a == nil {
		return nil
	}
	return a.ConsumerGroup
}

func (a *AiRequestTransformerPlugin) GetProtocols() []AiRequestTransformerPluginProtocols {
	if a == nil {
		return nil
	}
	return a.Protocols
}

func (a *AiRequestTransformerPlugin) GetRoute() *AiRequestTransformerPluginRoute {
	if a == nil {
		return nil
	}
	return a.Route
}

func (a *AiRequestTransformerPlugin) GetService() *AiRequestTransformerPluginService {
	if a == nil {
		return nil
	}
	return a.Service
}
