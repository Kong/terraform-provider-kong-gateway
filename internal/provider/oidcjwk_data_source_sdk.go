// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-kong-gateway/internal/provider/types"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/models/shared"
)

func (r *OidcJwkDataSourceModel) ToOperationsGetOicJwkRequest(ctx context.Context) (*operations.GetOicJwkRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var oidcJwkID string
	oidcJwkID = r.ID.ValueString()

	out := operations.GetOicJwkRequest{
		OidcJwkID: oidcJwkID,
	}

	return &out, diags
}

func (r *OidcJwkDataSourceModel) RefreshFromSharedOidcJwk(ctx context.Context, resp *shared.OidcJwk) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.ID = types.StringPointerValue(resp.ID)
		if resp.Jwks == nil {
			r.Jwks = nil
		} else {
			r.Jwks = &tfTypes.Jwks{}
			r.Jwks.Keys = []tfTypes.Keys{}
			if len(r.Jwks.Keys) > len(resp.Jwks.Keys) {
				r.Jwks.Keys = r.Jwks.Keys[:len(resp.Jwks.Keys)]
			}
			for keysCount, keysItem := range resp.Jwks.Keys {
				var keys tfTypes.Keys
				keys.Alg = types.StringPointerValue(keysItem.Alg)
				keys.Crv = types.StringPointerValue(keysItem.Crv)
				keys.D = types.StringPointerValue(keysItem.D)
				keys.Dp = types.StringPointerValue(keysItem.Dp)
				keys.Dq = types.StringPointerValue(keysItem.Dq)
				keys.E = types.StringPointerValue(keysItem.E)
				keys.Issuer = types.StringPointerValue(keysItem.Issuer)
				keys.K = types.StringPointerValue(keysItem.K)
				keys.KeyOps = make([]types.String, 0, len(keysItem.KeyOps))
				for _, v := range keysItem.KeyOps {
					keys.KeyOps = append(keys.KeyOps, types.StringValue(v))
				}
				keys.Kid = types.StringPointerValue(keysItem.Kid)
				keys.Kty = types.StringPointerValue(keysItem.Kty)
				keys.N = types.StringPointerValue(keysItem.N)
				keys.Oth = types.StringPointerValue(keysItem.Oth)
				keys.P = types.StringPointerValue(keysItem.P)
				keys.Q = types.StringPointerValue(keysItem.Q)
				keys.Qi = types.StringPointerValue(keysItem.Qi)
				keys.R = types.StringPointerValue(keysItem.R)
				keys.T = types.StringPointerValue(keysItem.T)
				keys.Use = types.StringPointerValue(keysItem.Use)
				keys.X = types.StringPointerValue(keysItem.X)
				keys.X5c = make([]types.String, 0, len(keysItem.X5c))
				for _, v := range keysItem.X5c {
					keys.X5c = append(keys.X5c, types.StringValue(v))
				}
				keys.X5t = types.StringPointerValue(keysItem.X5t)
				keys.X5tNumberS256 = types.StringPointerValue(keysItem.X5tNumberS256)
				keys.X5u = types.StringPointerValue(keysItem.X5u)
				keys.Y = types.StringPointerValue(keysItem.Y)
				if keysCount+1 > len(r.Jwks.Keys) {
					r.Jwks.Keys = append(r.Jwks.Keys, keys)
				} else {
					r.Jwks.Keys[keysCount].Alg = keys.Alg
					r.Jwks.Keys[keysCount].Crv = keys.Crv
					r.Jwks.Keys[keysCount].D = keys.D
					r.Jwks.Keys[keysCount].Dp = keys.Dp
					r.Jwks.Keys[keysCount].Dq = keys.Dq
					r.Jwks.Keys[keysCount].E = keys.E
					r.Jwks.Keys[keysCount].Issuer = keys.Issuer
					r.Jwks.Keys[keysCount].K = keys.K
					r.Jwks.Keys[keysCount].KeyOps = keys.KeyOps
					r.Jwks.Keys[keysCount].Kid = keys.Kid
					r.Jwks.Keys[keysCount].Kty = keys.Kty
					r.Jwks.Keys[keysCount].N = keys.N
					r.Jwks.Keys[keysCount].Oth = keys.Oth
					r.Jwks.Keys[keysCount].P = keys.P
					r.Jwks.Keys[keysCount].Q = keys.Q
					r.Jwks.Keys[keysCount].Qi = keys.Qi
					r.Jwks.Keys[keysCount].R = keys.R
					r.Jwks.Keys[keysCount].T = keys.T
					r.Jwks.Keys[keysCount].Use = keys.Use
					r.Jwks.Keys[keysCount].X = keys.X
					r.Jwks.Keys[keysCount].X5c = keys.X5c
					r.Jwks.Keys[keysCount].X5t = keys.X5t
					r.Jwks.Keys[keysCount].X5tNumberS256 = keys.X5tNumberS256
					r.Jwks.Keys[keysCount].X5u = keys.X5u
					r.Jwks.Keys[keysCount].Y = keys.Y
				}
			}
		}
	}

	return diags
}
