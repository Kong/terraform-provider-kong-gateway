// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/internal/utils"
)

type DegraphqlPluginConfig struct {
	// The GraphQL endpoint serve path
	GraphqlServerPath *string `json:"graphql_server_path,omitempty"`
}

func (d *DegraphqlPluginConfig) GetGraphqlServerPath() *string {
	if d == nil {
		return nil
	}
	return d.GraphqlServerPath
}

type DegraphqlPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (d *DegraphqlPluginAfter) GetAccess() []string {
	if d == nil {
		return nil
	}
	return d.Access
}

type DegraphqlPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (d *DegraphqlPluginBefore) GetAccess() []string {
	if d == nil {
		return nil
	}
	return d.Access
}

type DegraphqlPluginOrdering struct {
	After  *DegraphqlPluginAfter  `json:"after,omitempty"`
	Before *DegraphqlPluginBefore `json:"before,omitempty"`
}

func (d *DegraphqlPluginOrdering) GetAfter() *DegraphqlPluginAfter {
	if d == nil {
		return nil
	}
	return d.After
}

func (d *DegraphqlPluginOrdering) GetBefore() *DegraphqlPluginBefore {
	if d == nil {
		return nil
	}
	return d.Before
}

type DegraphqlPluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

func (d *DegraphqlPluginPartials) GetID() *string {
	if d == nil {
		return nil
	}
	return d.ID
}

func (d *DegraphqlPluginPartials) GetName() *string {
	if d == nil {
		return nil
	}
	return d.Name
}

func (d *DegraphqlPluginPartials) GetPath() *string {
	if d == nil {
		return nil
	}
	return d.Path
}

type DegraphqlPluginProtocols string

const (
	DegraphqlPluginProtocolsGrpc  DegraphqlPluginProtocols = "grpc"
	DegraphqlPluginProtocolsGrpcs DegraphqlPluginProtocols = "grpcs"
	DegraphqlPluginProtocolsHTTP  DegraphqlPluginProtocols = "http"
	DegraphqlPluginProtocolsHTTPS DegraphqlPluginProtocols = "https"
)

func (e DegraphqlPluginProtocols) ToPointer() *DegraphqlPluginProtocols {
	return &e
}
func (e *DegraphqlPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		*e = DegraphqlPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DegraphqlPluginProtocols: %v", v)
	}
}

// DegraphqlPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type DegraphqlPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (d *DegraphqlPluginRoute) GetID() *string {
	if d == nil {
		return nil
	}
	return d.ID
}

// DegraphqlPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type DegraphqlPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (d *DegraphqlPluginService) GetID() *string {
	if d == nil {
		return nil
	}
	return d.ID
}

type DegraphqlPlugin struct {
	Config *DegraphqlPluginConfig `json:"config,omitempty"`
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `json:"enabled,omitempty"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string                  `json:"instance_name,omitempty"`
	name         string                   `const:"degraphql" json:"name"`
	Ordering     *DegraphqlPluginOrdering `json:"ordering,omitempty"`
	// A list of partials to be used by the plugin.
	Partials []DegraphqlPluginPartials `json:"partials,omitempty"`
	// A set of strings representing HTTP protocols.
	Protocols []DegraphqlPluginProtocols `json:"protocols,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *DegraphqlPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *DegraphqlPluginService `json:"service,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64 `json:"updated_at,omitempty"`
}

func (d DegraphqlPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DegraphqlPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"name"}); err != nil {
		return err
	}
	return nil
}

func (d *DegraphqlPlugin) GetConfig() *DegraphqlPluginConfig {
	if d == nil {
		return nil
	}
	return d.Config
}

func (d *DegraphqlPlugin) GetCreatedAt() *int64 {
	if d == nil {
		return nil
	}
	return d.CreatedAt
}

func (d *DegraphqlPlugin) GetEnabled() *bool {
	if d == nil {
		return nil
	}
	return d.Enabled
}

func (d *DegraphqlPlugin) GetID() *string {
	if d == nil {
		return nil
	}
	return d.ID
}

func (d *DegraphqlPlugin) GetInstanceName() *string {
	if d == nil {
		return nil
	}
	return d.InstanceName
}

func (d *DegraphqlPlugin) GetName() string {
	return "degraphql"
}

func (d *DegraphqlPlugin) GetOrdering() *DegraphqlPluginOrdering {
	if d == nil {
		return nil
	}
	return d.Ordering
}

func (d *DegraphqlPlugin) GetPartials() []DegraphqlPluginPartials {
	if d == nil {
		return nil
	}
	return d.Partials
}

func (d *DegraphqlPlugin) GetProtocols() []DegraphqlPluginProtocols {
	if d == nil {
		return nil
	}
	return d.Protocols
}

func (d *DegraphqlPlugin) GetRoute() *DegraphqlPluginRoute {
	if d == nil {
		return nil
	}
	return d.Route
}

func (d *DegraphqlPlugin) GetService() *DegraphqlPluginService {
	if d == nil {
		return nil
	}
	return d.Service
}

func (d *DegraphqlPlugin) GetTags() []string {
	if d == nil {
		return nil
	}
	return d.Tags
}

func (d *DegraphqlPlugin) GetUpdatedAt() *int64 {
	if d == nil {
		return nil
	}
	return d.UpdatedAt
}
