// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/internal/utils"
)

type LdapAuthPluginConfig struct {
	// An optional string (consumer UUID or username) value to use as an “anonymous” consumer if authentication fails. If empty (default null), the request fails with an authentication failure `4xx`.
	Anonymous *string `json:"anonymous,omitempty"`
	// Attribute to be used to search the user; e.g. cn
	Attribute string `json:"attribute"`
	// Base DN as the starting point for the search; e.g., dc=example,dc=com
	BaseDn string `json:"base_dn"`
	// Cache expiry time in seconds.
	CacheTTL *float64 `json:"cache_ttl,omitempty"`
	// An optional string to use as part of the Authorization header
	HeaderType *string `json:"header_type,omitempty"`
	// An optional boolean value telling the plugin to hide the credential to the upstream server. It will be removed by Kong before proxying the request.
	HideCredentials *bool `json:"hide_credentials,omitempty"`
	// An optional value in milliseconds that defines how long an idle connection to LDAP server will live before being closed.
	Keepalive *float64 `json:"keepalive,omitempty"`
	// A string representing a host name, such as example.com.
	LdapHost string `json:"ldap_host"`
	// An integer representing a port number between 0 and 65535, inclusive.
	LdapPort *int64 `json:"ldap_port,omitempty"`
	// Set to `true` to connect using the LDAPS protocol (LDAP over TLS).  When `ldaps` is configured, you must use port 636. If the `ldap` setting is enabled, ensure the `start_tls` setting is disabled.
	Ldaps *bool `json:"ldaps,omitempty"`
	// When authentication fails the plugin sends `WWW-Authenticate` header with `realm` attribute value.
	Realm *string `json:"realm,omitempty"`
	// Set it to `true` to issue StartTLS (Transport Layer Security) extended operation over `ldap` connection. If the `start_tls` setting is enabled, ensure the `ldaps` setting is disabled.
	StartTLS *bool `json:"start_tls,omitempty"`
	// An optional timeout in milliseconds when waiting for connection with LDAP server.
	Timeout *float64 `json:"timeout,omitempty"`
	// Set to `true` to authenticate LDAP server. The server certificate will be verified according to the CA certificates specified by the `lua_ssl_trusted_certificate` directive.
	VerifyLdapHost *bool `json:"verify_ldap_host,omitempty"`
}

func (l *LdapAuthPluginConfig) GetAnonymous() *string {
	if l == nil {
		return nil
	}
	return l.Anonymous
}

func (l *LdapAuthPluginConfig) GetAttribute() string {
	if l == nil {
		return ""
	}
	return l.Attribute
}

func (l *LdapAuthPluginConfig) GetBaseDn() string {
	if l == nil {
		return ""
	}
	return l.BaseDn
}

func (l *LdapAuthPluginConfig) GetCacheTTL() *float64 {
	if l == nil {
		return nil
	}
	return l.CacheTTL
}

func (l *LdapAuthPluginConfig) GetHeaderType() *string {
	if l == nil {
		return nil
	}
	return l.HeaderType
}

func (l *LdapAuthPluginConfig) GetHideCredentials() *bool {
	if l == nil {
		return nil
	}
	return l.HideCredentials
}

func (l *LdapAuthPluginConfig) GetKeepalive() *float64 {
	if l == nil {
		return nil
	}
	return l.Keepalive
}

func (l *LdapAuthPluginConfig) GetLdapHost() string {
	if l == nil {
		return ""
	}
	return l.LdapHost
}

func (l *LdapAuthPluginConfig) GetLdapPort() *int64 {
	if l == nil {
		return nil
	}
	return l.LdapPort
}

func (l *LdapAuthPluginConfig) GetLdaps() *bool {
	if l == nil {
		return nil
	}
	return l.Ldaps
}

func (l *LdapAuthPluginConfig) GetRealm() *string {
	if l == nil {
		return nil
	}
	return l.Realm
}

func (l *LdapAuthPluginConfig) GetStartTLS() *bool {
	if l == nil {
		return nil
	}
	return l.StartTLS
}

func (l *LdapAuthPluginConfig) GetTimeout() *float64 {
	if l == nil {
		return nil
	}
	return l.Timeout
}

func (l *LdapAuthPluginConfig) GetVerifyLdapHost() *bool {
	if l == nil {
		return nil
	}
	return l.VerifyLdapHost
}

type LdapAuthPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (l *LdapAuthPluginAfter) GetAccess() []string {
	if l == nil {
		return nil
	}
	return l.Access
}

type LdapAuthPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (l *LdapAuthPluginBefore) GetAccess() []string {
	if l == nil {
		return nil
	}
	return l.Access
}

type LdapAuthPluginOrdering struct {
	After  *LdapAuthPluginAfter  `json:"after,omitempty"`
	Before *LdapAuthPluginBefore `json:"before,omitempty"`
}

func (l *LdapAuthPluginOrdering) GetAfter() *LdapAuthPluginAfter {
	if l == nil {
		return nil
	}
	return l.After
}

func (l *LdapAuthPluginOrdering) GetBefore() *LdapAuthPluginBefore {
	if l == nil {
		return nil
	}
	return l.Before
}

type LdapAuthPluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

func (l *LdapAuthPluginPartials) GetID() *string {
	if l == nil {
		return nil
	}
	return l.ID
}

func (l *LdapAuthPluginPartials) GetName() *string {
	if l == nil {
		return nil
	}
	return l.Name
}

func (l *LdapAuthPluginPartials) GetPath() *string {
	if l == nil {
		return nil
	}
	return l.Path
}

type LdapAuthPluginProtocols string

const (
	LdapAuthPluginProtocolsGrpc  LdapAuthPluginProtocols = "grpc"
	LdapAuthPluginProtocolsGrpcs LdapAuthPluginProtocols = "grpcs"
	LdapAuthPluginProtocolsHTTP  LdapAuthPluginProtocols = "http"
	LdapAuthPluginProtocolsHTTPS LdapAuthPluginProtocols = "https"
	LdapAuthPluginProtocolsWs    LdapAuthPluginProtocols = "ws"
	LdapAuthPluginProtocolsWss   LdapAuthPluginProtocols = "wss"
)

func (e LdapAuthPluginProtocols) ToPointer() *LdapAuthPluginProtocols {
	return &e
}
func (e *LdapAuthPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = LdapAuthPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LdapAuthPluginProtocols: %v", v)
	}
}

// LdapAuthPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type LdapAuthPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (l *LdapAuthPluginRoute) GetID() *string {
	if l == nil {
		return nil
	}
	return l.ID
}

// LdapAuthPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type LdapAuthPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (l *LdapAuthPluginService) GetID() *string {
	if l == nil {
		return nil
	}
	return l.ID
}

type LdapAuthPlugin struct {
	Config *LdapAuthPluginConfig `json:"config,omitempty"`
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `json:"enabled,omitempty"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string                 `json:"instance_name,omitempty"`
	name         string                  `const:"ldap-auth" json:"name"`
	Ordering     *LdapAuthPluginOrdering `json:"ordering,omitempty"`
	// A list of partials to be used by the plugin.
	Partials []LdapAuthPluginPartials `json:"partials,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support tcp and tls.
	Protocols []LdapAuthPluginProtocols `json:"protocols,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *LdapAuthPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *LdapAuthPluginService `json:"service,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64 `json:"updated_at,omitempty"`
}

func (l LdapAuthPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *LdapAuthPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, []string{"name"}); err != nil {
		return err
	}
	return nil
}

func (l *LdapAuthPlugin) GetConfig() *LdapAuthPluginConfig {
	if l == nil {
		return nil
	}
	return l.Config
}

func (l *LdapAuthPlugin) GetCreatedAt() *int64 {
	if l == nil {
		return nil
	}
	return l.CreatedAt
}

func (l *LdapAuthPlugin) GetEnabled() *bool {
	if l == nil {
		return nil
	}
	return l.Enabled
}

func (l *LdapAuthPlugin) GetID() *string {
	if l == nil {
		return nil
	}
	return l.ID
}

func (l *LdapAuthPlugin) GetInstanceName() *string {
	if l == nil {
		return nil
	}
	return l.InstanceName
}

func (l *LdapAuthPlugin) GetName() string {
	return "ldap-auth"
}

func (l *LdapAuthPlugin) GetOrdering() *LdapAuthPluginOrdering {
	if l == nil {
		return nil
	}
	return l.Ordering
}

func (l *LdapAuthPlugin) GetPartials() []LdapAuthPluginPartials {
	if l == nil {
		return nil
	}
	return l.Partials
}

func (l *LdapAuthPlugin) GetProtocols() []LdapAuthPluginProtocols {
	if l == nil {
		return nil
	}
	return l.Protocols
}

func (l *LdapAuthPlugin) GetRoute() *LdapAuthPluginRoute {
	if l == nil {
		return nil
	}
	return l.Route
}

func (l *LdapAuthPlugin) GetService() *LdapAuthPluginService {
	if l == nil {
		return nil
	}
	return l.Service
}

func (l *LdapAuthPlugin) GetTags() []string {
	if l == nil {
		return nil
	}
	return l.Tags
}

func (l *LdapAuthPlugin) GetUpdatedAt() *int64 {
	if l == nil {
		return nil
	}
	return l.UpdatedAt
}
