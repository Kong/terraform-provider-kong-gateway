// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/internal/utils"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/types"
)

// CreateWebsocketValidatorPluginConfigClientType - The corresponding validation library for `config.upstream.binary.schema`. Currently, only `draft4` is supported.
type CreateWebsocketValidatorPluginConfigClientType string

const (
	CreateWebsocketValidatorPluginConfigClientTypeDraft4 CreateWebsocketValidatorPluginConfigClientType = "draft4"
)

func (e CreateWebsocketValidatorPluginConfigClientType) ToPointer() *CreateWebsocketValidatorPluginConfigClientType {
	return &e
}
func (e *CreateWebsocketValidatorPluginConfigClientType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "draft4":
		*e = CreateWebsocketValidatorPluginConfigClientType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateWebsocketValidatorPluginConfigClientType: %v", v)
	}
}

type Binary struct {
	// Schema used to validate upstream-originated binary frames. The semantics of this field depend on the validation type set by `config.upstream.binary.type`.
	Schema string `json:"schema"`
	// The corresponding validation library for `config.upstream.binary.schema`. Currently, only `draft4` is supported.
	Type CreateWebsocketValidatorPluginConfigClientType `json:"type"`
}

func (o *Binary) GetSchema() string {
	if o == nil {
		return ""
	}
	return o.Schema
}

func (o *Binary) GetType() CreateWebsocketValidatorPluginConfigClientType {
	if o == nil {
		return CreateWebsocketValidatorPluginConfigClientType("")
	}
	return o.Type
}

// CreateWebsocketValidatorPluginType - The corresponding validation library for `config.upstream.binary.schema`. Currently, only `draft4` is supported.
type CreateWebsocketValidatorPluginType string

const (
	CreateWebsocketValidatorPluginTypeDraft4 CreateWebsocketValidatorPluginType = "draft4"
)

func (e CreateWebsocketValidatorPluginType) ToPointer() *CreateWebsocketValidatorPluginType {
	return &e
}
func (e *CreateWebsocketValidatorPluginType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "draft4":
		*e = CreateWebsocketValidatorPluginType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateWebsocketValidatorPluginType: %v", v)
	}
}

type Text struct {
	// Schema used to validate upstream-originated binary frames. The semantics of this field depend on the validation type set by `config.upstream.binary.type`.
	Schema string `json:"schema"`
	// The corresponding validation library for `config.upstream.binary.schema`. Currently, only `draft4` is supported.
	Type CreateWebsocketValidatorPluginType `json:"type"`
}

func (o *Text) GetSchema() string {
	if o == nil {
		return ""
	}
	return o.Schema
}

func (o *Text) GetType() CreateWebsocketValidatorPluginType {
	if o == nil {
		return CreateWebsocketValidatorPluginType("")
	}
	return o.Type
}

type Client struct {
	Binary *Binary `json:"binary,omitempty"`
	Text   *Text   `json:"text,omitempty"`
}

func (o *Client) GetBinary() *Binary {
	if o == nil {
		return nil
	}
	return o.Binary
}

func (o *Client) GetText() *Text {
	if o == nil {
		return nil
	}
	return o.Text
}

// CreateWebsocketValidatorPluginConfigType - The corresponding validation library for `config.upstream.binary.schema`. Currently, only `draft4` is supported.
type CreateWebsocketValidatorPluginConfigType string

const (
	CreateWebsocketValidatorPluginConfigTypeDraft4 CreateWebsocketValidatorPluginConfigType = "draft4"
)

func (e CreateWebsocketValidatorPluginConfigType) ToPointer() *CreateWebsocketValidatorPluginConfigType {
	return &e
}
func (e *CreateWebsocketValidatorPluginConfigType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "draft4":
		*e = CreateWebsocketValidatorPluginConfigType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateWebsocketValidatorPluginConfigType: %v", v)
	}
}

type CreateWebsocketValidatorPluginBinary struct {
	// Schema used to validate upstream-originated binary frames. The semantics of this field depend on the validation type set by `config.upstream.binary.type`.
	Schema string `json:"schema"`
	// The corresponding validation library for `config.upstream.binary.schema`. Currently, only `draft4` is supported.
	Type CreateWebsocketValidatorPluginConfigType `json:"type"`
}

func (o *CreateWebsocketValidatorPluginBinary) GetSchema() string {
	if o == nil {
		return ""
	}
	return o.Schema
}

func (o *CreateWebsocketValidatorPluginBinary) GetType() CreateWebsocketValidatorPluginConfigType {
	if o == nil {
		return CreateWebsocketValidatorPluginConfigType("")
	}
	return o.Type
}

// CreateWebsocketValidatorPluginConfigUpstreamType - The corresponding validation library for `config.upstream.binary.schema`. Currently, only `draft4` is supported.
type CreateWebsocketValidatorPluginConfigUpstreamType string

const (
	CreateWebsocketValidatorPluginConfigUpstreamTypeDraft4 CreateWebsocketValidatorPluginConfigUpstreamType = "draft4"
)

func (e CreateWebsocketValidatorPluginConfigUpstreamType) ToPointer() *CreateWebsocketValidatorPluginConfigUpstreamType {
	return &e
}
func (e *CreateWebsocketValidatorPluginConfigUpstreamType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "draft4":
		*e = CreateWebsocketValidatorPluginConfigUpstreamType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateWebsocketValidatorPluginConfigUpstreamType: %v", v)
	}
}

type CreateWebsocketValidatorPluginText struct {
	// Schema used to validate upstream-originated binary frames. The semantics of this field depend on the validation type set by `config.upstream.binary.type`.
	Schema string `json:"schema"`
	// The corresponding validation library for `config.upstream.binary.schema`. Currently, only `draft4` is supported.
	Type CreateWebsocketValidatorPluginConfigUpstreamType `json:"type"`
}

func (o *CreateWebsocketValidatorPluginText) GetSchema() string {
	if o == nil {
		return ""
	}
	return o.Schema
}

func (o *CreateWebsocketValidatorPluginText) GetType() CreateWebsocketValidatorPluginConfigUpstreamType {
	if o == nil {
		return CreateWebsocketValidatorPluginConfigUpstreamType("")
	}
	return o.Type
}

type CreateWebsocketValidatorPluginUpstream struct {
	Binary *CreateWebsocketValidatorPluginBinary `json:"binary,omitempty"`
	Text   *CreateWebsocketValidatorPluginText   `json:"text,omitempty"`
}

func (o *CreateWebsocketValidatorPluginUpstream) GetBinary() *CreateWebsocketValidatorPluginBinary {
	if o == nil {
		return nil
	}
	return o.Binary
}

func (o *CreateWebsocketValidatorPluginUpstream) GetText() *CreateWebsocketValidatorPluginText {
	if o == nil {
		return nil
	}
	return o.Text
}

type CreateWebsocketValidatorPluginConfig struct {
	Client   *Client                                 `json:"client,omitempty"`
	Upstream *CreateWebsocketValidatorPluginUpstream `json:"upstream,omitempty"`
}

func (o *CreateWebsocketValidatorPluginConfig) GetClient() *Client {
	if o == nil {
		return nil
	}
	return o.Client
}

func (o *CreateWebsocketValidatorPluginConfig) GetUpstream() *CreateWebsocketValidatorPluginUpstream {
	if o == nil {
		return nil
	}
	return o.Upstream
}

type CreateWebsocketValidatorPluginProtocols string

const (
	CreateWebsocketValidatorPluginProtocolsGrpc           CreateWebsocketValidatorPluginProtocols = "grpc"
	CreateWebsocketValidatorPluginProtocolsGrpcs          CreateWebsocketValidatorPluginProtocols = "grpcs"
	CreateWebsocketValidatorPluginProtocolsHTTP           CreateWebsocketValidatorPluginProtocols = "http"
	CreateWebsocketValidatorPluginProtocolsHTTPS          CreateWebsocketValidatorPluginProtocols = "https"
	CreateWebsocketValidatorPluginProtocolsTCP            CreateWebsocketValidatorPluginProtocols = "tcp"
	CreateWebsocketValidatorPluginProtocolsTLS            CreateWebsocketValidatorPluginProtocols = "tls"
	CreateWebsocketValidatorPluginProtocolsTLSPassthrough CreateWebsocketValidatorPluginProtocols = "tls_passthrough"
	CreateWebsocketValidatorPluginProtocolsUDP            CreateWebsocketValidatorPluginProtocols = "udp"
	CreateWebsocketValidatorPluginProtocolsWs             CreateWebsocketValidatorPluginProtocols = "ws"
	CreateWebsocketValidatorPluginProtocolsWss            CreateWebsocketValidatorPluginProtocols = "wss"
)

func (e CreateWebsocketValidatorPluginProtocols) ToPointer() *CreateWebsocketValidatorPluginProtocols {
	return &e
}
func (e *CreateWebsocketValidatorPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = CreateWebsocketValidatorPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateWebsocketValidatorPluginProtocols: %v", v)
	}
}

// CreateWebsocketValidatorPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type CreateWebsocketValidatorPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateWebsocketValidatorPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateWebsocketValidatorPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateWebsocketValidatorPluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateWebsocketValidatorPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type CreateWebsocketValidatorPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateWebsocketValidatorPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateWebsocketValidatorPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type CreateWebsocketValidatorPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateWebsocketValidatorPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateWebsocketValidatorPlugin struct {
	Config *CreateWebsocketValidatorPluginConfig `json:"config,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool   `json:"enabled,omitempty"`
	InstanceName *string `json:"instance_name,omitempty"`
	name         *string `const:"websocket-validator" json:"name,omitempty"`
	Ordering     any     `json:"ordering,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []CreateWebsocketValidatorPluginProtocols `json:"protocols,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *CreateWebsocketValidatorPluginConsumer      `json:"consumer,omitempty"`
	ConsumerGroup *CreateWebsocketValidatorPluginConsumerGroup `json:"consumer_group,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *CreateWebsocketValidatorPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *CreateWebsocketValidatorPluginService `json:"service,omitempty"`
}

func (c CreateWebsocketValidatorPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateWebsocketValidatorPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateWebsocketValidatorPlugin) GetConfig() *CreateWebsocketValidatorPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *CreateWebsocketValidatorPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *CreateWebsocketValidatorPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *CreateWebsocketValidatorPlugin) GetName() *string {
	return types.String("websocket-validator")
}

func (o *CreateWebsocketValidatorPlugin) GetOrdering() any {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *CreateWebsocketValidatorPlugin) GetProtocols() []CreateWebsocketValidatorPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *CreateWebsocketValidatorPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *CreateWebsocketValidatorPlugin) GetConsumer() *CreateWebsocketValidatorPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *CreateWebsocketValidatorPlugin) GetConsumerGroup() *CreateWebsocketValidatorPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *CreateWebsocketValidatorPlugin) GetRoute() *CreateWebsocketValidatorPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *CreateWebsocketValidatorPlugin) GetService() *CreateWebsocketValidatorPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
