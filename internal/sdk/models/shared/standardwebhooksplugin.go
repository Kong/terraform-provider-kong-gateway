// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/internal/utils"
)

type StandardWebhooksPluginConfig struct {
	// Webhook secret
	SecretV1 string `json:"secret_v1"`
	// Tolerance of the webhook timestamp in seconds. If the webhook timestamp is older than this number of seconds, it will be rejected with a '400' response.
	ToleranceSecond *int64 `json:"tolerance_second,omitempty"`
}

func (s *StandardWebhooksPluginConfig) GetSecretV1() string {
	if s == nil {
		return ""
	}
	return s.SecretV1
}

func (s *StandardWebhooksPluginConfig) GetToleranceSecond() *int64 {
	if s == nil {
		return nil
	}
	return s.ToleranceSecond
}

// StandardWebhooksPluginConsumerGroup - If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups
type StandardWebhooksPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (s *StandardWebhooksPluginConsumerGroup) GetID() *string {
	if s == nil {
		return nil
	}
	return s.ID
}

type StandardWebhooksPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (s *StandardWebhooksPluginAfter) GetAccess() []string {
	if s == nil {
		return nil
	}
	return s.Access
}

type StandardWebhooksPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (s *StandardWebhooksPluginBefore) GetAccess() []string {
	if s == nil {
		return nil
	}
	return s.Access
}

type StandardWebhooksPluginOrdering struct {
	After  *StandardWebhooksPluginAfter  `json:"after,omitempty"`
	Before *StandardWebhooksPluginBefore `json:"before,omitempty"`
}

func (s *StandardWebhooksPluginOrdering) GetAfter() *StandardWebhooksPluginAfter {
	if s == nil {
		return nil
	}
	return s.After
}

func (s *StandardWebhooksPluginOrdering) GetBefore() *StandardWebhooksPluginBefore {
	if s == nil {
		return nil
	}
	return s.Before
}

type StandardWebhooksPluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

func (s *StandardWebhooksPluginPartials) GetID() *string {
	if s == nil {
		return nil
	}
	return s.ID
}

func (s *StandardWebhooksPluginPartials) GetName() *string {
	if s == nil {
		return nil
	}
	return s.Name
}

func (s *StandardWebhooksPluginPartials) GetPath() *string {
	if s == nil {
		return nil
	}
	return s.Path
}

type StandardWebhooksPluginProtocols string

const (
	StandardWebhooksPluginProtocolsGrpc  StandardWebhooksPluginProtocols = "grpc"
	StandardWebhooksPluginProtocolsGrpcs StandardWebhooksPluginProtocols = "grpcs"
	StandardWebhooksPluginProtocolsHTTP  StandardWebhooksPluginProtocols = "http"
	StandardWebhooksPluginProtocolsHTTPS StandardWebhooksPluginProtocols = "https"
)

func (e StandardWebhooksPluginProtocols) ToPointer() *StandardWebhooksPluginProtocols {
	return &e
}
func (e *StandardWebhooksPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		*e = StandardWebhooksPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StandardWebhooksPluginProtocols: %v", v)
	}
}

// StandardWebhooksPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type StandardWebhooksPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (s *StandardWebhooksPluginRoute) GetID() *string {
	if s == nil {
		return nil
	}
	return s.ID
}

// StandardWebhooksPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type StandardWebhooksPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (s *StandardWebhooksPluginService) GetID() *string {
	if s == nil {
		return nil
	}
	return s.ID
}

type StandardWebhooksPlugin struct {
	Config *StandardWebhooksPluginConfig `json:"config,omitempty"`
	// If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups
	ConsumerGroup *StandardWebhooksPluginConsumerGroup `json:"consumer_group,omitempty"`
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `json:"enabled,omitempty"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string                         `json:"instance_name,omitempty"`
	name         string                          `const:"standard-webhooks" json:"name"`
	Ordering     *StandardWebhooksPluginOrdering `json:"ordering,omitempty"`
	// A list of partials to be used by the plugin.
	Partials []StandardWebhooksPluginPartials `json:"partials,omitempty"`
	// A set of strings representing HTTP protocols.
	Protocols []StandardWebhooksPluginProtocols `json:"protocols,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *StandardWebhooksPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *StandardWebhooksPluginService `json:"service,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64 `json:"updated_at,omitempty"`
}

func (s StandardWebhooksPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *StandardWebhooksPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, []string{"name"}); err != nil {
		return err
	}
	return nil
}

func (s *StandardWebhooksPlugin) GetConfig() *StandardWebhooksPluginConfig {
	if s == nil {
		return nil
	}
	return s.Config
}

func (s *StandardWebhooksPlugin) GetConsumerGroup() *StandardWebhooksPluginConsumerGroup {
	if s == nil {
		return nil
	}
	return s.ConsumerGroup
}

func (s *StandardWebhooksPlugin) GetCreatedAt() *int64 {
	if s == nil {
		return nil
	}
	return s.CreatedAt
}

func (s *StandardWebhooksPlugin) GetEnabled() *bool {
	if s == nil {
		return nil
	}
	return s.Enabled
}

func (s *StandardWebhooksPlugin) GetID() *string {
	if s == nil {
		return nil
	}
	return s.ID
}

func (s *StandardWebhooksPlugin) GetInstanceName() *string {
	if s == nil {
		return nil
	}
	return s.InstanceName
}

func (s *StandardWebhooksPlugin) GetName() string {
	return "standard-webhooks"
}

func (s *StandardWebhooksPlugin) GetOrdering() *StandardWebhooksPluginOrdering {
	if s == nil {
		return nil
	}
	return s.Ordering
}

func (s *StandardWebhooksPlugin) GetPartials() []StandardWebhooksPluginPartials {
	if s == nil {
		return nil
	}
	return s.Partials
}

func (s *StandardWebhooksPlugin) GetProtocols() []StandardWebhooksPluginProtocols {
	if s == nil {
		return nil
	}
	return s.Protocols
}

func (s *StandardWebhooksPlugin) GetRoute() *StandardWebhooksPluginRoute {
	if s == nil {
		return nil
	}
	return s.Route
}

func (s *StandardWebhooksPlugin) GetService() *StandardWebhooksPluginService {
	if s == nil {
		return nil
	}
	return s.Service
}

func (s *StandardWebhooksPlugin) GetTags() []string {
	if s == nil {
		return nil
	}
	return s.Tags
}

func (s *StandardWebhooksPlugin) GetUpdatedAt() *int64 {
	if s == nil {
		return nil
	}
	return s.UpdatedAt
}
