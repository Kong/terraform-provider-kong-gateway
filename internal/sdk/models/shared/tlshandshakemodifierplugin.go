// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/internal/utils"
)

// TLSClientCertificate - TLS Client Certificate
type TLSClientCertificate string

const (
	TLSClientCertificateRequest TLSClientCertificate = "REQUEST"
)

func (e TLSClientCertificate) ToPointer() *TLSClientCertificate {
	return &e
}
func (e *TLSClientCertificate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "REQUEST":
		*e = TLSClientCertificate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TLSClientCertificate: %v", v)
	}
}

type TLSHandshakeModifierPluginConfig struct {
	// TLS Client Certificate
	TLSClientCertificate *TLSClientCertificate `json:"tls_client_certificate,omitempty"`
}

func (t *TLSHandshakeModifierPluginConfig) GetTLSClientCertificate() *TLSClientCertificate {
	if t == nil {
		return nil
	}
	return t.TLSClientCertificate
}

type TLSHandshakeModifierPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (t *TLSHandshakeModifierPluginAfter) GetAccess() []string {
	if t == nil {
		return nil
	}
	return t.Access
}

type TLSHandshakeModifierPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (t *TLSHandshakeModifierPluginBefore) GetAccess() []string {
	if t == nil {
		return nil
	}
	return t.Access
}

type TLSHandshakeModifierPluginOrdering struct {
	After  *TLSHandshakeModifierPluginAfter  `json:"after,omitempty"`
	Before *TLSHandshakeModifierPluginBefore `json:"before,omitempty"`
}

func (t *TLSHandshakeModifierPluginOrdering) GetAfter() *TLSHandshakeModifierPluginAfter {
	if t == nil {
		return nil
	}
	return t.After
}

func (t *TLSHandshakeModifierPluginOrdering) GetBefore() *TLSHandshakeModifierPluginBefore {
	if t == nil {
		return nil
	}
	return t.Before
}

type TLSHandshakeModifierPluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

func (t *TLSHandshakeModifierPluginPartials) GetID() *string {
	if t == nil {
		return nil
	}
	return t.ID
}

func (t *TLSHandshakeModifierPluginPartials) GetName() *string {
	if t == nil {
		return nil
	}
	return t.Name
}

func (t *TLSHandshakeModifierPluginPartials) GetPath() *string {
	if t == nil {
		return nil
	}
	return t.Path
}

type TLSHandshakeModifierPluginProtocols string

const (
	TLSHandshakeModifierPluginProtocolsGrpcs TLSHandshakeModifierPluginProtocols = "grpcs"
	TLSHandshakeModifierPluginProtocolsHTTPS TLSHandshakeModifierPluginProtocols = "https"
	TLSHandshakeModifierPluginProtocolsTLS   TLSHandshakeModifierPluginProtocols = "tls"
)

func (e TLSHandshakeModifierPluginProtocols) ToPointer() *TLSHandshakeModifierPluginProtocols {
	return &e
}
func (e *TLSHandshakeModifierPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpcs":
		fallthrough
	case "https":
		fallthrough
	case "tls":
		*e = TLSHandshakeModifierPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TLSHandshakeModifierPluginProtocols: %v", v)
	}
}

// TLSHandshakeModifierPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type TLSHandshakeModifierPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (t *TLSHandshakeModifierPluginRoute) GetID() *string {
	if t == nil {
		return nil
	}
	return t.ID
}

// TLSHandshakeModifierPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type TLSHandshakeModifierPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (t *TLSHandshakeModifierPluginService) GetID() *string {
	if t == nil {
		return nil
	}
	return t.ID
}

type TLSHandshakeModifierPlugin struct {
	Config *TLSHandshakeModifierPluginConfig `json:"config,omitempty"`
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `json:"enabled,omitempty"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string                             `json:"instance_name,omitempty"`
	name         string                              `const:"tls-handshake-modifier" json:"name"`
	Ordering     *TLSHandshakeModifierPluginOrdering `json:"ordering,omitempty"`
	// A list of partials to be used by the plugin.
	Partials []TLSHandshakeModifierPluginPartials `json:"partials,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support tcp and tls.
	Protocols []TLSHandshakeModifierPluginProtocols `json:"protocols,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *TLSHandshakeModifierPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *TLSHandshakeModifierPluginService `json:"service,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64 `json:"updated_at,omitempty"`
}

func (t TLSHandshakeModifierPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TLSHandshakeModifierPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"name"}); err != nil {
		return err
	}
	return nil
}

func (t *TLSHandshakeModifierPlugin) GetConfig() *TLSHandshakeModifierPluginConfig {
	if t == nil {
		return nil
	}
	return t.Config
}

func (t *TLSHandshakeModifierPlugin) GetCreatedAt() *int64 {
	if t == nil {
		return nil
	}
	return t.CreatedAt
}

func (t *TLSHandshakeModifierPlugin) GetEnabled() *bool {
	if t == nil {
		return nil
	}
	return t.Enabled
}

func (t *TLSHandshakeModifierPlugin) GetID() *string {
	if t == nil {
		return nil
	}
	return t.ID
}

func (t *TLSHandshakeModifierPlugin) GetInstanceName() *string {
	if t == nil {
		return nil
	}
	return t.InstanceName
}

func (t *TLSHandshakeModifierPlugin) GetName() string {
	return "tls-handshake-modifier"
}

func (t *TLSHandshakeModifierPlugin) GetOrdering() *TLSHandshakeModifierPluginOrdering {
	if t == nil {
		return nil
	}
	return t.Ordering
}

func (t *TLSHandshakeModifierPlugin) GetPartials() []TLSHandshakeModifierPluginPartials {
	if t == nil {
		return nil
	}
	return t.Partials
}

func (t *TLSHandshakeModifierPlugin) GetProtocols() []TLSHandshakeModifierPluginProtocols {
	if t == nil {
		return nil
	}
	return t.Protocols
}

func (t *TLSHandshakeModifierPlugin) GetRoute() *TLSHandshakeModifierPluginRoute {
	if t == nil {
		return nil
	}
	return t.Route
}

func (t *TLSHandshakeModifierPlugin) GetService() *TLSHandshakeModifierPluginService {
	if t == nil {
		return nil
	}
	return t.Service
}

func (t *TLSHandshakeModifierPlugin) GetTags() []string {
	if t == nil {
		return nil
	}
	return t.Tags
}

func (t *TLSHandshakeModifierPlugin) GetUpdatedAt() *int64 {
	if t == nil {
		return nil
	}
	return t.UpdatedAt
}
