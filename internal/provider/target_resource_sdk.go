// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-kong-gateway/internal/provider/types"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/models/shared"
)

func (r *TargetResourceModel) RefreshFromSharedTarget(ctx context.Context, resp *shared.Target) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.Float64PointerValue(resp.CreatedAt)
		r.Failover = types.BoolPointerValue(resp.Failover)
		r.ID = types.StringPointerValue(resp.ID)
		if resp.Tags != nil {
			r.Tags = make([]types.String, 0, len(resp.Tags))
			for _, v := range resp.Tags {
				r.Tags = append(r.Tags, types.StringValue(v))
			}
		}
		r.Target = types.StringPointerValue(resp.Target)
		r.UpdatedAt = types.Float64PointerValue(resp.UpdatedAt)
		if resp.Upstream == nil {
			r.Upstream = nil
		} else {
			r.Upstream = &tfTypes.Set{}
			r.Upstream.ID = types.StringPointerValue(resp.Upstream.ID)
		}
		r.Weight = types.Int64PointerValue(resp.Weight)
	}

	return diags
}

func (r *TargetResourceModel) ToOperationsCreateTargetWithUpstreamRequest(ctx context.Context) (*operations.CreateTargetWithUpstreamRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var upstreamID string
	upstreamID = r.UpstreamID.ValueString()

	var workspace string
	workspace = r.Workspace.ValueString()

	targetWithoutParents, targetWithoutParentsDiags := r.ToSharedTargetWithoutParents(ctx)
	diags.Append(targetWithoutParentsDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateTargetWithUpstreamRequest{
		UpstreamID:           upstreamID,
		Workspace:            workspace,
		TargetWithoutParents: *targetWithoutParents,
	}

	return &out, diags
}

func (r *TargetResourceModel) ToSharedTargetWithoutParents(ctx context.Context) (*shared.TargetWithoutParents, diag.Diagnostics) {
	var diags diag.Diagnostics

	createdAt := new(float64)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt = r.CreatedAt.ValueFloat64()
	} else {
		createdAt = nil
	}
	failover := new(bool)
	if !r.Failover.IsUnknown() && !r.Failover.IsNull() {
		*failover = r.Failover.ValueBool()
	} else {
		failover = nil
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	var tags []string
	if r.Tags != nil {
		tags = make([]string, 0, len(r.Tags))
		for _, tagsItem := range r.Tags {
			tags = append(tags, tagsItem.ValueString())
		}
	}
	target := new(string)
	if !r.Target.IsUnknown() && !r.Target.IsNull() {
		*target = r.Target.ValueString()
	} else {
		target = nil
	}
	updatedAt := new(float64)
	if !r.UpdatedAt.IsUnknown() && !r.UpdatedAt.IsNull() {
		*updatedAt = r.UpdatedAt.ValueFloat64()
	} else {
		updatedAt = nil
	}
	var upstream *shared.TargetWithoutParentsUpstream
	if r.Upstream != nil {
		id1 := new(string)
		if !r.Upstream.ID.IsUnknown() && !r.Upstream.ID.IsNull() {
			*id1 = r.Upstream.ID.ValueString()
		} else {
			id1 = nil
		}
		upstream = &shared.TargetWithoutParentsUpstream{
			ID: id1,
		}
	}
	weight := new(int64)
	if !r.Weight.IsUnknown() && !r.Weight.IsNull() {
		*weight = r.Weight.ValueInt64()
	} else {
		weight = nil
	}
	out := shared.TargetWithoutParents{
		CreatedAt: createdAt,
		Failover:  failover,
		ID:        id,
		Tags:      tags,
		Target:    target,
		UpdatedAt: updatedAt,
		Upstream:  upstream,
		Weight:    weight,
	}

	return &out, diags
}
