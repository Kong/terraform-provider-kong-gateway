// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/internal/utils"
)

type ConsumerIdentifierDefault string

const (
	ConsumerIdentifierDefaultConsumerID ConsumerIdentifierDefault = "consumer_id"
	ConsumerIdentifierDefaultCustomID   ConsumerIdentifierDefault = "custom_id"
	ConsumerIdentifierDefaultUsername   ConsumerIdentifierDefault = "username"
)

func (e ConsumerIdentifierDefault) ToPointer() *ConsumerIdentifierDefault {
	return &e
}
func (e *ConsumerIdentifierDefault) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "consumer_id":
		fallthrough
	case "custom_id":
		fallthrough
	case "username":
		*e = ConsumerIdentifierDefault(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConsumerIdentifierDefault: %v", v)
	}
}

// StatsdPluginConsumerIdentifier - Authenticated user detail.
type StatsdPluginConsumerIdentifier string

const (
	StatsdPluginConsumerIdentifierConsumerID StatsdPluginConsumerIdentifier = "consumer_id"
	StatsdPluginConsumerIdentifierCustomID   StatsdPluginConsumerIdentifier = "custom_id"
	StatsdPluginConsumerIdentifierUsername   StatsdPluginConsumerIdentifier = "username"
)

func (e StatsdPluginConsumerIdentifier) ToPointer() *StatsdPluginConsumerIdentifier {
	return &e
}
func (e *StatsdPluginConsumerIdentifier) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "consumer_id":
		fallthrough
	case "custom_id":
		fallthrough
	case "username":
		*e = StatsdPluginConsumerIdentifier(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StatsdPluginConsumerIdentifier: %v", v)
	}
}

// StatsdPluginName - StatsD metric’s name.
type StatsdPluginName string

const (
	StatsdPluginNameCacheDatastoreHitsTotal    StatsdPluginName = "cache_datastore_hits_total"
	StatsdPluginNameCacheDatastoreMissesTotal  StatsdPluginName = "cache_datastore_misses_total"
	StatsdPluginNameKongLatency                StatsdPluginName = "kong_latency"
	StatsdPluginNameLatency                    StatsdPluginName = "latency"
	StatsdPluginNameRequestCount               StatsdPluginName = "request_count"
	StatsdPluginNameRequestPerUser             StatsdPluginName = "request_per_user"
	StatsdPluginNameRequestSize                StatsdPluginName = "request_size"
	StatsdPluginNameResponseSize               StatsdPluginName = "response_size"
	StatsdPluginNameShdictUsage                StatsdPluginName = "shdict_usage"
	StatsdPluginNameStatusCount                StatsdPluginName = "status_count"
	StatsdPluginNameStatusCountPerUser         StatsdPluginName = "status_count_per_user"
	StatsdPluginNameStatusCountPerUserPerRoute StatsdPluginName = "status_count_per_user_per_route"
	StatsdPluginNameStatusCountPerWorkspace    StatsdPluginName = "status_count_per_workspace"
	StatsdPluginNameUniqueUsers                StatsdPluginName = "unique_users"
	StatsdPluginNameUpstreamLatency            StatsdPluginName = "upstream_latency"
)

func (e StatsdPluginName) ToPointer() *StatsdPluginName {
	return &e
}
func (e *StatsdPluginName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cache_datastore_hits_total":
		fallthrough
	case "cache_datastore_misses_total":
		fallthrough
	case "kong_latency":
		fallthrough
	case "latency":
		fallthrough
	case "request_count":
		fallthrough
	case "request_per_user":
		fallthrough
	case "request_size":
		fallthrough
	case "response_size":
		fallthrough
	case "shdict_usage":
		fallthrough
	case "status_count":
		fallthrough
	case "status_count_per_user":
		fallthrough
	case "status_count_per_user_per_route":
		fallthrough
	case "status_count_per_workspace":
		fallthrough
	case "unique_users":
		fallthrough
	case "upstream_latency":
		*e = StatsdPluginName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StatsdPluginName: %v", v)
	}
}

// ServiceIdentifier - Service detail.
type ServiceIdentifier string

const (
	ServiceIdentifierServiceHost       ServiceIdentifier = "service_host"
	ServiceIdentifierServiceID         ServiceIdentifier = "service_id"
	ServiceIdentifierServiceName       ServiceIdentifier = "service_name"
	ServiceIdentifierServiceNameOrHost ServiceIdentifier = "service_name_or_host"
)

func (e ServiceIdentifier) ToPointer() *ServiceIdentifier {
	return &e
}
func (e *ServiceIdentifier) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_host":
		fallthrough
	case "service_id":
		fallthrough
	case "service_name":
		fallthrough
	case "service_name_or_host":
		*e = ServiceIdentifier(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ServiceIdentifier: %v", v)
	}
}

// StatsdPluginStatType - Determines what sort of event a metric represents.
type StatsdPluginStatType string

const (
	StatsdPluginStatTypeCounter   StatsdPluginStatType = "counter"
	StatsdPluginStatTypeGauge     StatsdPluginStatType = "gauge"
	StatsdPluginStatTypeHistogram StatsdPluginStatType = "histogram"
	StatsdPluginStatTypeMeter     StatsdPluginStatType = "meter"
	StatsdPluginStatTypeSet       StatsdPluginStatType = "set"
	StatsdPluginStatTypeTimer     StatsdPluginStatType = "timer"
)

func (e StatsdPluginStatType) ToPointer() *StatsdPluginStatType {
	return &e
}
func (e *StatsdPluginStatType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "counter":
		fallthrough
	case "gauge":
		fallthrough
	case "histogram":
		fallthrough
	case "meter":
		fallthrough
	case "set":
		fallthrough
	case "timer":
		*e = StatsdPluginStatType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StatsdPluginStatType: %v", v)
	}
}

// WorkspaceIdentifier - Workspace detail.
type WorkspaceIdentifier string

const (
	WorkspaceIdentifierWorkspaceID   WorkspaceIdentifier = "workspace_id"
	WorkspaceIdentifierWorkspaceName WorkspaceIdentifier = "workspace_name"
)

func (e WorkspaceIdentifier) ToPointer() *WorkspaceIdentifier {
	return &e
}
func (e *WorkspaceIdentifier) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "workspace_id":
		fallthrough
	case "workspace_name":
		*e = WorkspaceIdentifier(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WorkspaceIdentifier: %v", v)
	}
}

type StatsdPluginMetrics struct {
	// Authenticated user detail.
	ConsumerIdentifier *StatsdPluginConsumerIdentifier `json:"consumer_identifier,omitempty"`
	// StatsD metric’s name.
	Name StatsdPluginName `json:"name"`
	// Sampling rate
	SampleRate *float64 `json:"sample_rate,omitempty"`
	// Service detail.
	ServiceIdentifier *ServiceIdentifier `json:"service_identifier,omitempty"`
	// Determines what sort of event a metric represents.
	StatType StatsdPluginStatType `json:"stat_type"`
	// Workspace detail.
	WorkspaceIdentifier *WorkspaceIdentifier `json:"workspace_identifier,omitempty"`
}

func (s *StatsdPluginMetrics) GetConsumerIdentifier() *StatsdPluginConsumerIdentifier {
	if s == nil {
		return nil
	}
	return s.ConsumerIdentifier
}

func (s *StatsdPluginMetrics) GetName() StatsdPluginName {
	if s == nil {
		return StatsdPluginName("")
	}
	return s.Name
}

func (s *StatsdPluginMetrics) GetSampleRate() *float64 {
	if s == nil {
		return nil
	}
	return s.SampleRate
}

func (s *StatsdPluginMetrics) GetServiceIdentifier() *ServiceIdentifier {
	if s == nil {
		return nil
	}
	return s.ServiceIdentifier
}

func (s *StatsdPluginMetrics) GetStatType() StatsdPluginStatType {
	if s == nil {
		return StatsdPluginStatType("")
	}
	return s.StatType
}

func (s *StatsdPluginMetrics) GetWorkspaceIdentifier() *WorkspaceIdentifier {
	if s == nil {
		return nil
	}
	return s.WorkspaceIdentifier
}

// StatsdPluginConcurrencyLimit - The number of of queue delivery timers. -1 indicates unlimited.
type StatsdPluginConcurrencyLimit int64

const (
	StatsdPluginConcurrencyLimitMinus1 StatsdPluginConcurrencyLimit = -1
	StatsdPluginConcurrencyLimitOne    StatsdPluginConcurrencyLimit = 1
)

func (e StatsdPluginConcurrencyLimit) ToPointer() *StatsdPluginConcurrencyLimit {
	return &e
}
func (e *StatsdPluginConcurrencyLimit) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case -1:
		fallthrough
	case 1:
		*e = StatsdPluginConcurrencyLimit(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StatsdPluginConcurrencyLimit: %v", v)
	}
}

type StatsdPluginQueue struct {
	// The number of of queue delivery timers. -1 indicates unlimited.
	ConcurrencyLimit *StatsdPluginConcurrencyLimit `json:"concurrency_limit,omitempty"`
	// Time in seconds before the initial retry is made for a failing batch.
	InitialRetryDelay *float64 `json:"initial_retry_delay,omitempty"`
	// Maximum number of entries that can be processed at a time.
	MaxBatchSize *int64 `json:"max_batch_size,omitempty"`
	// Maximum number of bytes that can be waiting on a queue, requires string content.
	MaxBytes *int64 `json:"max_bytes,omitempty"`
	// Maximum number of (fractional) seconds to elapse after the first entry was queued before the queue starts calling the handler.
	MaxCoalescingDelay *float64 `json:"max_coalescing_delay,omitempty"`
	// Maximum number of entries that can be waiting on the queue.
	MaxEntries *int64 `json:"max_entries,omitempty"`
	// Maximum time in seconds between retries, caps exponential backoff.
	MaxRetryDelay *float64 `json:"max_retry_delay,omitempty"`
	// Time in seconds before the queue gives up calling a failed handler for a batch.
	MaxRetryTime *float64 `json:"max_retry_time,omitempty"`
}

func (s *StatsdPluginQueue) GetConcurrencyLimit() *StatsdPluginConcurrencyLimit {
	if s == nil {
		return nil
	}
	return s.ConcurrencyLimit
}

func (s *StatsdPluginQueue) GetInitialRetryDelay() *float64 {
	if s == nil {
		return nil
	}
	return s.InitialRetryDelay
}

func (s *StatsdPluginQueue) GetMaxBatchSize() *int64 {
	if s == nil {
		return nil
	}
	return s.MaxBatchSize
}

func (s *StatsdPluginQueue) GetMaxBytes() *int64 {
	if s == nil {
		return nil
	}
	return s.MaxBytes
}

func (s *StatsdPluginQueue) GetMaxCoalescingDelay() *float64 {
	if s == nil {
		return nil
	}
	return s.MaxCoalescingDelay
}

func (s *StatsdPluginQueue) GetMaxEntries() *int64 {
	if s == nil {
		return nil
	}
	return s.MaxEntries
}

func (s *StatsdPluginQueue) GetMaxRetryDelay() *float64 {
	if s == nil {
		return nil
	}
	return s.MaxRetryDelay
}

func (s *StatsdPluginQueue) GetMaxRetryTime() *float64 {
	if s == nil {
		return nil
	}
	return s.MaxRetryTime
}

type ServiceIdentifierDefault string

const (
	ServiceIdentifierDefaultServiceHost       ServiceIdentifierDefault = "service_host"
	ServiceIdentifierDefaultServiceID         ServiceIdentifierDefault = "service_id"
	ServiceIdentifierDefaultServiceName       ServiceIdentifierDefault = "service_name"
	ServiceIdentifierDefaultServiceNameOrHost ServiceIdentifierDefault = "service_name_or_host"
)

func (e ServiceIdentifierDefault) ToPointer() *ServiceIdentifierDefault {
	return &e
}
func (e *ServiceIdentifierDefault) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_host":
		fallthrough
	case "service_id":
		fallthrough
	case "service_name":
		fallthrough
	case "service_name_or_host":
		*e = ServiceIdentifierDefault(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ServiceIdentifierDefault: %v", v)
	}
}

type TagStyle string

const (
	TagStyleDogstatsd TagStyle = "dogstatsd"
	TagStyleInfluxdb  TagStyle = "influxdb"
	TagStyleLibrato   TagStyle = "librato"
	TagStyleSignalfx  TagStyle = "signalfx"
)

func (e TagStyle) ToPointer() *TagStyle {
	return &e
}
func (e *TagStyle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dogstatsd":
		fallthrough
	case "influxdb":
		fallthrough
	case "librato":
		fallthrough
	case "signalfx":
		*e = TagStyle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TagStyle: %v", v)
	}
}

type WorkspaceIdentifierDefault string

const (
	WorkspaceIdentifierDefaultWorkspaceID   WorkspaceIdentifierDefault = "workspace_id"
	WorkspaceIdentifierDefaultWorkspaceName WorkspaceIdentifierDefault = "workspace_name"
)

func (e WorkspaceIdentifierDefault) ToPointer() *WorkspaceIdentifierDefault {
	return &e
}
func (e *WorkspaceIdentifierDefault) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "workspace_id":
		fallthrough
	case "workspace_name":
		*e = WorkspaceIdentifierDefault(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WorkspaceIdentifierDefault: %v", v)
	}
}

type StatsdPluginConfig struct {
	// List of status code ranges that are allowed to be logged in metrics.
	AllowStatusCodes          []string                   `json:"allow_status_codes,omitempty"`
	ConsumerIdentifierDefault *ConsumerIdentifierDefault `json:"consumer_identifier_default,omitempty"`
	FlushTimeout              *float64                   `json:"flush_timeout,omitempty"`
	// The IP address or hostname of StatsD server to send data to.
	Host             *string `json:"host,omitempty"`
	HostnameInPrefix *bool   `json:"hostname_in_prefix,omitempty"`
	// List of metrics to be logged.
	Metrics []StatsdPluginMetrics `json:"metrics,omitempty"`
	// The port of StatsD server to send data to.
	Port *int64 `json:"port,omitempty"`
	// String to prefix to each metric's name.
	Prefix                     *string                     `json:"prefix,omitempty"`
	Queue                      *StatsdPluginQueue          `json:"queue,omitempty"`
	QueueSize                  *int64                      `json:"queue_size,omitempty"`
	RetryCount                 *int64                      `json:"retry_count,omitempty"`
	ServiceIdentifierDefault   *ServiceIdentifierDefault   `json:"service_identifier_default,omitempty"`
	TagStyle                   *TagStyle                   `json:"tag_style,omitempty"`
	UDPPacketSize              *float64                    `json:"udp_packet_size,omitempty"`
	UseTCP                     *bool                       `json:"use_tcp,omitempty"`
	WorkspaceIdentifierDefault *WorkspaceIdentifierDefault `json:"workspace_identifier_default,omitempty"`
}

func (s *StatsdPluginConfig) GetAllowStatusCodes() []string {
	if s == nil {
		return nil
	}
	return s.AllowStatusCodes
}

func (s *StatsdPluginConfig) GetConsumerIdentifierDefault() *ConsumerIdentifierDefault {
	if s == nil {
		return nil
	}
	return s.ConsumerIdentifierDefault
}

func (s *StatsdPluginConfig) GetFlushTimeout() *float64 {
	if s == nil {
		return nil
	}
	return s.FlushTimeout
}

func (s *StatsdPluginConfig) GetHost() *string {
	if s == nil {
		return nil
	}
	return s.Host
}

func (s *StatsdPluginConfig) GetHostnameInPrefix() *bool {
	if s == nil {
		return nil
	}
	return s.HostnameInPrefix
}

func (s *StatsdPluginConfig) GetMetrics() []StatsdPluginMetrics {
	if s == nil {
		return nil
	}
	return s.Metrics
}

func (s *StatsdPluginConfig) GetPort() *int64 {
	if s == nil {
		return nil
	}
	return s.Port
}

func (s *StatsdPluginConfig) GetPrefix() *string {
	if s == nil {
		return nil
	}
	return s.Prefix
}

func (s *StatsdPluginConfig) GetQueue() *StatsdPluginQueue {
	if s == nil {
		return nil
	}
	return s.Queue
}

func (s *StatsdPluginConfig) GetQueueSize() *int64 {
	if s == nil {
		return nil
	}
	return s.QueueSize
}

func (s *StatsdPluginConfig) GetRetryCount() *int64 {
	if s == nil {
		return nil
	}
	return s.RetryCount
}

func (s *StatsdPluginConfig) GetServiceIdentifierDefault() *ServiceIdentifierDefault {
	if s == nil {
		return nil
	}
	return s.ServiceIdentifierDefault
}

func (s *StatsdPluginConfig) GetTagStyle() *TagStyle {
	if s == nil {
		return nil
	}
	return s.TagStyle
}

func (s *StatsdPluginConfig) GetUDPPacketSize() *float64 {
	if s == nil {
		return nil
	}
	return s.UDPPacketSize
}

func (s *StatsdPluginConfig) GetUseTCP() *bool {
	if s == nil {
		return nil
	}
	return s.UseTCP
}

func (s *StatsdPluginConfig) GetWorkspaceIdentifierDefault() *WorkspaceIdentifierDefault {
	if s == nil {
		return nil
	}
	return s.WorkspaceIdentifierDefault
}

// StatsdPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type StatsdPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (s *StatsdPluginConsumer) GetID() *string {
	if s == nil {
		return nil
	}
	return s.ID
}

type StatsdPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (s *StatsdPluginAfter) GetAccess() []string {
	if s == nil {
		return nil
	}
	return s.Access
}

type StatsdPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (s *StatsdPluginBefore) GetAccess() []string {
	if s == nil {
		return nil
	}
	return s.Access
}

type StatsdPluginOrdering struct {
	After  *StatsdPluginAfter  `json:"after,omitempty"`
	Before *StatsdPluginBefore `json:"before,omitempty"`
}

func (s *StatsdPluginOrdering) GetAfter() *StatsdPluginAfter {
	if s == nil {
		return nil
	}
	return s.After
}

func (s *StatsdPluginOrdering) GetBefore() *StatsdPluginBefore {
	if s == nil {
		return nil
	}
	return s.Before
}

type StatsdPluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

func (s *StatsdPluginPartials) GetID() *string {
	if s == nil {
		return nil
	}
	return s.ID
}

func (s *StatsdPluginPartials) GetName() *string {
	if s == nil {
		return nil
	}
	return s.Name
}

func (s *StatsdPluginPartials) GetPath() *string {
	if s == nil {
		return nil
	}
	return s.Path
}

// StatsdPluginProtocols - A string representing a protocol, such as HTTP or HTTPS.
type StatsdPluginProtocols string

const (
	StatsdPluginProtocolsGrpc           StatsdPluginProtocols = "grpc"
	StatsdPluginProtocolsGrpcs          StatsdPluginProtocols = "grpcs"
	StatsdPluginProtocolsHTTP           StatsdPluginProtocols = "http"
	StatsdPluginProtocolsHTTPS          StatsdPluginProtocols = "https"
	StatsdPluginProtocolsTCP            StatsdPluginProtocols = "tcp"
	StatsdPluginProtocolsTLS            StatsdPluginProtocols = "tls"
	StatsdPluginProtocolsTLSPassthrough StatsdPluginProtocols = "tls_passthrough"
	StatsdPluginProtocolsUDP            StatsdPluginProtocols = "udp"
	StatsdPluginProtocolsWs             StatsdPluginProtocols = "ws"
	StatsdPluginProtocolsWss            StatsdPluginProtocols = "wss"
)

func (e StatsdPluginProtocols) ToPointer() *StatsdPluginProtocols {
	return &e
}
func (e *StatsdPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = StatsdPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StatsdPluginProtocols: %v", v)
	}
}

// StatsdPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type StatsdPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (s *StatsdPluginRoute) GetID() *string {
	if s == nil {
		return nil
	}
	return s.ID
}

// StatsdPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type StatsdPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (s *StatsdPluginService) GetID() *string {
	if s == nil {
		return nil
	}
	return s.ID
}

type StatsdPlugin struct {
	Config *StatsdPluginConfig `json:"config,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer *StatsdPluginConsumer `json:"consumer,omitempty"`
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `json:"enabled,omitempty"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string               `json:"instance_name,omitempty"`
	name         string                `const:"statsd" json:"name"`
	Ordering     *StatsdPluginOrdering `json:"ordering,omitempty"`
	// A list of partials to be used by the plugin.
	Partials []StatsdPluginPartials `json:"partials,omitempty"`
	// A set of strings representing protocols.
	Protocols []StatsdPluginProtocols `json:"protocols,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *StatsdPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *StatsdPluginService `json:"service,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64 `json:"updated_at,omitempty"`
}

func (s StatsdPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *StatsdPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, []string{"name"}); err != nil {
		return err
	}
	return nil
}

func (s *StatsdPlugin) GetConfig() *StatsdPluginConfig {
	if s == nil {
		return nil
	}
	return s.Config
}

func (s *StatsdPlugin) GetConsumer() *StatsdPluginConsumer {
	if s == nil {
		return nil
	}
	return s.Consumer
}

func (s *StatsdPlugin) GetCreatedAt() *int64 {
	if s == nil {
		return nil
	}
	return s.CreatedAt
}

func (s *StatsdPlugin) GetEnabled() *bool {
	if s == nil {
		return nil
	}
	return s.Enabled
}

func (s *StatsdPlugin) GetID() *string {
	if s == nil {
		return nil
	}
	return s.ID
}

func (s *StatsdPlugin) GetInstanceName() *string {
	if s == nil {
		return nil
	}
	return s.InstanceName
}

func (s *StatsdPlugin) GetName() string {
	return "statsd"
}

func (s *StatsdPlugin) GetOrdering() *StatsdPluginOrdering {
	if s == nil {
		return nil
	}
	return s.Ordering
}

func (s *StatsdPlugin) GetPartials() []StatsdPluginPartials {
	if s == nil {
		return nil
	}
	return s.Partials
}

func (s *StatsdPlugin) GetProtocols() []StatsdPluginProtocols {
	if s == nil {
		return nil
	}
	return s.Protocols
}

func (s *StatsdPlugin) GetRoute() *StatsdPluginRoute {
	if s == nil {
		return nil
	}
	return s.Route
}

func (s *StatsdPlugin) GetService() *StatsdPluginService {
	if s == nil {
		return nil
	}
	return s.Service
}

func (s *StatsdPlugin) GetTags() []string {
	if s == nil {
		return nil
	}
	return s.Tags
}

func (s *StatsdPlugin) GetUpdatedAt() *int64 {
	if s == nil {
		return nil
	}
	return s.UpdatedAt
}
