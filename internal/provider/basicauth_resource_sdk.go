// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-kong-gateway/internal/provider/types"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/models/shared"
)

func (r *BasicAuthResourceModel) ToSharedBasicAuthWithoutParents(ctx context.Context) (*shared.BasicAuthWithoutParents, diag.Diagnostics) {
	var diags diag.Diagnostics

	var consumer *shared.BasicAuthWithoutParentsConsumer
	if r.Consumer != nil {
		id := new(string)
		if !r.Consumer.ID.IsUnknown() && !r.Consumer.ID.IsNull() {
			*id = r.Consumer.ID.ValueString()
		} else {
			id = nil
		}
		consumer = &shared.BasicAuthWithoutParentsConsumer{
			ID: id,
		}
	}
	createdAt := new(int64)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt = r.CreatedAt.ValueInt64()
	} else {
		createdAt = nil
	}
	id1 := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id1 = r.ID.ValueString()
	} else {
		id1 = nil
	}
	var password string
	password = r.Password.ValueString()

	tags := make([]string, 0, len(r.Tags))
	for _, tagsItem := range r.Tags {
		tags = append(tags, tagsItem.ValueString())
	}
	var username string
	username = r.Username.ValueString()

	out := shared.BasicAuthWithoutParents{
		Consumer:  consumer,
		CreatedAt: createdAt,
		ID:        id1,
		Password:  password,
		Tags:      tags,
		Username:  username,
	}

	return &out, diags
}

func (r *BasicAuthResourceModel) ToOperationsCreateBasicAuthWithConsumerRequest(ctx context.Context) (*operations.CreateBasicAuthWithConsumerRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var consumerID string
	consumerID = r.ConsumerID.ValueString()

	basicAuthWithoutParents, basicAuthWithoutParentsDiags := r.ToSharedBasicAuthWithoutParents(ctx)
	diags.Append(basicAuthWithoutParentsDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateBasicAuthWithConsumerRequest{
		ConsumerID:              consumerID,
		BasicAuthWithoutParents: *basicAuthWithoutParents,
	}

	return &out, diags
}

func (r *BasicAuthResourceModel) ToSharedBasicAuth(ctx context.Context) (*shared.BasicAuth, diag.Diagnostics) {
	var diags diag.Diagnostics

	var consumer *shared.BasicAuthConsumer
	if r.Consumer != nil {
		id := new(string)
		if !r.Consumer.ID.IsUnknown() && !r.Consumer.ID.IsNull() {
			*id = r.Consumer.ID.ValueString()
		} else {
			id = nil
		}
		consumer = &shared.BasicAuthConsumer{
			ID: id,
		}
	}
	createdAt := new(int64)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt = r.CreatedAt.ValueInt64()
	} else {
		createdAt = nil
	}
	id1 := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id1 = r.ID.ValueString()
	} else {
		id1 = nil
	}
	var password string
	password = r.Password.ValueString()

	tags := make([]string, 0, len(r.Tags))
	for _, tagsItem := range r.Tags {
		tags = append(tags, tagsItem.ValueString())
	}
	var username string
	username = r.Username.ValueString()

	out := shared.BasicAuth{
		Consumer:  consumer,
		CreatedAt: createdAt,
		ID:        id1,
		Password:  password,
		Tags:      tags,
		Username:  username,
	}

	return &out, diags
}

func (r *BasicAuthResourceModel) ToOperationsUpdateBasicAuthWithConsumerRequest(ctx context.Context) (*operations.UpdateBasicAuthWithConsumerRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var consumerID string
	consumerID = r.ConsumerID.ValueString()

	var basicAuthID string
	basicAuthID = r.ID.ValueString()

	basicAuth, basicAuthDiags := r.ToSharedBasicAuth(ctx)
	diags.Append(basicAuthDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateBasicAuthWithConsumerRequest{
		ConsumerID:  consumerID,
		BasicAuthID: basicAuthID,
		BasicAuth:   *basicAuth,
	}

	return &out, diags
}

func (r *BasicAuthResourceModel) ToOperationsGetBasicAuthWithConsumerRequest(ctx context.Context) (*operations.GetBasicAuthWithConsumerRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var consumerID string
	consumerID = r.ConsumerID.ValueString()

	var basicAuthID string
	basicAuthID = r.ID.ValueString()

	out := operations.GetBasicAuthWithConsumerRequest{
		ConsumerID:  consumerID,
		BasicAuthID: basicAuthID,
	}

	return &out, diags
}

func (r *BasicAuthResourceModel) ToOperationsDeleteBasicAuthWithConsumerRequest(ctx context.Context) (*operations.DeleteBasicAuthWithConsumerRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var consumerID string
	consumerID = r.ConsumerID.ValueString()

	var basicAuthID string
	basicAuthID = r.ID.ValueString()

	out := operations.DeleteBasicAuthWithConsumerRequest{
		ConsumerID:  consumerID,
		BasicAuthID: basicAuthID,
	}

	return &out, diags
}

func (r *BasicAuthResourceModel) RefreshFromSharedBasicAuth(ctx context.Context, resp *shared.BasicAuth) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Consumer == nil {
			r.Consumer = nil
		} else {
			r.Consumer = &tfTypes.ACLWithoutParentsConsumer{}
			r.Consumer.ID = types.StringPointerValue(resp.Consumer.ID)
		}
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.ID = types.StringPointerValue(resp.ID)
		r.Password = types.StringValue(resp.Password)
		r.Tags = make([]types.String, 0, len(resp.Tags))
		for _, v := range resp.Tags {
			r.Tags = append(r.Tags, types.StringValue(v))
		}
		r.Username = types.StringValue(resp.Username)
	}

	return diags
}
