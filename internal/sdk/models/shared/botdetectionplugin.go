// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/internal/utils"
)

type BotDetectionPluginConfig struct {
	// An array of regular expressions that should be allowed. The regular expressions will be checked against the `User-Agent` header.
	Allow []string `json:"allow,omitempty"`
	// An array of regular expressions that should be denied. The regular expressions will be checked against the `User-Agent` header.
	Deny []string `json:"deny,omitempty"`
}

func (b *BotDetectionPluginConfig) GetAllow() []string {
	if b == nil {
		return nil
	}
	return b.Allow
}

func (b *BotDetectionPluginConfig) GetDeny() []string {
	if b == nil {
		return nil
	}
	return b.Deny
}

type BotDetectionPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (b *BotDetectionPluginAfter) GetAccess() []string {
	if b == nil {
		return nil
	}
	return b.Access
}

type BotDetectionPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (b *BotDetectionPluginBefore) GetAccess() []string {
	if b == nil {
		return nil
	}
	return b.Access
}

type BotDetectionPluginOrdering struct {
	After  *BotDetectionPluginAfter  `json:"after,omitempty"`
	Before *BotDetectionPluginBefore `json:"before,omitempty"`
}

func (b *BotDetectionPluginOrdering) GetAfter() *BotDetectionPluginAfter {
	if b == nil {
		return nil
	}
	return b.After
}

func (b *BotDetectionPluginOrdering) GetBefore() *BotDetectionPluginBefore {
	if b == nil {
		return nil
	}
	return b.Before
}

type BotDetectionPluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

func (b *BotDetectionPluginPartials) GetID() *string {
	if b == nil {
		return nil
	}
	return b.ID
}

func (b *BotDetectionPluginPartials) GetName() *string {
	if b == nil {
		return nil
	}
	return b.Name
}

func (b *BotDetectionPluginPartials) GetPath() *string {
	if b == nil {
		return nil
	}
	return b.Path
}

type BotDetectionPluginProtocols string

const (
	BotDetectionPluginProtocolsGrpc  BotDetectionPluginProtocols = "grpc"
	BotDetectionPluginProtocolsGrpcs BotDetectionPluginProtocols = "grpcs"
	BotDetectionPluginProtocolsHTTP  BotDetectionPluginProtocols = "http"
	BotDetectionPluginProtocolsHTTPS BotDetectionPluginProtocols = "https"
)

func (e BotDetectionPluginProtocols) ToPointer() *BotDetectionPluginProtocols {
	return &e
}
func (e *BotDetectionPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		*e = BotDetectionPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BotDetectionPluginProtocols: %v", v)
	}
}

// BotDetectionPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type BotDetectionPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (b *BotDetectionPluginRoute) GetID() *string {
	if b == nil {
		return nil
	}
	return b.ID
}

// BotDetectionPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type BotDetectionPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (b *BotDetectionPluginService) GetID() *string {
	if b == nil {
		return nil
	}
	return b.ID
}

type BotDetectionPlugin struct {
	Config *BotDetectionPluginConfig `json:"config,omitempty"`
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `json:"enabled,omitempty"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string                     `json:"instance_name,omitempty"`
	name         string                      `const:"bot-detection" json:"name"`
	Ordering     *BotDetectionPluginOrdering `json:"ordering,omitempty"`
	// A list of partials to be used by the plugin.
	Partials []BotDetectionPluginPartials `json:"partials,omitempty"`
	// A set of strings representing HTTP protocols.
	Protocols []BotDetectionPluginProtocols `json:"protocols,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *BotDetectionPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *BotDetectionPluginService `json:"service,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64 `json:"updated_at,omitempty"`
}

func (b BotDetectionPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(b, "", false)
}

func (b *BotDetectionPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &b, "", false, []string{"name"}); err != nil {
		return err
	}
	return nil
}

func (b *BotDetectionPlugin) GetConfig() *BotDetectionPluginConfig {
	if b == nil {
		return nil
	}
	return b.Config
}

func (b *BotDetectionPlugin) GetCreatedAt() *int64 {
	if b == nil {
		return nil
	}
	return b.CreatedAt
}

func (b *BotDetectionPlugin) GetEnabled() *bool {
	if b == nil {
		return nil
	}
	return b.Enabled
}

func (b *BotDetectionPlugin) GetID() *string {
	if b == nil {
		return nil
	}
	return b.ID
}

func (b *BotDetectionPlugin) GetInstanceName() *string {
	if b == nil {
		return nil
	}
	return b.InstanceName
}

func (b *BotDetectionPlugin) GetName() string {
	return "bot-detection"
}

func (b *BotDetectionPlugin) GetOrdering() *BotDetectionPluginOrdering {
	if b == nil {
		return nil
	}
	return b.Ordering
}

func (b *BotDetectionPlugin) GetPartials() []BotDetectionPluginPartials {
	if b == nil {
		return nil
	}
	return b.Partials
}

func (b *BotDetectionPlugin) GetProtocols() []BotDetectionPluginProtocols {
	if b == nil {
		return nil
	}
	return b.Protocols
}

func (b *BotDetectionPlugin) GetRoute() *BotDetectionPluginRoute {
	if b == nil {
		return nil
	}
	return b.Route
}

func (b *BotDetectionPlugin) GetService() *BotDetectionPluginService {
	if b == nil {
		return nil
	}
	return b.Service
}

func (b *BotDetectionPlugin) GetTags() []string {
	if b == nil {
		return nil
	}
	return b.Tags
}

func (b *BotDetectionPlugin) GetUpdatedAt() *int64 {
	if b == nil {
		return nil
	}
	return b.UpdatedAt
}
