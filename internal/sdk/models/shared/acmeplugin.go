// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/internal/utils"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/types"
)

// AcmePluginAccountKey - The private key associated with the account.
type AcmePluginAccountKey struct {
	// The Key ID.
	KeyID string `json:"key_id"`
	// The ID of the key set to associate the Key ID with.
	KeySet *string `json:"key_set,omitempty"`
}

func (o *AcmePluginAccountKey) GetKeyID() string {
	if o == nil {
		return ""
	}
	return o.KeyID
}

func (o *AcmePluginAccountKey) GetKeySet() *string {
	if o == nil {
		return nil
	}
	return o.KeySet
}

// AcmePluginCertType - The certificate type to create. The possible values are `'rsa'` for RSA certificate or `'ecc'` for EC certificate.
type AcmePluginCertType string

const (
	AcmePluginCertTypeRsa AcmePluginCertType = "rsa"
	AcmePluginCertTypeEcc AcmePluginCertType = "ecc"
)

func (e AcmePluginCertType) ToPointer() *AcmePluginCertType {
	return &e
}
func (e *AcmePluginCertType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "rsa":
		fallthrough
	case "ecc":
		*e = AcmePluginCertType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AcmePluginCertType: %v", v)
	}
}

// AcmePluginRsaKeySize - RSA private key size for the certificate. The possible values are 2048, 3072, or 4096.
type AcmePluginRsaKeySize int64

const (
	AcmePluginRsaKeySizeTwoThousandAndFortyEight   AcmePluginRsaKeySize = 2048
	AcmePluginRsaKeySizeThreeThousandAndSeventyTwo AcmePluginRsaKeySize = 3072
	AcmePluginRsaKeySizeFourThousandAndNinetySix   AcmePluginRsaKeySize = 4096
)

func (e AcmePluginRsaKeySize) ToPointer() *AcmePluginRsaKeySize {
	return &e
}
func (e *AcmePluginRsaKeySize) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 2048:
		fallthrough
	case 3072:
		fallthrough
	case 4096:
		*e = AcmePluginRsaKeySize(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AcmePluginRsaKeySize: %v", v)
	}
}

// AcmePluginStorage - The backend storage type to use. The possible values are `'kong'`, `'shm'`, `'redis'`, `'consul'`, or `'vault'`. In DB-less mode, `'kong'` storage is unavailable. Note that `'shm'` storage does not persist during Kong restarts and does not work for Kong running on different machines, so consider using one of `'kong'`, `'redis'`, `'consul'`, or `'vault'` in production. Please refer to the Hybrid Mode sections below as well.
type AcmePluginStorage string

const (
	AcmePluginStorageKong   AcmePluginStorage = "kong"
	AcmePluginStorageShm    AcmePluginStorage = "shm"
	AcmePluginStorageRedis  AcmePluginStorage = "redis"
	AcmePluginStorageConsul AcmePluginStorage = "consul"
	AcmePluginStorageVault  AcmePluginStorage = "vault"
)

func (e AcmePluginStorage) ToPointer() *AcmePluginStorage {
	return &e
}
func (e *AcmePluginStorage) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "kong":
		fallthrough
	case "shm":
		fallthrough
	case "redis":
		fallthrough
	case "consul":
		fallthrough
	case "vault":
		*e = AcmePluginStorage(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AcmePluginStorage: %v", v)
	}
}

type AcmePluginConsul struct {
	// A string representing a host name, such as example.com.
	Host *string `json:"host,omitempty"`
	// Boolean representation of https.
	HTTPS *bool `json:"https,omitempty"`
	// KV prefix path.
	KvPath *string `json:"kv_path,omitempty"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port *int64 `json:"port,omitempty"`
	// Timeout in milliseconds.
	Timeout *float64 `json:"timeout,omitempty"`
	// Consul ACL token.
	Token *string `json:"token,omitempty"`
}

func (o *AcmePluginConsul) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *AcmePluginConsul) GetHTTPS() *bool {
	if o == nil {
		return nil
	}
	return o.HTTPS
}

func (o *AcmePluginConsul) GetKvPath() *string {
	if o == nil {
		return nil
	}
	return o.KvPath
}

func (o *AcmePluginConsul) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *AcmePluginConsul) GetTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.Timeout
}

func (o *AcmePluginConsul) GetToken() *string {
	if o == nil {
		return nil
	}
	return o.Token
}

// AcmePluginExtraOptions - Custom ACME Redis options
type AcmePluginExtraOptions struct {
	// A namespace to prepend to all keys stored in Redis.
	Namespace *string `json:"namespace,omitempty"`
	// The number of keys to return in Redis SCAN calls.
	ScanCount *float64 `json:"scan_count,omitempty"`
}

func (o *AcmePluginExtraOptions) GetNamespace() *string {
	if o == nil {
		return nil
	}
	return o.Namespace
}

func (o *AcmePluginExtraOptions) GetScanCount() *float64 {
	if o == nil {
		return nil
	}
	return o.ScanCount
}

type AcmePluginRedis struct {
	// Database to use for the Redis connection when using the `redis` strategy
	Database *int64 `json:"database,omitempty"`
	// Custom ACME Redis options
	ExtraOptions *AcmePluginExtraOptions `json:"extra_options,omitempty"`
	// A string representing a host name, such as example.com.
	Host *string `json:"host,omitempty"`
	// Password to use for Redis connections. If undefined, no AUTH commands are sent to Redis.
	Password *string `json:"password,omitempty"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port *int64 `json:"port,omitempty"`
	// A string representing an SNI (server name indication) value for TLS.
	ServerName *string `json:"server_name,omitempty"`
	// If set to true, uses SSL to connect to Redis.
	Ssl *bool `json:"ssl,omitempty"`
	// If set to true, verifies the validity of the server SSL certificate. If setting this parameter, also configure `lua_ssl_trusted_certificate` in `kong.conf` to specify the CA (or server) certificate used by your Redis server. You may also need to configure `lua_ssl_verify_depth` accordingly.
	SslVerify *bool `json:"ssl_verify,omitempty"`
	// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
	Timeout *int64 `json:"timeout,omitempty"`
	// Username to use for Redis connections. If undefined, ACL authentication won't be performed. This requires Redis v6.0.0+. To be compatible with Redis v5.x.y, you can set it to `default`.
	Username *string `json:"username,omitempty"`
}

func (o *AcmePluginRedis) GetDatabase() *int64 {
	if o == nil {
		return nil
	}
	return o.Database
}

func (o *AcmePluginRedis) GetExtraOptions() *AcmePluginExtraOptions {
	if o == nil {
		return nil
	}
	return o.ExtraOptions
}

func (o *AcmePluginRedis) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *AcmePluginRedis) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *AcmePluginRedis) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *AcmePluginRedis) GetServerName() *string {
	if o == nil {
		return nil
	}
	return o.ServerName
}

func (o *AcmePluginRedis) GetSsl() *bool {
	if o == nil {
		return nil
	}
	return o.Ssl
}

func (o *AcmePluginRedis) GetSslVerify() *bool {
	if o == nil {
		return nil
	}
	return o.SslVerify
}

func (o *AcmePluginRedis) GetTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.Timeout
}

func (o *AcmePluginRedis) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

type AcmePluginShm struct {
	// Name of shared memory zone used for Kong API gateway storage
	ShmName *string `json:"shm_name,omitempty"`
}

func (o *AcmePluginShm) GetShmName() *string {
	if o == nil {
		return nil
	}
	return o.ShmName
}

// AcmePluginAuthMethod - Auth Method, default to token, can be 'token' or 'kubernetes'.
type AcmePluginAuthMethod string

const (
	AcmePluginAuthMethodToken      AcmePluginAuthMethod = "token"
	AcmePluginAuthMethodKubernetes AcmePluginAuthMethod = "kubernetes"
)

func (e AcmePluginAuthMethod) ToPointer() *AcmePluginAuthMethod {
	return &e
}
func (e *AcmePluginAuthMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "token":
		fallthrough
	case "kubernetes":
		*e = AcmePluginAuthMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AcmePluginAuthMethod: %v", v)
	}
}

type AcmePluginVault struct {
	// Auth Method, default to token, can be 'token' or 'kubernetes'.
	AuthMethod *AcmePluginAuthMethod `json:"auth_method,omitempty"`
	// Vault's authentication path to use.
	AuthPath *string `json:"auth_path,omitempty"`
	// The role to try and assign.
	AuthRole *string `json:"auth_role,omitempty"`
	// A string representing a host name, such as example.com.
	Host *string `json:"host,omitempty"`
	// Boolean representation of https.
	HTTPS *bool `json:"https,omitempty"`
	// The path to the JWT.
	JwtPath *string `json:"jwt_path,omitempty"`
	// KV prefix path.
	KvPath *string `json:"kv_path,omitempty"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port *int64 `json:"port,omitempty"`
	// Timeout in milliseconds.
	Timeout *float64 `json:"timeout,omitempty"`
	// SNI used in request, default to host if omitted.
	TLSServerName *string `json:"tls_server_name,omitempty"`
	// Turn on TLS verification.
	TLSVerify *bool `json:"tls_verify,omitempty"`
	// Consul ACL token.
	Token *string `json:"token,omitempty"`
}

func (o *AcmePluginVault) GetAuthMethod() *AcmePluginAuthMethod {
	if o == nil {
		return nil
	}
	return o.AuthMethod
}

func (o *AcmePluginVault) GetAuthPath() *string {
	if o == nil {
		return nil
	}
	return o.AuthPath
}

func (o *AcmePluginVault) GetAuthRole() *string {
	if o == nil {
		return nil
	}
	return o.AuthRole
}

func (o *AcmePluginVault) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *AcmePluginVault) GetHTTPS() *bool {
	if o == nil {
		return nil
	}
	return o.HTTPS
}

func (o *AcmePluginVault) GetJwtPath() *string {
	if o == nil {
		return nil
	}
	return o.JwtPath
}

func (o *AcmePluginVault) GetKvPath() *string {
	if o == nil {
		return nil
	}
	return o.KvPath
}

func (o *AcmePluginVault) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *AcmePluginVault) GetTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.Timeout
}

func (o *AcmePluginVault) GetTLSServerName() *string {
	if o == nil {
		return nil
	}
	return o.TLSServerName
}

func (o *AcmePluginVault) GetTLSVerify() *bool {
	if o == nil {
		return nil
	}
	return o.TLSVerify
}

func (o *AcmePluginVault) GetToken() *string {
	if o == nil {
		return nil
	}
	return o.Token
}

type AcmePluginStorageConfig struct {
	Consul *AcmePluginConsul `json:"consul,omitempty"`
	Kong   map[string]any    `json:"kong,omitempty"`
	Redis  *AcmePluginRedis  `json:"redis,omitempty"`
	Shm    *AcmePluginShm    `json:"shm,omitempty"`
	Vault  *AcmePluginVault  `json:"vault,omitempty"`
}

func (o *AcmePluginStorageConfig) GetConsul() *AcmePluginConsul {
	if o == nil {
		return nil
	}
	return o.Consul
}

func (o *AcmePluginStorageConfig) GetKong() map[string]any {
	if o == nil {
		return nil
	}
	return o.Kong
}

func (o *AcmePluginStorageConfig) GetRedis() *AcmePluginRedis {
	if o == nil {
		return nil
	}
	return o.Redis
}

func (o *AcmePluginStorageConfig) GetShm() *AcmePluginShm {
	if o == nil {
		return nil
	}
	return o.Shm
}

func (o *AcmePluginStorageConfig) GetVault() *AcmePluginVault {
	if o == nil {
		return nil
	}
	return o.Vault
}

type AcmePluginConfig struct {
	// The account identifier. Can be reused in a different plugin instance.
	AccountEmail *string `json:"account_email,omitempty"`
	// The private key associated with the account.
	AccountKey *AcmePluginAccountKey `json:"account_key,omitempty"`
	// If set to `true`, the plugin allows all domains and ignores any values in the `domains` list.
	AllowAnyDomain *bool `json:"allow_any_domain,omitempty"`
	// A string representing a URL, such as https://example.com/path/to/resource?q=search.
	APIURI *string `json:"api_uri,omitempty"`
	// The certificate type to create. The possible values are `'rsa'` for RSA certificate or `'ecc'` for EC certificate.
	CertType *AcmePluginCertType `json:"cert_type,omitempty"`
	// An array of strings representing hosts. A valid host is a string containing one or more labels separated by periods, with at most one wildcard label ('*')
	Domains []string `json:"domains,omitempty"`
	// External account binding (EAB) base64-encoded URL string of the HMAC key. You usually don't need to set this unless it is explicitly required by the CA.
	EabHmacKey *string `json:"eab_hmac_key,omitempty"`
	// External account binding (EAB) key id. You usually don't need to set this unless it is explicitly required by the CA.
	EabKid *string `json:"eab_kid,omitempty"`
	// A boolean value that controls whether to include the IPv4 address in the common name field of generated certificates.
	EnableIpv4CommonName *bool `json:"enable_ipv4_common_name,omitempty"`
	// Minutes to wait for each domain that fails to create a certificate. This applies to both a
	// new certificate and a renewal certificate.
	FailBackoffMinutes *float64 `json:"fail_backoff_minutes,omitempty"`
	// A string value that specifies the preferred certificate chain to use when generating certificates.
	PreferredChain *string `json:"preferred_chain,omitempty"`
	// Days remaining to renew the certificate before it expires.
	RenewThresholdDays *float64 `json:"renew_threshold_days,omitempty"`
	// RSA private key size for the certificate. The possible values are 2048, 3072, or 4096.
	RsaKeySize *AcmePluginRsaKeySize `json:"rsa_key_size,omitempty"`
	// The backend storage type to use. The possible values are `'kong'`, `'shm'`, `'redis'`, `'consul'`, or `'vault'`. In DB-less mode, `'kong'` storage is unavailable. Note that `'shm'` storage does not persist during Kong restarts and does not work for Kong running on different machines, so consider using one of `'kong'`, `'redis'`, `'consul'`, or `'vault'` in production. Please refer to the Hybrid Mode sections below as well.
	Storage       *AcmePluginStorage       `json:"storage,omitempty"`
	StorageConfig *AcmePluginStorageConfig `json:"storage_config,omitempty"`
	// If you are using Let's Encrypt, you must set this to `true` to agree the terms of service.
	TosAccepted *bool `json:"tos_accepted,omitempty"`
}

func (o *AcmePluginConfig) GetAccountEmail() *string {
	if o == nil {
		return nil
	}
	return o.AccountEmail
}

func (o *AcmePluginConfig) GetAccountKey() *AcmePluginAccountKey {
	if o == nil {
		return nil
	}
	return o.AccountKey
}

func (o *AcmePluginConfig) GetAllowAnyDomain() *bool {
	if o == nil {
		return nil
	}
	return o.AllowAnyDomain
}

func (o *AcmePluginConfig) GetAPIURI() *string {
	if o == nil {
		return nil
	}
	return o.APIURI
}

func (o *AcmePluginConfig) GetCertType() *AcmePluginCertType {
	if o == nil {
		return nil
	}
	return o.CertType
}

func (o *AcmePluginConfig) GetDomains() []string {
	if o == nil {
		return nil
	}
	return o.Domains
}

func (o *AcmePluginConfig) GetEabHmacKey() *string {
	if o == nil {
		return nil
	}
	return o.EabHmacKey
}

func (o *AcmePluginConfig) GetEabKid() *string {
	if o == nil {
		return nil
	}
	return o.EabKid
}

func (o *AcmePluginConfig) GetEnableIpv4CommonName() *bool {
	if o == nil {
		return nil
	}
	return o.EnableIpv4CommonName
}

func (o *AcmePluginConfig) GetFailBackoffMinutes() *float64 {
	if o == nil {
		return nil
	}
	return o.FailBackoffMinutes
}

func (o *AcmePluginConfig) GetPreferredChain() *string {
	if o == nil {
		return nil
	}
	return o.PreferredChain
}

func (o *AcmePluginConfig) GetRenewThresholdDays() *float64 {
	if o == nil {
		return nil
	}
	return o.RenewThresholdDays
}

func (o *AcmePluginConfig) GetRsaKeySize() *AcmePluginRsaKeySize {
	if o == nil {
		return nil
	}
	return o.RsaKeySize
}

func (o *AcmePluginConfig) GetStorage() *AcmePluginStorage {
	if o == nil {
		return nil
	}
	return o.Storage
}

func (o *AcmePluginConfig) GetStorageConfig() *AcmePluginStorageConfig {
	if o == nil {
		return nil
	}
	return o.StorageConfig
}

func (o *AcmePluginConfig) GetTosAccepted() *bool {
	if o == nil {
		return nil
	}
	return o.TosAccepted
}

type AcmePluginProtocols string

const (
	AcmePluginProtocolsGrpc           AcmePluginProtocols = "grpc"
	AcmePluginProtocolsGrpcs          AcmePluginProtocols = "grpcs"
	AcmePluginProtocolsHTTP           AcmePluginProtocols = "http"
	AcmePluginProtocolsHTTPS          AcmePluginProtocols = "https"
	AcmePluginProtocolsTCP            AcmePluginProtocols = "tcp"
	AcmePluginProtocolsTLS            AcmePluginProtocols = "tls"
	AcmePluginProtocolsTLSPassthrough AcmePluginProtocols = "tls_passthrough"
	AcmePluginProtocolsUDP            AcmePluginProtocols = "udp"
	AcmePluginProtocolsWs             AcmePluginProtocols = "ws"
	AcmePluginProtocolsWss            AcmePluginProtocols = "wss"
)

func (e AcmePluginProtocols) ToPointer() *AcmePluginProtocols {
	return &e
}
func (e *AcmePluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = AcmePluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AcmePluginProtocols: %v", v)
	}
}

// AcmePluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type AcmePluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *AcmePluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type AcmePluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *AcmePluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// AcmePluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type AcmePluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *AcmePluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// AcmePluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type AcmePluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *AcmePluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type AcmePlugin struct {
	Config *AcmePluginConfig `json:"config,omitempty"`
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool   `json:"enabled,omitempty"`
	ID           *string `json:"id,omitempty"`
	InstanceName *string `json:"instance_name,omitempty"`
	name         *string `const:"acme" json:"name,omitempty"`
	Ordering     any     `json:"ordering,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []AcmePluginProtocols `json:"protocols,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64 `json:"updated_at,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *AcmePluginConsumer      `json:"consumer,omitempty"`
	ConsumerGroup *AcmePluginConsumerGroup `json:"consumer_group,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *AcmePluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *AcmePluginService `json:"service,omitempty"`
}

func (a AcmePlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AcmePlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AcmePlugin) GetConfig() *AcmePluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *AcmePlugin) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *AcmePlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *AcmePlugin) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AcmePlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *AcmePlugin) GetName() *string {
	return types.String("acme")
}

func (o *AcmePlugin) GetOrdering() any {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *AcmePlugin) GetProtocols() []AcmePluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *AcmePlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *AcmePlugin) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *AcmePlugin) GetConsumer() *AcmePluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *AcmePlugin) GetConsumerGroup() *AcmePluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *AcmePlugin) GetRoute() *AcmePluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *AcmePlugin) GetService() *AcmePluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
