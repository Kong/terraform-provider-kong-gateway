// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/internal/utils"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/types"
)

type CorsPluginMethods string

const (
	CorsPluginMethodsGet     CorsPluginMethods = "GET"
	CorsPluginMethodsHead    CorsPluginMethods = "HEAD"
	CorsPluginMethodsPut     CorsPluginMethods = "PUT"
	CorsPluginMethodsPatch   CorsPluginMethods = "PATCH"
	CorsPluginMethodsPost    CorsPluginMethods = "POST"
	CorsPluginMethodsDelete  CorsPluginMethods = "DELETE"
	CorsPluginMethodsOptions CorsPluginMethods = "OPTIONS"
	CorsPluginMethodsTrace   CorsPluginMethods = "TRACE"
	CorsPluginMethodsConnect CorsPluginMethods = "CONNECT"
)

func (e CorsPluginMethods) ToPointer() *CorsPluginMethods {
	return &e
}
func (e *CorsPluginMethods) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GET":
		fallthrough
	case "HEAD":
		fallthrough
	case "PUT":
		fallthrough
	case "PATCH":
		fallthrough
	case "POST":
		fallthrough
	case "DELETE":
		fallthrough
	case "OPTIONS":
		fallthrough
	case "TRACE":
		fallthrough
	case "CONNECT":
		*e = CorsPluginMethods(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CorsPluginMethods: %v", v)
	}
}

type CorsPluginConfig struct {
	// Flag to determine whether the `Access-Control-Allow-Credentials` header should be sent with `true` as the value.
	Credentials *bool `json:"credentials,omitempty"`
	// Value for the `Access-Control-Expose-Headers` header. If not specified, no custom headers are exposed.
	ExposedHeaders []string `json:"exposed_headers,omitempty"`
	// Value for the `Access-Control-Allow-Headers` header.
	Headers []string `json:"headers,omitempty"`
	// Indicates how long the results of the preflight request can be cached, in `seconds`.
	MaxAge *float64 `json:"max_age,omitempty"`
	// 'Value for the `Access-Control-Allow-Methods` header. Available options include `GET`, `HEAD`, `PUT`, `PATCH`, `POST`, `DELETE`, `OPTIONS`, `TRACE`, `CONNECT`. By default, all options are allowed.'
	Methods []CorsPluginMethods `json:"methods,omitempty"`
	// List of allowed domains for the `Access-Control-Allow-Origin` header. If you want to allow all origins, add `*` as a single value to this configuration field. The accepted values can either be flat strings or PCRE regexes.
	Origins []string `json:"origins,omitempty"`
	// A boolean value that instructs the plugin to proxy the `OPTIONS` preflight request to the Upstream service.
	PreflightContinue *bool `json:"preflight_continue,omitempty"`
	// Flag to determine whether the `Access-Control-Allow-Private-Network` header should be sent with `true` as the value.
	PrivateNetwork *bool `json:"private_network,omitempty"`
}

func (o *CorsPluginConfig) GetCredentials() *bool {
	if o == nil {
		return nil
	}
	return o.Credentials
}

func (o *CorsPluginConfig) GetExposedHeaders() []string {
	if o == nil {
		return nil
	}
	return o.ExposedHeaders
}

func (o *CorsPluginConfig) GetHeaders() []string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *CorsPluginConfig) GetMaxAge() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxAge
}

func (o *CorsPluginConfig) GetMethods() []CorsPluginMethods {
	if o == nil {
		return nil
	}
	return o.Methods
}

func (o *CorsPluginConfig) GetOrigins() []string {
	if o == nil {
		return nil
	}
	return o.Origins
}

func (o *CorsPluginConfig) GetPreflightContinue() *bool {
	if o == nil {
		return nil
	}
	return o.PreflightContinue
}

func (o *CorsPluginConfig) GetPrivateNetwork() *bool {
	if o == nil {
		return nil
	}
	return o.PrivateNetwork
}

type CorsPluginProtocols string

const (
	CorsPluginProtocolsGrpc           CorsPluginProtocols = "grpc"
	CorsPluginProtocolsGrpcs          CorsPluginProtocols = "grpcs"
	CorsPluginProtocolsHTTP           CorsPluginProtocols = "http"
	CorsPluginProtocolsHTTPS          CorsPluginProtocols = "https"
	CorsPluginProtocolsTCP            CorsPluginProtocols = "tcp"
	CorsPluginProtocolsTLS            CorsPluginProtocols = "tls"
	CorsPluginProtocolsTLSPassthrough CorsPluginProtocols = "tls_passthrough"
	CorsPluginProtocolsUDP            CorsPluginProtocols = "udp"
	CorsPluginProtocolsWs             CorsPluginProtocols = "ws"
	CorsPluginProtocolsWss            CorsPluginProtocols = "wss"
)

func (e CorsPluginProtocols) ToPointer() *CorsPluginProtocols {
	return &e
}
func (e *CorsPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = CorsPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CorsPluginProtocols: %v", v)
	}
}

// CorsPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type CorsPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *CorsPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CorsPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *CorsPluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CorsPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type CorsPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *CorsPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CorsPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type CorsPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *CorsPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CorsPlugin struct {
	Config *CorsPluginConfig `json:"config,omitempty"`
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool   `json:"enabled,omitempty"`
	ID           *string `json:"id,omitempty"`
	InstanceName *string `json:"instance_name,omitempty"`
	name         *string `const:"cors" json:"name,omitempty"`
	Ordering     any     `json:"ordering,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []CorsPluginProtocols `json:"protocols,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64 `json:"updated_at,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *CorsPluginConsumer      `json:"consumer,omitempty"`
	ConsumerGroup *CorsPluginConsumerGroup `json:"consumer_group,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *CorsPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *CorsPluginService `json:"service,omitempty"`
}

func (c CorsPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CorsPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CorsPlugin) GetConfig() *CorsPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *CorsPlugin) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CorsPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *CorsPlugin) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *CorsPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *CorsPlugin) GetName() *string {
	return types.String("cors")
}

func (o *CorsPlugin) GetOrdering() any {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *CorsPlugin) GetProtocols() []CorsPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *CorsPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *CorsPlugin) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *CorsPlugin) GetConsumer() *CorsPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *CorsPlugin) GetConsumerGroup() *CorsPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *CorsPlugin) GetRoute() *CorsPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *CorsPlugin) GetService() *CorsPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
