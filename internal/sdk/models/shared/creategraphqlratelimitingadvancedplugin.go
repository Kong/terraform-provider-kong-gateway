// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/internal/utils"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/types"
)

// CostStrategy - Strategy to use to evaluate query costs. Either `default` or `node_quantifier`.
type CostStrategy string

const (
	CostStrategyDefault        CostStrategy = "default"
	CostStrategyNodeQuantifier CostStrategy = "node_quantifier"
)

func (e CostStrategy) ToPointer() *CostStrategy {
	return &e
}
func (e *CostStrategy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "default":
		fallthrough
	case "node_quantifier":
		*e = CostStrategy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CostStrategy: %v", v)
	}
}

// Identifier - How to define the rate limit key. Can be `ip`, `credential`, `consumer`.
type Identifier string

const (
	IdentifierIP         Identifier = "ip"
	IdentifierCredential Identifier = "credential"
	IdentifierConsumer   Identifier = "consumer"
)

func (e Identifier) ToPointer() *Identifier {
	return &e
}
func (e *Identifier) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ip":
		fallthrough
	case "credential":
		fallthrough
	case "consumer":
		*e = Identifier(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Identifier: %v", v)
	}
}

type CreateGraphqlRateLimitingAdvancedPluginClusterNodes struct {
	// A string representing a host name, such as example.com.
	IP *string `json:"ip,omitempty"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port *int64 `json:"port,omitempty"`
}

func (o *CreateGraphqlRateLimitingAdvancedPluginClusterNodes) GetIP() *string {
	if o == nil {
		return nil
	}
	return o.IP
}

func (o *CreateGraphqlRateLimitingAdvancedPluginClusterNodes) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

type CreateGraphqlRateLimitingAdvancedPluginSentinelNodes struct {
	// A string representing a host name, such as example.com.
	Host *string `json:"host,omitempty"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port *int64 `json:"port,omitempty"`
}

func (o *CreateGraphqlRateLimitingAdvancedPluginSentinelNodes) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *CreateGraphqlRateLimitingAdvancedPluginSentinelNodes) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

// CreateGraphqlRateLimitingAdvancedPluginSentinelRole - Sentinel role to use for Redis connections when the `redis` strategy is defined. Defining this value implies using Redis Sentinel.
type CreateGraphqlRateLimitingAdvancedPluginSentinelRole string

const (
	CreateGraphqlRateLimitingAdvancedPluginSentinelRoleMaster CreateGraphqlRateLimitingAdvancedPluginSentinelRole = "master"
	CreateGraphqlRateLimitingAdvancedPluginSentinelRoleSlave  CreateGraphqlRateLimitingAdvancedPluginSentinelRole = "slave"
	CreateGraphqlRateLimitingAdvancedPluginSentinelRoleAny    CreateGraphqlRateLimitingAdvancedPluginSentinelRole = "any"
)

func (e CreateGraphqlRateLimitingAdvancedPluginSentinelRole) ToPointer() *CreateGraphqlRateLimitingAdvancedPluginSentinelRole {
	return &e
}
func (e *CreateGraphqlRateLimitingAdvancedPluginSentinelRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "master":
		fallthrough
	case "slave":
		fallthrough
	case "any":
		*e = CreateGraphqlRateLimitingAdvancedPluginSentinelRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateGraphqlRateLimitingAdvancedPluginSentinelRole: %v", v)
	}
}

type CreateGraphqlRateLimitingAdvancedPluginRedis struct {
	// Maximum retry attempts for redirection.
	ClusterMaxRedirections *int64 `json:"cluster_max_redirections,omitempty"`
	// Cluster addresses to use for Redis connections when the `redis` strategy is defined. Defining this field implies using a Redis Cluster. The minimum length of the array is 1 element.
	ClusterNodes []CreateGraphqlRateLimitingAdvancedPluginClusterNodes `json:"cluster_nodes,omitempty"`
	// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
	ConnectTimeout *int64 `json:"connect_timeout,omitempty"`
	// If the connection to Redis is proxied (e.g. Envoy), set it `true`. Set the `host` and `port` to point to the proxy address.
	ConnectionIsProxied *bool `json:"connection_is_proxied,omitempty"`
	// Database to use for the Redis connection when using the `redis` strategy
	Database *int64 `json:"database,omitempty"`
	// A string representing a host name, such as example.com.
	Host *string `json:"host,omitempty"`
	// Limits the total number of opened connections for a pool. If the connection pool is full, connection queues above the limit go into the backlog queue. If the backlog queue is full, subsequent connect operations fail and return `nil`. Queued operations (subject to set timeouts) resume once the number of connections in the pool is less than `keepalive_pool_size`. If latency is high or throughput is low, try increasing this value. Empirically, this value is larger than `keepalive_pool_size`.
	KeepaliveBacklog *int64 `json:"keepalive_backlog,omitempty"`
	// The size limit for every cosocket connection pool associated with every remote server, per worker process. If neither `keepalive_pool_size` nor `keepalive_backlog` is specified, no pool is created. If `keepalive_pool_size` isn't specified but `keepalive_backlog` is specified, then the pool uses the default value. Try to increase (e.g. 512) this value if latency is high or throughput is low.
	KeepalivePoolSize *int64 `json:"keepalive_pool_size,omitempty"`
	// Password to use for Redis connections. If undefined, no AUTH commands are sent to Redis.
	Password *string `json:"password,omitempty"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port *int64 `json:"port,omitempty"`
	// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
	ReadTimeout *int64 `json:"read_timeout,omitempty"`
	// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
	SendTimeout *int64 `json:"send_timeout,omitempty"`
	// Sentinel master to use for Redis connections. Defining this value implies using Redis Sentinel.
	SentinelMaster *string `json:"sentinel_master,omitempty"`
	// Sentinel node addresses to use for Redis connections when the `redis` strategy is defined. Defining this field implies using a Redis Sentinel. The minimum length of the array is 1 element.
	SentinelNodes []CreateGraphqlRateLimitingAdvancedPluginSentinelNodes `json:"sentinel_nodes,omitempty"`
	// Sentinel password to authenticate with a Redis Sentinel instance. If undefined, no AUTH commands are sent to Redis Sentinels.
	SentinelPassword *string `json:"sentinel_password,omitempty"`
	// Sentinel role to use for Redis connections when the `redis` strategy is defined. Defining this value implies using Redis Sentinel.
	SentinelRole *CreateGraphqlRateLimitingAdvancedPluginSentinelRole `json:"sentinel_role,omitempty"`
	// Sentinel username to authenticate with a Redis Sentinel instance. If undefined, ACL authentication won't be performed. This requires Redis v6.2.0+.
	SentinelUsername *string `json:"sentinel_username,omitempty"`
	// A string representing an SNI (server name indication) value for TLS.
	ServerName *string `json:"server_name,omitempty"`
	// If set to true, uses SSL to connect to Redis.
	Ssl *bool `json:"ssl,omitempty"`
	// If set to true, verifies the validity of the server SSL certificate. If setting this parameter, also configure `lua_ssl_trusted_certificate` in `kong.conf` to specify the CA (or server) certificate used by your Redis server. You may also need to configure `lua_ssl_verify_depth` accordingly.
	SslVerify *bool `json:"ssl_verify,omitempty"`
	// Username to use for Redis connections. If undefined, ACL authentication won't be performed. This requires Redis v6.0.0+. To be compatible with Redis v5.x.y, you can set it to `default`.
	Username *string `json:"username,omitempty"`
}

func (o *CreateGraphqlRateLimitingAdvancedPluginRedis) GetClusterMaxRedirections() *int64 {
	if o == nil {
		return nil
	}
	return o.ClusterMaxRedirections
}

func (o *CreateGraphqlRateLimitingAdvancedPluginRedis) GetClusterNodes() []CreateGraphqlRateLimitingAdvancedPluginClusterNodes {
	if o == nil {
		return nil
	}
	return o.ClusterNodes
}

func (o *CreateGraphqlRateLimitingAdvancedPluginRedis) GetConnectTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.ConnectTimeout
}

func (o *CreateGraphqlRateLimitingAdvancedPluginRedis) GetConnectionIsProxied() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectionIsProxied
}

func (o *CreateGraphqlRateLimitingAdvancedPluginRedis) GetDatabase() *int64 {
	if o == nil {
		return nil
	}
	return o.Database
}

func (o *CreateGraphqlRateLimitingAdvancedPluginRedis) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *CreateGraphqlRateLimitingAdvancedPluginRedis) GetKeepaliveBacklog() *int64 {
	if o == nil {
		return nil
	}
	return o.KeepaliveBacklog
}

func (o *CreateGraphqlRateLimitingAdvancedPluginRedis) GetKeepalivePoolSize() *int64 {
	if o == nil {
		return nil
	}
	return o.KeepalivePoolSize
}

func (o *CreateGraphqlRateLimitingAdvancedPluginRedis) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *CreateGraphqlRateLimitingAdvancedPluginRedis) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *CreateGraphqlRateLimitingAdvancedPluginRedis) GetReadTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.ReadTimeout
}

func (o *CreateGraphqlRateLimitingAdvancedPluginRedis) GetSendTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.SendTimeout
}

func (o *CreateGraphqlRateLimitingAdvancedPluginRedis) GetSentinelMaster() *string {
	if o == nil {
		return nil
	}
	return o.SentinelMaster
}

func (o *CreateGraphqlRateLimitingAdvancedPluginRedis) GetSentinelNodes() []CreateGraphqlRateLimitingAdvancedPluginSentinelNodes {
	if o == nil {
		return nil
	}
	return o.SentinelNodes
}

func (o *CreateGraphqlRateLimitingAdvancedPluginRedis) GetSentinelPassword() *string {
	if o == nil {
		return nil
	}
	return o.SentinelPassword
}

func (o *CreateGraphqlRateLimitingAdvancedPluginRedis) GetSentinelRole() *CreateGraphqlRateLimitingAdvancedPluginSentinelRole {
	if o == nil {
		return nil
	}
	return o.SentinelRole
}

func (o *CreateGraphqlRateLimitingAdvancedPluginRedis) GetSentinelUsername() *string {
	if o == nil {
		return nil
	}
	return o.SentinelUsername
}

func (o *CreateGraphqlRateLimitingAdvancedPluginRedis) GetServerName() *string {
	if o == nil {
		return nil
	}
	return o.ServerName
}

func (o *CreateGraphqlRateLimitingAdvancedPluginRedis) GetSsl() *bool {
	if o == nil {
		return nil
	}
	return o.Ssl
}

func (o *CreateGraphqlRateLimitingAdvancedPluginRedis) GetSslVerify() *bool {
	if o == nil {
		return nil
	}
	return o.SslVerify
}

func (o *CreateGraphqlRateLimitingAdvancedPluginRedis) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

// CreateGraphqlRateLimitingAdvancedPluginStrategy - The rate-limiting strategy to use for retrieving and incrementing the limits.
type CreateGraphqlRateLimitingAdvancedPluginStrategy string

const (
	CreateGraphqlRateLimitingAdvancedPluginStrategyCluster CreateGraphqlRateLimitingAdvancedPluginStrategy = "cluster"
	CreateGraphqlRateLimitingAdvancedPluginStrategyRedis   CreateGraphqlRateLimitingAdvancedPluginStrategy = "redis"
)

func (e CreateGraphqlRateLimitingAdvancedPluginStrategy) ToPointer() *CreateGraphqlRateLimitingAdvancedPluginStrategy {
	return &e
}
func (e *CreateGraphqlRateLimitingAdvancedPluginStrategy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cluster":
		fallthrough
	case "redis":
		*e = CreateGraphqlRateLimitingAdvancedPluginStrategy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateGraphqlRateLimitingAdvancedPluginStrategy: %v", v)
	}
}

// WindowType - Sets the time window to either `sliding` or `fixed`.
type WindowType string

const (
	WindowTypeFixed   WindowType = "fixed"
	WindowTypeSliding WindowType = "sliding"
)

func (e WindowType) ToPointer() *WindowType {
	return &e
}
func (e *WindowType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fixed":
		fallthrough
	case "sliding":
		*e = WindowType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WindowType: %v", v)
	}
}

type CreateGraphqlRateLimitingAdvancedPluginConfig struct {
	// Strategy to use to evaluate query costs. Either `default` or `node_quantifier`.
	CostStrategy *CostStrategy `json:"cost_strategy,omitempty"`
	// The shared dictionary where counters will be stored until the next sync cycle.
	DictionaryName *string `json:"dictionary_name,omitempty"`
	// Optionally hide informative response headers. Available options: `true` or `false`.
	HideClientHeaders *bool `json:"hide_client_headers,omitempty"`
	// How to define the rate limit key. Can be `ip`, `credential`, `consumer`.
	Identifier *Identifier `json:"identifier,omitempty"`
	// One or more requests-per-window limits to apply.
	Limit []float64 `json:"limit,omitempty"`
	// A defined maximum cost per query. 0 means unlimited.
	MaxCost *float64 `json:"max_cost,omitempty"`
	// The rate limiting namespace to use for this plugin instance. This namespace is used to share rate limiting counters across different instances. If it is not provided, a random UUID is generated. NOTE: For the plugin instances sharing the same namespace, all the configurations that are required for synchronizing counters, e.g. `strategy`, `redis`, `sync_rate`, `window_size`, `dictionary_name`, need to be the same.
	Namespace *string                                       `json:"namespace,omitempty"`
	Redis     *CreateGraphqlRateLimitingAdvancedPluginRedis `json:"redis,omitempty"`
	// A scoring factor to multiply (or divide) the cost. The `score_factor` must always be greater than 0.
	ScoreFactor *float64 `json:"score_factor,omitempty"`
	// The rate-limiting strategy to use for retrieving and incrementing the limits.
	Strategy *CreateGraphqlRateLimitingAdvancedPluginStrategy `json:"strategy,omitempty"`
	// How often to sync counter data to the central data store. A value of 0 results in synchronous behavior; a value of -1 ignores sync behavior entirely and only stores counters in node memory. A value greater than 0 syncs the counters in that many number of seconds.
	SyncRate *float64 `json:"sync_rate,omitempty"`
	// One or more window sizes to apply a limit to (defined in seconds).
	WindowSize []float64 `json:"window_size,omitempty"`
	// Sets the time window to either `sliding` or `fixed`.
	WindowType *WindowType `json:"window_type,omitempty"`
}

func (o *CreateGraphqlRateLimitingAdvancedPluginConfig) GetCostStrategy() *CostStrategy {
	if o == nil {
		return nil
	}
	return o.CostStrategy
}

func (o *CreateGraphqlRateLimitingAdvancedPluginConfig) GetDictionaryName() *string {
	if o == nil {
		return nil
	}
	return o.DictionaryName
}

func (o *CreateGraphqlRateLimitingAdvancedPluginConfig) GetHideClientHeaders() *bool {
	if o == nil {
		return nil
	}
	return o.HideClientHeaders
}

func (o *CreateGraphqlRateLimitingAdvancedPluginConfig) GetIdentifier() *Identifier {
	if o == nil {
		return nil
	}
	return o.Identifier
}

func (o *CreateGraphqlRateLimitingAdvancedPluginConfig) GetLimit() []float64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *CreateGraphqlRateLimitingAdvancedPluginConfig) GetMaxCost() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxCost
}

func (o *CreateGraphqlRateLimitingAdvancedPluginConfig) GetNamespace() *string {
	if o == nil {
		return nil
	}
	return o.Namespace
}

func (o *CreateGraphqlRateLimitingAdvancedPluginConfig) GetRedis() *CreateGraphqlRateLimitingAdvancedPluginRedis {
	if o == nil {
		return nil
	}
	return o.Redis
}

func (o *CreateGraphqlRateLimitingAdvancedPluginConfig) GetScoreFactor() *float64 {
	if o == nil {
		return nil
	}
	return o.ScoreFactor
}

func (o *CreateGraphqlRateLimitingAdvancedPluginConfig) GetStrategy() *CreateGraphqlRateLimitingAdvancedPluginStrategy {
	if o == nil {
		return nil
	}
	return o.Strategy
}

func (o *CreateGraphqlRateLimitingAdvancedPluginConfig) GetSyncRate() *float64 {
	if o == nil {
		return nil
	}
	return o.SyncRate
}

func (o *CreateGraphqlRateLimitingAdvancedPluginConfig) GetWindowSize() []float64 {
	if o == nil {
		return nil
	}
	return o.WindowSize
}

func (o *CreateGraphqlRateLimitingAdvancedPluginConfig) GetWindowType() *WindowType {
	if o == nil {
		return nil
	}
	return o.WindowType
}

type CreateGraphqlRateLimitingAdvancedPluginProtocols string

const (
	CreateGraphqlRateLimitingAdvancedPluginProtocolsGrpc           CreateGraphqlRateLimitingAdvancedPluginProtocols = "grpc"
	CreateGraphqlRateLimitingAdvancedPluginProtocolsGrpcs          CreateGraphqlRateLimitingAdvancedPluginProtocols = "grpcs"
	CreateGraphqlRateLimitingAdvancedPluginProtocolsHTTP           CreateGraphqlRateLimitingAdvancedPluginProtocols = "http"
	CreateGraphqlRateLimitingAdvancedPluginProtocolsHTTPS          CreateGraphqlRateLimitingAdvancedPluginProtocols = "https"
	CreateGraphqlRateLimitingAdvancedPluginProtocolsTCP            CreateGraphqlRateLimitingAdvancedPluginProtocols = "tcp"
	CreateGraphqlRateLimitingAdvancedPluginProtocolsTLS            CreateGraphqlRateLimitingAdvancedPluginProtocols = "tls"
	CreateGraphqlRateLimitingAdvancedPluginProtocolsTLSPassthrough CreateGraphqlRateLimitingAdvancedPluginProtocols = "tls_passthrough"
	CreateGraphqlRateLimitingAdvancedPluginProtocolsUDP            CreateGraphqlRateLimitingAdvancedPluginProtocols = "udp"
	CreateGraphqlRateLimitingAdvancedPluginProtocolsWs             CreateGraphqlRateLimitingAdvancedPluginProtocols = "ws"
	CreateGraphqlRateLimitingAdvancedPluginProtocolsWss            CreateGraphqlRateLimitingAdvancedPluginProtocols = "wss"
)

func (e CreateGraphqlRateLimitingAdvancedPluginProtocols) ToPointer() *CreateGraphqlRateLimitingAdvancedPluginProtocols {
	return &e
}
func (e *CreateGraphqlRateLimitingAdvancedPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = CreateGraphqlRateLimitingAdvancedPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateGraphqlRateLimitingAdvancedPluginProtocols: %v", v)
	}
}

// CreateGraphqlRateLimitingAdvancedPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type CreateGraphqlRateLimitingAdvancedPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateGraphqlRateLimitingAdvancedPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateGraphqlRateLimitingAdvancedPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateGraphqlRateLimitingAdvancedPluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateGraphqlRateLimitingAdvancedPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type CreateGraphqlRateLimitingAdvancedPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateGraphqlRateLimitingAdvancedPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateGraphqlRateLimitingAdvancedPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type CreateGraphqlRateLimitingAdvancedPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateGraphqlRateLimitingAdvancedPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateGraphqlRateLimitingAdvancedPlugin struct {
	Config *CreateGraphqlRateLimitingAdvancedPluginConfig `json:"config,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool   `json:"enabled,omitempty"`
	InstanceName *string `json:"instance_name,omitempty"`
	name         *string `const:"graphql-rate-limiting-advanced" json:"name,omitempty"`
	Ordering     any     `json:"ordering,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []CreateGraphqlRateLimitingAdvancedPluginProtocols `json:"protocols,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *CreateGraphqlRateLimitingAdvancedPluginConsumer      `json:"consumer,omitempty"`
	ConsumerGroup *CreateGraphqlRateLimitingAdvancedPluginConsumerGroup `json:"consumer_group,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *CreateGraphqlRateLimitingAdvancedPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *CreateGraphqlRateLimitingAdvancedPluginService `json:"service,omitempty"`
}

func (c CreateGraphqlRateLimitingAdvancedPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateGraphqlRateLimitingAdvancedPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateGraphqlRateLimitingAdvancedPlugin) GetConfig() *CreateGraphqlRateLimitingAdvancedPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *CreateGraphqlRateLimitingAdvancedPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *CreateGraphqlRateLimitingAdvancedPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *CreateGraphqlRateLimitingAdvancedPlugin) GetName() *string {
	return types.String("graphql-rate-limiting-advanced")
}

func (o *CreateGraphqlRateLimitingAdvancedPlugin) GetOrdering() any {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *CreateGraphqlRateLimitingAdvancedPlugin) GetProtocols() []CreateGraphqlRateLimitingAdvancedPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *CreateGraphqlRateLimitingAdvancedPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *CreateGraphqlRateLimitingAdvancedPlugin) GetConsumer() *CreateGraphqlRateLimitingAdvancedPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *CreateGraphqlRateLimitingAdvancedPlugin) GetConsumerGroup() *CreateGraphqlRateLimitingAdvancedPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *CreateGraphqlRateLimitingAdvancedPlugin) GetRoute() *CreateGraphqlRateLimitingAdvancedPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *CreateGraphqlRateLimitingAdvancedPlugin) GetService() *CreateGraphqlRateLimitingAdvancedPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
