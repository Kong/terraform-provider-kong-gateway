// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/internal/utils"
)

type UDPLogPluginConfig struct {
	// Lua code as a key-value map
	CustomFieldsByLua map[string]any `json:"custom_fields_by_lua,omitempty"`
	// A string representing a host name, such as example.com.
	Host string `json:"host"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port int64 `json:"port"`
	// An optional timeout in milliseconds when sending data to the upstream server.
	Timeout *float64 `json:"timeout,omitempty"`
}

func (u *UDPLogPluginConfig) GetCustomFieldsByLua() map[string]any {
	if u == nil {
		return nil
	}
	return u.CustomFieldsByLua
}

func (u *UDPLogPluginConfig) GetHost() string {
	if u == nil {
		return ""
	}
	return u.Host
}

func (u *UDPLogPluginConfig) GetPort() int64 {
	if u == nil {
		return 0
	}
	return u.Port
}

func (u *UDPLogPluginConfig) GetTimeout() *float64 {
	if u == nil {
		return nil
	}
	return u.Timeout
}

// UDPLogPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type UDPLogPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (u *UDPLogPluginConsumer) GetID() *string {
	if u == nil {
		return nil
	}
	return u.ID
}

type UDPLogPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (u *UDPLogPluginAfter) GetAccess() []string {
	if u == nil {
		return nil
	}
	return u.Access
}

type UDPLogPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (u *UDPLogPluginBefore) GetAccess() []string {
	if u == nil {
		return nil
	}
	return u.Access
}

type UDPLogPluginOrdering struct {
	After  *UDPLogPluginAfter  `json:"after,omitempty"`
	Before *UDPLogPluginBefore `json:"before,omitempty"`
}

func (u *UDPLogPluginOrdering) GetAfter() *UDPLogPluginAfter {
	if u == nil {
		return nil
	}
	return u.After
}

func (u *UDPLogPluginOrdering) GetBefore() *UDPLogPluginBefore {
	if u == nil {
		return nil
	}
	return u.Before
}

type UDPLogPluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

func (u *UDPLogPluginPartials) GetID() *string {
	if u == nil {
		return nil
	}
	return u.ID
}

func (u *UDPLogPluginPartials) GetName() *string {
	if u == nil {
		return nil
	}
	return u.Name
}

func (u *UDPLogPluginPartials) GetPath() *string {
	if u == nil {
		return nil
	}
	return u.Path
}

// UDPLogPluginProtocols - A string representing a protocol, such as HTTP or HTTPS.
type UDPLogPluginProtocols string

const (
	UDPLogPluginProtocolsGrpc           UDPLogPluginProtocols = "grpc"
	UDPLogPluginProtocolsGrpcs          UDPLogPluginProtocols = "grpcs"
	UDPLogPluginProtocolsHTTP           UDPLogPluginProtocols = "http"
	UDPLogPluginProtocolsHTTPS          UDPLogPluginProtocols = "https"
	UDPLogPluginProtocolsTCP            UDPLogPluginProtocols = "tcp"
	UDPLogPluginProtocolsTLS            UDPLogPluginProtocols = "tls"
	UDPLogPluginProtocolsTLSPassthrough UDPLogPluginProtocols = "tls_passthrough"
	UDPLogPluginProtocolsUDP            UDPLogPluginProtocols = "udp"
	UDPLogPluginProtocolsWs             UDPLogPluginProtocols = "ws"
	UDPLogPluginProtocolsWss            UDPLogPluginProtocols = "wss"
)

func (e UDPLogPluginProtocols) ToPointer() *UDPLogPluginProtocols {
	return &e
}
func (e *UDPLogPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = UDPLogPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UDPLogPluginProtocols: %v", v)
	}
}

// UDPLogPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type UDPLogPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (u *UDPLogPluginRoute) GetID() *string {
	if u == nil {
		return nil
	}
	return u.ID
}

// UDPLogPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type UDPLogPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (u *UDPLogPluginService) GetID() *string {
	if u == nil {
		return nil
	}
	return u.ID
}

type UDPLogPlugin struct {
	Config *UDPLogPluginConfig `json:"config,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer *UDPLogPluginConsumer `json:"consumer,omitempty"`
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `json:"enabled,omitempty"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string               `json:"instance_name,omitempty"`
	name         string                `const:"udp-log" json:"name"`
	Ordering     *UDPLogPluginOrdering `json:"ordering,omitempty"`
	// A list of partials to be used by the plugin.
	Partials []UDPLogPluginPartials `json:"partials,omitempty"`
	// A set of strings representing protocols.
	Protocols []UDPLogPluginProtocols `json:"protocols,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *UDPLogPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *UDPLogPluginService `json:"service,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64 `json:"updated_at,omitempty"`
}

func (u UDPLogPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UDPLogPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, []string{"name"}); err != nil {
		return err
	}
	return nil
}

func (u *UDPLogPlugin) GetConfig() *UDPLogPluginConfig {
	if u == nil {
		return nil
	}
	return u.Config
}

func (u *UDPLogPlugin) GetConsumer() *UDPLogPluginConsumer {
	if u == nil {
		return nil
	}
	return u.Consumer
}

func (u *UDPLogPlugin) GetCreatedAt() *int64 {
	if u == nil {
		return nil
	}
	return u.CreatedAt
}

func (u *UDPLogPlugin) GetEnabled() *bool {
	if u == nil {
		return nil
	}
	return u.Enabled
}

func (u *UDPLogPlugin) GetID() *string {
	if u == nil {
		return nil
	}
	return u.ID
}

func (u *UDPLogPlugin) GetInstanceName() *string {
	if u == nil {
		return nil
	}
	return u.InstanceName
}

func (u *UDPLogPlugin) GetName() string {
	return "udp-log"
}

func (u *UDPLogPlugin) GetOrdering() *UDPLogPluginOrdering {
	if u == nil {
		return nil
	}
	return u.Ordering
}

func (u *UDPLogPlugin) GetPartials() []UDPLogPluginPartials {
	if u == nil {
		return nil
	}
	return u.Partials
}

func (u *UDPLogPlugin) GetProtocols() []UDPLogPluginProtocols {
	if u == nil {
		return nil
	}
	return u.Protocols
}

func (u *UDPLogPlugin) GetRoute() *UDPLogPluginRoute {
	if u == nil {
		return nil
	}
	return u.Route
}

func (u *UDPLogPlugin) GetService() *UDPLogPluginService {
	if u == nil {
		return nil
	}
	return u.Service
}

func (u *UDPLogPlugin) GetTags() []string {
	if u == nil {
		return nil
	}
	return u.Tags
}

func (u *UDPLogPlugin) GetUpdatedAt() *int64 {
	if u == nil {
		return nil
	}
	return u.UpdatedAt
}
