// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/internal/utils"
)

// OpaProtocol - The protocol to use when talking to Open Policy Agent (OPA) server. Allowed protocols are `http` and `https`.
type OpaProtocol string

const (
	OpaProtocolHTTP  OpaProtocol = "http"
	OpaProtocolHTTPS OpaProtocol = "https"
)

func (e OpaProtocol) ToPointer() *OpaProtocol {
	return &e
}
func (e *OpaProtocol) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "http":
		fallthrough
	case "https":
		*e = OpaProtocol(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OpaProtocol: %v", v)
	}
}

type OpaPluginConfig struct {
	IncludeBodyInOpaInput *bool `json:"include_body_in_opa_input,omitempty"`
	// If set to true, the Kong Gateway Consumer object in use for the current request (if any) is included as input to OPA.
	IncludeConsumerInOpaInput *bool `json:"include_consumer_in_opa_input,omitempty"`
	// If set to true and the `Content-Type` header of the current request is `application/json`, the request body will be JSON decoded and the decoded struct is included as input to OPA.
	IncludeParsedJSONBodyInOpaInput *bool `json:"include_parsed_json_body_in_opa_input,omitempty"`
	// If set to true, the Kong Gateway Route object in use for the current request is included as input to OPA.
	IncludeRouteInOpaInput *bool `json:"include_route_in_opa_input,omitempty"`
	// If set to true, the Kong Gateway Service object in use for the current request is included as input to OPA.
	IncludeServiceInOpaInput *bool `json:"include_service_in_opa_input,omitempty"`
	// If set to true, the regex capture groups captured on the Kong Gateway Route's path field in the current request (if any) are included as input to OPA.
	IncludeURICapturesInOpaInput *bool `json:"include_uri_captures_in_opa_input,omitempty"`
	// A string representing a host name, such as example.com.
	OpaHost *string `json:"opa_host,omitempty"`
	// A string representing a URL path, such as /path/to/resource. Must start with a forward slash (/) and must not contain empty segments (i.e., two consecutive forward slashes).
	OpaPath string `json:"opa_path"`
	// An integer representing a port number between 0 and 65535, inclusive.
	OpaPort *int64 `json:"opa_port,omitempty"`
	// The protocol to use when talking to Open Policy Agent (OPA) server. Allowed protocols are `http` and `https`.
	OpaProtocol *OpaProtocol `json:"opa_protocol,omitempty"`
	// If set to true, the OPA certificate will be verified according to the CA certificates specified in lua_ssl_trusted_certificate.
	SslVerify *bool `json:"ssl_verify,omitempty"`
}

func (o *OpaPluginConfig) GetIncludeBodyInOpaInput() *bool {
	if o == nil {
		return nil
	}
	return o.IncludeBodyInOpaInput
}

func (o *OpaPluginConfig) GetIncludeConsumerInOpaInput() *bool {
	if o == nil {
		return nil
	}
	return o.IncludeConsumerInOpaInput
}

func (o *OpaPluginConfig) GetIncludeParsedJSONBodyInOpaInput() *bool {
	if o == nil {
		return nil
	}
	return o.IncludeParsedJSONBodyInOpaInput
}

func (o *OpaPluginConfig) GetIncludeRouteInOpaInput() *bool {
	if o == nil {
		return nil
	}
	return o.IncludeRouteInOpaInput
}

func (o *OpaPluginConfig) GetIncludeServiceInOpaInput() *bool {
	if o == nil {
		return nil
	}
	return o.IncludeServiceInOpaInput
}

func (o *OpaPluginConfig) GetIncludeURICapturesInOpaInput() *bool {
	if o == nil {
		return nil
	}
	return o.IncludeURICapturesInOpaInput
}

func (o *OpaPluginConfig) GetOpaHost() *string {
	if o == nil {
		return nil
	}
	return o.OpaHost
}

func (o *OpaPluginConfig) GetOpaPath() string {
	if o == nil {
		return ""
	}
	return o.OpaPath
}

func (o *OpaPluginConfig) GetOpaPort() *int64 {
	if o == nil {
		return nil
	}
	return o.OpaPort
}

func (o *OpaPluginConfig) GetOpaProtocol() *OpaProtocol {
	if o == nil {
		return nil
	}
	return o.OpaProtocol
}

func (o *OpaPluginConfig) GetSslVerify() *bool {
	if o == nil {
		return nil
	}
	return o.SslVerify
}

type OpaPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (o *OpaPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type OpaPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (o *OpaPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type OpaPluginOrdering struct {
	After  *OpaPluginAfter  `json:"after,omitempty"`
	Before *OpaPluginBefore `json:"before,omitempty"`
}

func (o *OpaPluginOrdering) GetAfter() *OpaPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *OpaPluginOrdering) GetBefore() *OpaPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type OpaPluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

func (o *OpaPluginPartials) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *OpaPluginPartials) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *OpaPluginPartials) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

type OpaPluginProtocols string

const (
	OpaPluginProtocolsGrpc  OpaPluginProtocols = "grpc"
	OpaPluginProtocolsGrpcs OpaPluginProtocols = "grpcs"
	OpaPluginProtocolsHTTP  OpaPluginProtocols = "http"
	OpaPluginProtocolsHTTPS OpaPluginProtocols = "https"
)

func (e OpaPluginProtocols) ToPointer() *OpaPluginProtocols {
	return &e
}
func (e *OpaPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		*e = OpaPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OpaPluginProtocols: %v", v)
	}
}

// OpaPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type OpaPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *OpaPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// OpaPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type OpaPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *OpaPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type OpaPlugin struct {
	Config *OpaPluginConfig `json:"config,omitempty"`
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `json:"enabled,omitempty"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string            `json:"instance_name,omitempty"`
	name         string             `const:"opa" json:"name"`
	Ordering     *OpaPluginOrdering `json:"ordering,omitempty"`
	// A list of partials to be used by the plugin.
	Partials []OpaPluginPartials `json:"partials,omitempty"`
	// A set of strings representing HTTP protocols.
	Protocols []OpaPluginProtocols `json:"protocols,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *OpaPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *OpaPluginService `json:"service,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64 `json:"updated_at,omitempty"`
}

func (o OpaPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OpaPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, []string{"name"}); err != nil {
		return err
	}
	return nil
}

func (o *OpaPlugin) GetConfig() *OpaPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *OpaPlugin) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *OpaPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *OpaPlugin) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *OpaPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *OpaPlugin) GetName() string {
	return "opa"
}

func (o *OpaPlugin) GetOrdering() *OpaPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *OpaPlugin) GetPartials() []OpaPluginPartials {
	if o == nil {
		return nil
	}
	return o.Partials
}

func (o *OpaPlugin) GetProtocols() []OpaPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *OpaPlugin) GetRoute() *OpaPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *OpaPlugin) GetService() *OpaPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}

func (o *OpaPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *OpaPlugin) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}
