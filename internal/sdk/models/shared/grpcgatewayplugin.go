// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/internal/utils"
)

type GrpcGatewayPluginConfig struct {
	// Describes the gRPC types and methods.
	Proto *string `json:"proto,omitempty"`
}

func (g *GrpcGatewayPluginConfig) GetProto() *string {
	if g == nil {
		return nil
	}
	return g.Proto
}

// GrpcGatewayPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type GrpcGatewayPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (g *GrpcGatewayPluginConsumer) GetID() *string {
	if g == nil {
		return nil
	}
	return g.ID
}

type GrpcGatewayPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (g *GrpcGatewayPluginAfter) GetAccess() []string {
	if g == nil {
		return nil
	}
	return g.Access
}

type GrpcGatewayPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (g *GrpcGatewayPluginBefore) GetAccess() []string {
	if g == nil {
		return nil
	}
	return g.Access
}

type GrpcGatewayPluginOrdering struct {
	After  *GrpcGatewayPluginAfter  `json:"after,omitempty"`
	Before *GrpcGatewayPluginBefore `json:"before,omitempty"`
}

func (g *GrpcGatewayPluginOrdering) GetAfter() *GrpcGatewayPluginAfter {
	if g == nil {
		return nil
	}
	return g.After
}

func (g *GrpcGatewayPluginOrdering) GetBefore() *GrpcGatewayPluginBefore {
	if g == nil {
		return nil
	}
	return g.Before
}

type GrpcGatewayPluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

func (g *GrpcGatewayPluginPartials) GetID() *string {
	if g == nil {
		return nil
	}
	return g.ID
}

func (g *GrpcGatewayPluginPartials) GetName() *string {
	if g == nil {
		return nil
	}
	return g.Name
}

func (g *GrpcGatewayPluginPartials) GetPath() *string {
	if g == nil {
		return nil
	}
	return g.Path
}

// GrpcGatewayPluginProtocols - A string representing a protocol, such as HTTP or HTTPS.
type GrpcGatewayPluginProtocols string

const (
	GrpcGatewayPluginProtocolsGrpc           GrpcGatewayPluginProtocols = "grpc"
	GrpcGatewayPluginProtocolsGrpcs          GrpcGatewayPluginProtocols = "grpcs"
	GrpcGatewayPluginProtocolsHTTP           GrpcGatewayPluginProtocols = "http"
	GrpcGatewayPluginProtocolsHTTPS          GrpcGatewayPluginProtocols = "https"
	GrpcGatewayPluginProtocolsTCP            GrpcGatewayPluginProtocols = "tcp"
	GrpcGatewayPluginProtocolsTLS            GrpcGatewayPluginProtocols = "tls"
	GrpcGatewayPluginProtocolsTLSPassthrough GrpcGatewayPluginProtocols = "tls_passthrough"
	GrpcGatewayPluginProtocolsUDP            GrpcGatewayPluginProtocols = "udp"
	GrpcGatewayPluginProtocolsWs             GrpcGatewayPluginProtocols = "ws"
	GrpcGatewayPluginProtocolsWss            GrpcGatewayPluginProtocols = "wss"
)

func (e GrpcGatewayPluginProtocols) ToPointer() *GrpcGatewayPluginProtocols {
	return &e
}
func (e *GrpcGatewayPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = GrpcGatewayPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GrpcGatewayPluginProtocols: %v", v)
	}
}

// GrpcGatewayPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type GrpcGatewayPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (g *GrpcGatewayPluginRoute) GetID() *string {
	if g == nil {
		return nil
	}
	return g.ID
}

// GrpcGatewayPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type GrpcGatewayPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (g *GrpcGatewayPluginService) GetID() *string {
	if g == nil {
		return nil
	}
	return g.ID
}

type GrpcGatewayPlugin struct {
	Config *GrpcGatewayPluginConfig `json:"config,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer *GrpcGatewayPluginConsumer `json:"consumer,omitempty"`
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `json:"enabled,omitempty"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string                    `json:"instance_name,omitempty"`
	name         string                     `const:"grpc-gateway" json:"name"`
	Ordering     *GrpcGatewayPluginOrdering `json:"ordering,omitempty"`
	// A list of partials to be used by the plugin.
	Partials []GrpcGatewayPluginPartials `json:"partials,omitempty"`
	// A set of strings representing protocols.
	Protocols []GrpcGatewayPluginProtocols `json:"protocols,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *GrpcGatewayPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *GrpcGatewayPluginService `json:"service,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64 `json:"updated_at,omitempty"`
}

func (g GrpcGatewayPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GrpcGatewayPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"name"}); err != nil {
		return err
	}
	return nil
}

func (g *GrpcGatewayPlugin) GetConfig() *GrpcGatewayPluginConfig {
	if g == nil {
		return nil
	}
	return g.Config
}

func (g *GrpcGatewayPlugin) GetConsumer() *GrpcGatewayPluginConsumer {
	if g == nil {
		return nil
	}
	return g.Consumer
}

func (g *GrpcGatewayPlugin) GetCreatedAt() *int64 {
	if g == nil {
		return nil
	}
	return g.CreatedAt
}

func (g *GrpcGatewayPlugin) GetEnabled() *bool {
	if g == nil {
		return nil
	}
	return g.Enabled
}

func (g *GrpcGatewayPlugin) GetID() *string {
	if g == nil {
		return nil
	}
	return g.ID
}

func (g *GrpcGatewayPlugin) GetInstanceName() *string {
	if g == nil {
		return nil
	}
	return g.InstanceName
}

func (g *GrpcGatewayPlugin) GetName() string {
	return "grpc-gateway"
}

func (g *GrpcGatewayPlugin) GetOrdering() *GrpcGatewayPluginOrdering {
	if g == nil {
		return nil
	}
	return g.Ordering
}

func (g *GrpcGatewayPlugin) GetPartials() []GrpcGatewayPluginPartials {
	if g == nil {
		return nil
	}
	return g.Partials
}

func (g *GrpcGatewayPlugin) GetProtocols() []GrpcGatewayPluginProtocols {
	if g == nil {
		return nil
	}
	return g.Protocols
}

func (g *GrpcGatewayPlugin) GetRoute() *GrpcGatewayPluginRoute {
	if g == nil {
		return nil
	}
	return g.Route
}

func (g *GrpcGatewayPlugin) GetService() *GrpcGatewayPluginService {
	if g == nil {
		return nil
	}
	return g.Service
}

func (g *GrpcGatewayPlugin) GetTags() []string {
	if g == nil {
		return nil
	}
	return g.Tags
}

func (g *GrpcGatewayPlugin) GetUpdatedAt() *int64 {
	if g == nil {
		return nil
	}
	return g.UpdatedAt
}
