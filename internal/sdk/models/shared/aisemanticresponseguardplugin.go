// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/internal/utils"
)

// AiSemanticResponseGuardPluginParamLocation - Specify whether the 'param_name' and 'param_value' options go in a query string, or the POST form/JSON body.
type AiSemanticResponseGuardPluginParamLocation string

const (
	AiSemanticResponseGuardPluginParamLocationBody  AiSemanticResponseGuardPluginParamLocation = "body"
	AiSemanticResponseGuardPluginParamLocationQuery AiSemanticResponseGuardPluginParamLocation = "query"
)

func (e AiSemanticResponseGuardPluginParamLocation) ToPointer() *AiSemanticResponseGuardPluginParamLocation {
	return &e
}
func (e *AiSemanticResponseGuardPluginParamLocation) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "body":
		fallthrough
	case "query":
		*e = AiSemanticResponseGuardPluginParamLocation(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiSemanticResponseGuardPluginParamLocation: %v", v)
	}
}

type AiSemanticResponseGuardPluginAuth struct {
	// If enabled, the authorization header or parameter can be overridden in the request by the value configured in the plugin.
	AllowOverride *bool `json:"allow_override,omitempty"`
	// Set this if you are using an AWS provider (Bedrock) and you are authenticating using static IAM User credentials. Setting this will override the AWS_ACCESS_KEY_ID environment variable for this plugin instance.
	AwsAccessKeyID *string `json:"aws_access_key_id,omitempty"`
	// Set this if you are using an AWS provider (Bedrock) and you are authenticating using static IAM User credentials. Setting this will override the AWS_SECRET_ACCESS_KEY environment variable for this plugin instance.
	AwsSecretAccessKey *string `json:"aws_secret_access_key,omitempty"`
	// If azure_use_managed_identity is set to true, and you need to use a different user-assigned identity for this LLM instance, set the client ID.
	AzureClientID *string `json:"azure_client_id,omitempty"`
	// If azure_use_managed_identity is set to true, and you need to use a different user-assigned identity for this LLM instance, set the client secret.
	AzureClientSecret *string `json:"azure_client_secret,omitempty"`
	// If azure_use_managed_identity is set to true, and you need to use a different user-assigned identity for this LLM instance, set the tenant ID.
	AzureTenantID *string `json:"azure_tenant_id,omitempty"`
	// Set true to use the Azure Cloud Managed Identity (or user-assigned identity) to authenticate with Azure-provider models.
	AzureUseManagedIdentity *bool `json:"azure_use_managed_identity,omitempty"`
	// Set this field to the full JSON of the GCP service account to authenticate, if required. If null (and gcp_use_service_account is true), Kong will attempt to read from environment variable `GCP_SERVICE_ACCOUNT`.
	GcpServiceAccountJSON *string `json:"gcp_service_account_json,omitempty"`
	// Use service account auth for GCP-based providers and models.
	GcpUseServiceAccount *bool `json:"gcp_use_service_account,omitempty"`
	// If AI model requires authentication via Authorization or API key header, specify its name here.
	HeaderName *string `json:"header_name,omitempty"`
	// Specify the full auth header value for 'header_name', for example 'Bearer key' or just 'key'.
	HeaderValue *string `json:"header_value,omitempty"`
	// Specify whether the 'param_name' and 'param_value' options go in a query string, or the POST form/JSON body.
	ParamLocation *AiSemanticResponseGuardPluginParamLocation `json:"param_location,omitempty"`
	// If AI model requires authentication via query parameter, specify its name here.
	ParamName *string `json:"param_name,omitempty"`
	// Specify the full parameter value for 'param_name'.
	ParamValue *string `json:"param_value,omitempty"`
}

func (a *AiSemanticResponseGuardPluginAuth) GetAllowOverride() *bool {
	if a == nil {
		return nil
	}
	return a.AllowOverride
}

func (a *AiSemanticResponseGuardPluginAuth) GetAwsAccessKeyID() *string {
	if a == nil {
		return nil
	}
	return a.AwsAccessKeyID
}

func (a *AiSemanticResponseGuardPluginAuth) GetAwsSecretAccessKey() *string {
	if a == nil {
		return nil
	}
	return a.AwsSecretAccessKey
}

func (a *AiSemanticResponseGuardPluginAuth) GetAzureClientID() *string {
	if a == nil {
		return nil
	}
	return a.AzureClientID
}

func (a *AiSemanticResponseGuardPluginAuth) GetAzureClientSecret() *string {
	if a == nil {
		return nil
	}
	return a.AzureClientSecret
}

func (a *AiSemanticResponseGuardPluginAuth) GetAzureTenantID() *string {
	if a == nil {
		return nil
	}
	return a.AzureTenantID
}

func (a *AiSemanticResponseGuardPluginAuth) GetAzureUseManagedIdentity() *bool {
	if a == nil {
		return nil
	}
	return a.AzureUseManagedIdentity
}

func (a *AiSemanticResponseGuardPluginAuth) GetGcpServiceAccountJSON() *string {
	if a == nil {
		return nil
	}
	return a.GcpServiceAccountJSON
}

func (a *AiSemanticResponseGuardPluginAuth) GetGcpUseServiceAccount() *bool {
	if a == nil {
		return nil
	}
	return a.GcpUseServiceAccount
}

func (a *AiSemanticResponseGuardPluginAuth) GetHeaderName() *string {
	if a == nil {
		return nil
	}
	return a.HeaderName
}

func (a *AiSemanticResponseGuardPluginAuth) GetHeaderValue() *string {
	if a == nil {
		return nil
	}
	return a.HeaderValue
}

func (a *AiSemanticResponseGuardPluginAuth) GetParamLocation() *AiSemanticResponseGuardPluginParamLocation {
	if a == nil {
		return nil
	}
	return a.ParamLocation
}

func (a *AiSemanticResponseGuardPluginAuth) GetParamName() *string {
	if a == nil {
		return nil
	}
	return a.ParamName
}

func (a *AiSemanticResponseGuardPluginAuth) GetParamValue() *string {
	if a == nil {
		return nil
	}
	return a.ParamValue
}

type AiSemanticResponseGuardPluginAzure struct {
	// 'api-version' for Azure OpenAI instances.
	APIVersion *string `json:"api_version,omitempty"`
	// Deployment ID for Azure OpenAI instances.
	DeploymentID *string `json:"deployment_id,omitempty"`
	// Instance name for Azure OpenAI hosted models.
	Instance *string `json:"instance,omitempty"`
}

func (a *AiSemanticResponseGuardPluginAzure) GetAPIVersion() *string {
	if a == nil {
		return nil
	}
	return a.APIVersion
}

func (a *AiSemanticResponseGuardPluginAzure) GetDeploymentID() *string {
	if a == nil {
		return nil
	}
	return a.DeploymentID
}

func (a *AiSemanticResponseGuardPluginAzure) GetInstance() *string {
	if a == nil {
		return nil
	}
	return a.Instance
}

type AiSemanticResponseGuardPluginBedrock struct {
	// If using AWS providers (Bedrock) you can assume a different role after authentication with the current IAM context is successful.
	AwsAssumeRoleArn *string `json:"aws_assume_role_arn,omitempty"`
	// If using AWS providers (Bedrock) you can override the `AWS_REGION` environment variable by setting this option.
	AwsRegion *string `json:"aws_region,omitempty"`
	// If using AWS providers (Bedrock), set the identifier of the assumed role session.
	AwsRoleSessionName *string `json:"aws_role_session_name,omitempty"`
	// If using AWS providers (Bedrock), override the STS endpoint URL when assuming a different role.
	AwsStsEndpointURL *string `json:"aws_sts_endpoint_url,omitempty"`
	// If using AWS providers (Bedrock), set to true to normalize the embeddings.
	EmbeddingsNormalize *bool `json:"embeddings_normalize,omitempty"`
	// Force the client's performance configuration 'latency' for all requests. Leave empty to let the consumer select the performance configuration.
	PerformanceConfigLatency *string `json:"performance_config_latency,omitempty"`
}

func (a *AiSemanticResponseGuardPluginBedrock) GetAwsAssumeRoleArn() *string {
	if a == nil {
		return nil
	}
	return a.AwsAssumeRoleArn
}

func (a *AiSemanticResponseGuardPluginBedrock) GetAwsRegion() *string {
	if a == nil {
		return nil
	}
	return a.AwsRegion
}

func (a *AiSemanticResponseGuardPluginBedrock) GetAwsRoleSessionName() *string {
	if a == nil {
		return nil
	}
	return a.AwsRoleSessionName
}

func (a *AiSemanticResponseGuardPluginBedrock) GetAwsStsEndpointURL() *string {
	if a == nil {
		return nil
	}
	return a.AwsStsEndpointURL
}

func (a *AiSemanticResponseGuardPluginBedrock) GetEmbeddingsNormalize() *bool {
	if a == nil {
		return nil
	}
	return a.EmbeddingsNormalize
}

func (a *AiSemanticResponseGuardPluginBedrock) GetPerformanceConfigLatency() *string {
	if a == nil {
		return nil
	}
	return a.PerformanceConfigLatency
}

type AiSemanticResponseGuardPluginGemini struct {
	// If running Gemini on Vertex, specify the regional API endpoint (hostname only).
	APIEndpoint *string `json:"api_endpoint,omitempty"`
	// If running Gemini on Vertex, specify the location ID.
	LocationID *string `json:"location_id,omitempty"`
	// If running Gemini on Vertex, specify the project ID.
	ProjectID *string `json:"project_id,omitempty"`
}

func (a *AiSemanticResponseGuardPluginGemini) GetAPIEndpoint() *string {
	if a == nil {
		return nil
	}
	return a.APIEndpoint
}

func (a *AiSemanticResponseGuardPluginGemini) GetLocationID() *string {
	if a == nil {
		return nil
	}
	return a.LocationID
}

func (a *AiSemanticResponseGuardPluginGemini) GetProjectID() *string {
	if a == nil {
		return nil
	}
	return a.ProjectID
}

type AiSemanticResponseGuardPluginHuggingface struct {
	// Use the cache layer on the inference API
	UseCache *bool `json:"use_cache,omitempty"`
	// Wait for the model if it is not ready
	WaitForModel *bool `json:"wait_for_model,omitempty"`
}

func (a *AiSemanticResponseGuardPluginHuggingface) GetUseCache() *bool {
	if a == nil {
		return nil
	}
	return a.UseCache
}

func (a *AiSemanticResponseGuardPluginHuggingface) GetWaitForModel() *bool {
	if a == nil {
		return nil
	}
	return a.WaitForModel
}

// AiSemanticResponseGuardPluginOptions - Key/value settings for the model
type AiSemanticResponseGuardPluginOptions struct {
	Azure       *AiSemanticResponseGuardPluginAzure       `json:"azure,omitempty"`
	Bedrock     *AiSemanticResponseGuardPluginBedrock     `json:"bedrock,omitempty"`
	Gemini      *AiSemanticResponseGuardPluginGemini      `json:"gemini,omitempty"`
	Huggingface *AiSemanticResponseGuardPluginHuggingface `json:"huggingface,omitempty"`
	// upstream url for the embeddings
	UpstreamURL *string `json:"upstream_url,omitempty"`
}

func (a *AiSemanticResponseGuardPluginOptions) GetAzure() *AiSemanticResponseGuardPluginAzure {
	if a == nil {
		return nil
	}
	return a.Azure
}

func (a *AiSemanticResponseGuardPluginOptions) GetBedrock() *AiSemanticResponseGuardPluginBedrock {
	if a == nil {
		return nil
	}
	return a.Bedrock
}

func (a *AiSemanticResponseGuardPluginOptions) GetGemini() *AiSemanticResponseGuardPluginGemini {
	if a == nil {
		return nil
	}
	return a.Gemini
}

func (a *AiSemanticResponseGuardPluginOptions) GetHuggingface() *AiSemanticResponseGuardPluginHuggingface {
	if a == nil {
		return nil
	}
	return a.Huggingface
}

func (a *AiSemanticResponseGuardPluginOptions) GetUpstreamURL() *string {
	if a == nil {
		return nil
	}
	return a.UpstreamURL
}

// AiSemanticResponseGuardPluginProvider - AI provider format to use for embeddings API
type AiSemanticResponseGuardPluginProvider string

const (
	AiSemanticResponseGuardPluginProviderAzure       AiSemanticResponseGuardPluginProvider = "azure"
	AiSemanticResponseGuardPluginProviderBedrock     AiSemanticResponseGuardPluginProvider = "bedrock"
	AiSemanticResponseGuardPluginProviderGemini      AiSemanticResponseGuardPluginProvider = "gemini"
	AiSemanticResponseGuardPluginProviderHuggingface AiSemanticResponseGuardPluginProvider = "huggingface"
	AiSemanticResponseGuardPluginProviderMistral     AiSemanticResponseGuardPluginProvider = "mistral"
	AiSemanticResponseGuardPluginProviderOpenai      AiSemanticResponseGuardPluginProvider = "openai"
)

func (e AiSemanticResponseGuardPluginProvider) ToPointer() *AiSemanticResponseGuardPluginProvider {
	return &e
}
func (e *AiSemanticResponseGuardPluginProvider) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "azure":
		fallthrough
	case "bedrock":
		fallthrough
	case "gemini":
		fallthrough
	case "huggingface":
		fallthrough
	case "mistral":
		fallthrough
	case "openai":
		*e = AiSemanticResponseGuardPluginProvider(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiSemanticResponseGuardPluginProvider: %v", v)
	}
}

type AiSemanticResponseGuardPluginModel struct {
	// Model name to execute.
	Name string `json:"name"`
	// Key/value settings for the model
	Options *AiSemanticResponseGuardPluginOptions `json:"options,omitempty"`
	// AI provider format to use for embeddings API
	Provider AiSemanticResponseGuardPluginProvider `json:"provider"`
}

func (a *AiSemanticResponseGuardPluginModel) GetName() string {
	if a == nil {
		return ""
	}
	return a.Name
}

func (a *AiSemanticResponseGuardPluginModel) GetOptions() *AiSemanticResponseGuardPluginOptions {
	if a == nil {
		return nil
	}
	return a.Options
}

func (a *AiSemanticResponseGuardPluginModel) GetProvider() AiSemanticResponseGuardPluginProvider {
	if a == nil {
		return AiSemanticResponseGuardPluginProvider("")
	}
	return a.Provider
}

type AiSemanticResponseGuardPluginEmbeddings struct {
	Auth  *AiSemanticResponseGuardPluginAuth `json:"auth,omitempty"`
	Model AiSemanticResponseGuardPluginModel `json:"model"`
}

func (a *AiSemanticResponseGuardPluginEmbeddings) GetAuth() *AiSemanticResponseGuardPluginAuth {
	if a == nil {
		return nil
	}
	return a.Auth
}

func (a *AiSemanticResponseGuardPluginEmbeddings) GetModel() AiSemanticResponseGuardPluginModel {
	if a == nil {
		return AiSemanticResponseGuardPluginModel{}
	}
	return a.Model
}

// AiSemanticResponseGuardPluginGenaiCategory - Generative AI category of the request
type AiSemanticResponseGuardPluginGenaiCategory string

const (
	AiSemanticResponseGuardPluginGenaiCategoryAudioSpeech        AiSemanticResponseGuardPluginGenaiCategory = "audio/speech"
	AiSemanticResponseGuardPluginGenaiCategoryAudioTranscription AiSemanticResponseGuardPluginGenaiCategory = "audio/transcription"
	AiSemanticResponseGuardPluginGenaiCategoryImageGeneration    AiSemanticResponseGuardPluginGenaiCategory = "image/generation"
	AiSemanticResponseGuardPluginGenaiCategoryRealtimeGeneration AiSemanticResponseGuardPluginGenaiCategory = "realtime/generation"
	AiSemanticResponseGuardPluginGenaiCategoryTextEmbeddings     AiSemanticResponseGuardPluginGenaiCategory = "text/embeddings"
	AiSemanticResponseGuardPluginGenaiCategoryTextGeneration     AiSemanticResponseGuardPluginGenaiCategory = "text/generation"
	AiSemanticResponseGuardPluginGenaiCategoryVideoGeneration    AiSemanticResponseGuardPluginGenaiCategory = "video/generation"
)

func (e AiSemanticResponseGuardPluginGenaiCategory) ToPointer() *AiSemanticResponseGuardPluginGenaiCategory {
	return &e
}
func (e *AiSemanticResponseGuardPluginGenaiCategory) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "audio/speech":
		fallthrough
	case "audio/transcription":
		fallthrough
	case "image/generation":
		fallthrough
	case "realtime/generation":
		fallthrough
	case "text/embeddings":
		fallthrough
	case "text/generation":
		fallthrough
	case "video/generation":
		*e = AiSemanticResponseGuardPluginGenaiCategory(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiSemanticResponseGuardPluginGenaiCategory: %v", v)
	}
}

// AiSemanticResponseGuardPluginLlmFormat - LLM input and output format and schema to use
type AiSemanticResponseGuardPluginLlmFormat string

const (
	AiSemanticResponseGuardPluginLlmFormatBedrock     AiSemanticResponseGuardPluginLlmFormat = "bedrock"
	AiSemanticResponseGuardPluginLlmFormatCohere      AiSemanticResponseGuardPluginLlmFormat = "cohere"
	AiSemanticResponseGuardPluginLlmFormatGemini      AiSemanticResponseGuardPluginLlmFormat = "gemini"
	AiSemanticResponseGuardPluginLlmFormatHuggingface AiSemanticResponseGuardPluginLlmFormat = "huggingface"
	AiSemanticResponseGuardPluginLlmFormatOpenai      AiSemanticResponseGuardPluginLlmFormat = "openai"
)

func (e AiSemanticResponseGuardPluginLlmFormat) ToPointer() *AiSemanticResponseGuardPluginLlmFormat {
	return &e
}
func (e *AiSemanticResponseGuardPluginLlmFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bedrock":
		fallthrough
	case "cohere":
		fallthrough
	case "gemini":
		fallthrough
	case "huggingface":
		fallthrough
	case "openai":
		*e = AiSemanticResponseGuardPluginLlmFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiSemanticResponseGuardPluginLlmFormat: %v", v)
	}
}

type AiSemanticResponseGuardPluginRules struct {
	// List of responses to allow.
	AllowResponses []string `json:"allow_responses,omitempty"`
	// List of responses to deny.
	DenyResponses []string `json:"deny_responses,omitempty"`
	// Max allowed body size allowed to be introspected. 0 means unlimited, but the size of this body will still be limited by Nginx's client_max_body_size.
	MaxResponseBodySize *int64 `json:"max_response_body_size,omitempty"`
}

func (a *AiSemanticResponseGuardPluginRules) GetAllowResponses() []string {
	if a == nil {
		return nil
	}
	return a.AllowResponses
}

func (a *AiSemanticResponseGuardPluginRules) GetDenyResponses() []string {
	if a == nil {
		return nil
	}
	return a.DenyResponses
}

func (a *AiSemanticResponseGuardPluginRules) GetMaxResponseBodySize() *int64 {
	if a == nil {
		return nil
	}
	return a.MaxResponseBodySize
}

type AiSemanticResponseGuardPluginSearch struct {
	// Threshold for the similarity score to be considered a match.
	Threshold *float64 `json:"threshold,omitempty"`
}

func (a *AiSemanticResponseGuardPluginSearch) GetThreshold() *float64 {
	if a == nil {
		return nil
	}
	return a.Threshold
}

// AiSemanticResponseGuardPluginDistanceMetric - the distance metric to use for vector searches
type AiSemanticResponseGuardPluginDistanceMetric string

const (
	AiSemanticResponseGuardPluginDistanceMetricCosine    AiSemanticResponseGuardPluginDistanceMetric = "cosine"
	AiSemanticResponseGuardPluginDistanceMetricEuclidean AiSemanticResponseGuardPluginDistanceMetric = "euclidean"
)

func (e AiSemanticResponseGuardPluginDistanceMetric) ToPointer() *AiSemanticResponseGuardPluginDistanceMetric {
	return &e
}
func (e *AiSemanticResponseGuardPluginDistanceMetric) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cosine":
		fallthrough
	case "euclidean":
		*e = AiSemanticResponseGuardPluginDistanceMetric(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiSemanticResponseGuardPluginDistanceMetric: %v", v)
	}
}

// AiSemanticResponseGuardPluginSslVersion - the ssl version to use for the pgvector database
type AiSemanticResponseGuardPluginSslVersion string

const (
	AiSemanticResponseGuardPluginSslVersionAny    AiSemanticResponseGuardPluginSslVersion = "any"
	AiSemanticResponseGuardPluginSslVersionTlsv12 AiSemanticResponseGuardPluginSslVersion = "tlsv1_2"
	AiSemanticResponseGuardPluginSslVersionTlsv13 AiSemanticResponseGuardPluginSslVersion = "tlsv1_3"
)

func (e AiSemanticResponseGuardPluginSslVersion) ToPointer() *AiSemanticResponseGuardPluginSslVersion {
	return &e
}
func (e *AiSemanticResponseGuardPluginSslVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "any":
		fallthrough
	case "tlsv1_2":
		fallthrough
	case "tlsv1_3":
		*e = AiSemanticResponseGuardPluginSslVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiSemanticResponseGuardPluginSslVersion: %v", v)
	}
}

type AiSemanticResponseGuardPluginPgvector struct {
	// the database of the pgvector database
	Database *string `json:"database,omitempty"`
	// the host of the pgvector database
	Host *string `json:"host,omitempty"`
	// the password of the pgvector database
	Password *string `json:"password,omitempty"`
	// the port of the pgvector database
	Port *int64 `json:"port,omitempty"`
	// whether to use ssl for the pgvector database
	Ssl *bool `json:"ssl,omitempty"`
	// the path of ssl cert to use for the pgvector database
	SslCert *string `json:"ssl_cert,omitempty"`
	// the path of ssl cert key to use for the pgvector database
	SslCertKey *string `json:"ssl_cert_key,omitempty"`
	// whether ssl is required for the pgvector database
	SslRequired *bool `json:"ssl_required,omitempty"`
	// whether to verify ssl for the pgvector database
	SslVerify *bool `json:"ssl_verify,omitempty"`
	// the ssl version to use for the pgvector database
	SslVersion *AiSemanticResponseGuardPluginSslVersion `json:"ssl_version,omitempty"`
	// the timeout of the pgvector database
	Timeout *float64 `json:"timeout,omitempty"`
	// the user of the pgvector database
	User *string `json:"user,omitempty"`
}

func (a *AiSemanticResponseGuardPluginPgvector) GetDatabase() *string {
	if a == nil {
		return nil
	}
	return a.Database
}

func (a *AiSemanticResponseGuardPluginPgvector) GetHost() *string {
	if a == nil {
		return nil
	}
	return a.Host
}

func (a *AiSemanticResponseGuardPluginPgvector) GetPassword() *string {
	if a == nil {
		return nil
	}
	return a.Password
}

func (a *AiSemanticResponseGuardPluginPgvector) GetPort() *int64 {
	if a == nil {
		return nil
	}
	return a.Port
}

func (a *AiSemanticResponseGuardPluginPgvector) GetSsl() *bool {
	if a == nil {
		return nil
	}
	return a.Ssl
}

func (a *AiSemanticResponseGuardPluginPgvector) GetSslCert() *string {
	if a == nil {
		return nil
	}
	return a.SslCert
}

func (a *AiSemanticResponseGuardPluginPgvector) GetSslCertKey() *string {
	if a == nil {
		return nil
	}
	return a.SslCertKey
}

func (a *AiSemanticResponseGuardPluginPgvector) GetSslRequired() *bool {
	if a == nil {
		return nil
	}
	return a.SslRequired
}

func (a *AiSemanticResponseGuardPluginPgvector) GetSslVerify() *bool {
	if a == nil {
		return nil
	}
	return a.SslVerify
}

func (a *AiSemanticResponseGuardPluginPgvector) GetSslVersion() *AiSemanticResponseGuardPluginSslVersion {
	if a == nil {
		return nil
	}
	return a.SslVersion
}

func (a *AiSemanticResponseGuardPluginPgvector) GetTimeout() *float64 {
	if a == nil {
		return nil
	}
	return a.Timeout
}

func (a *AiSemanticResponseGuardPluginPgvector) GetUser() *string {
	if a == nil {
		return nil
	}
	return a.User
}

type AiSemanticResponseGuardPluginClusterNodes struct {
	// A string representing a host name, such as example.com.
	IP *string `json:"ip,omitempty"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port *int64 `json:"port,omitempty"`
}

func (a *AiSemanticResponseGuardPluginClusterNodes) GetIP() *string {
	if a == nil {
		return nil
	}
	return a.IP
}

func (a *AiSemanticResponseGuardPluginClusterNodes) GetPort() *int64 {
	if a == nil {
		return nil
	}
	return a.Port
}

type AiSemanticResponseGuardPluginSentinelNodes struct {
	// A string representing a host name, such as example.com.
	Host *string `json:"host,omitempty"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port *int64 `json:"port,omitempty"`
}

func (a *AiSemanticResponseGuardPluginSentinelNodes) GetHost() *string {
	if a == nil {
		return nil
	}
	return a.Host
}

func (a *AiSemanticResponseGuardPluginSentinelNodes) GetPort() *int64 {
	if a == nil {
		return nil
	}
	return a.Port
}

// AiSemanticResponseGuardPluginSentinelRole - Sentinel role to use for Redis connections when the `redis` strategy is defined. Defining this value implies using Redis Sentinel.
type AiSemanticResponseGuardPluginSentinelRole string

const (
	AiSemanticResponseGuardPluginSentinelRoleAny    AiSemanticResponseGuardPluginSentinelRole = "any"
	AiSemanticResponseGuardPluginSentinelRoleMaster AiSemanticResponseGuardPluginSentinelRole = "master"
	AiSemanticResponseGuardPluginSentinelRoleSlave  AiSemanticResponseGuardPluginSentinelRole = "slave"
)

func (e AiSemanticResponseGuardPluginSentinelRole) ToPointer() *AiSemanticResponseGuardPluginSentinelRole {
	return &e
}
func (e *AiSemanticResponseGuardPluginSentinelRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "any":
		fallthrough
	case "master":
		fallthrough
	case "slave":
		*e = AiSemanticResponseGuardPluginSentinelRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiSemanticResponseGuardPluginSentinelRole: %v", v)
	}
}

type AiSemanticResponseGuardPluginRedis struct {
	// Maximum retry attempts for redirection.
	ClusterMaxRedirections *int64 `json:"cluster_max_redirections,omitempty"`
	// Cluster addresses to use for Redis connections when the `redis` strategy is defined. Defining this field implies using a Redis Cluster. The minimum length of the array is 1 element.
	ClusterNodes []AiSemanticResponseGuardPluginClusterNodes `json:"cluster_nodes,omitempty"`
	// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
	ConnectTimeout *int64 `json:"connect_timeout,omitempty"`
	// If the connection to Redis is proxied (e.g. Envoy), set it `true`. Set the `host` and `port` to point to the proxy address.
	ConnectionIsProxied *bool `json:"connection_is_proxied,omitempty"`
	// Database to use for the Redis connection when using the `redis` strategy
	Database *int64 `json:"database,omitempty"`
	// A string representing a host name, such as example.com.
	Host *string `json:"host,omitempty"`
	// Limits the total number of opened connections for a pool. If the connection pool is full, connection queues above the limit go into the backlog queue. If the backlog queue is full, subsequent connect operations fail and return `nil`. Queued operations (subject to set timeouts) resume once the number of connections in the pool is less than `keepalive_pool_size`. If latency is high or throughput is low, try increasing this value. Empirically, this value is larger than `keepalive_pool_size`.
	KeepaliveBacklog *int64 `json:"keepalive_backlog,omitempty"`
	// The size limit for every cosocket connection pool associated with every remote server, per worker process. If neither `keepalive_pool_size` nor `keepalive_backlog` is specified, no pool is created. If `keepalive_pool_size` isn't specified but `keepalive_backlog` is specified, then the pool uses the default value. Try to increase (e.g. 512) this value if latency is high or throughput is low.
	KeepalivePoolSize *int64 `json:"keepalive_pool_size,omitempty"`
	// Password to use for Redis connections. If undefined, no AUTH commands are sent to Redis.
	Password *string `json:"password,omitempty"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port *int64 `json:"port,omitempty"`
	// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
	ReadTimeout *int64 `json:"read_timeout,omitempty"`
	// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
	SendTimeout *int64 `json:"send_timeout,omitempty"`
	// Sentinel master to use for Redis connections. Defining this value implies using Redis Sentinel.
	SentinelMaster *string `json:"sentinel_master,omitempty"`
	// Sentinel node addresses to use for Redis connections when the `redis` strategy is defined. Defining this field implies using a Redis Sentinel. The minimum length of the array is 1 element.
	SentinelNodes []AiSemanticResponseGuardPluginSentinelNodes `json:"sentinel_nodes,omitempty"`
	// Sentinel password to authenticate with a Redis Sentinel instance. If undefined, no AUTH commands are sent to Redis Sentinels.
	SentinelPassword *string `json:"sentinel_password,omitempty"`
	// Sentinel role to use for Redis connections when the `redis` strategy is defined. Defining this value implies using Redis Sentinel.
	SentinelRole *AiSemanticResponseGuardPluginSentinelRole `json:"sentinel_role,omitempty"`
	// Sentinel username to authenticate with a Redis Sentinel instance. If undefined, ACL authentication won't be performed. This requires Redis v6.2.0+.
	SentinelUsername *string `json:"sentinel_username,omitempty"`
	// A string representing an SNI (server name indication) value for TLS.
	ServerName *string `json:"server_name,omitempty"`
	// If set to true, uses SSL to connect to Redis.
	Ssl *bool `json:"ssl,omitempty"`
	// If set to true, verifies the validity of the server SSL certificate. If setting this parameter, also configure `lua_ssl_trusted_certificate` in `kong.conf` to specify the CA (or server) certificate used by your Redis server. You may also need to configure `lua_ssl_verify_depth` accordingly.
	SslVerify *bool `json:"ssl_verify,omitempty"`
	// Username to use for Redis connections. If undefined, ACL authentication won't be performed. This requires Redis v6.0.0+. To be compatible with Redis v5.x.y, you can set it to `default`.
	Username *string `json:"username,omitempty"`
}

func (a *AiSemanticResponseGuardPluginRedis) GetClusterMaxRedirections() *int64 {
	if a == nil {
		return nil
	}
	return a.ClusterMaxRedirections
}

func (a *AiSemanticResponseGuardPluginRedis) GetClusterNodes() []AiSemanticResponseGuardPluginClusterNodes {
	if a == nil {
		return nil
	}
	return a.ClusterNodes
}

func (a *AiSemanticResponseGuardPluginRedis) GetConnectTimeout() *int64 {
	if a == nil {
		return nil
	}
	return a.ConnectTimeout
}

func (a *AiSemanticResponseGuardPluginRedis) GetConnectionIsProxied() *bool {
	if a == nil {
		return nil
	}
	return a.ConnectionIsProxied
}

func (a *AiSemanticResponseGuardPluginRedis) GetDatabase() *int64 {
	if a == nil {
		return nil
	}
	return a.Database
}

func (a *AiSemanticResponseGuardPluginRedis) GetHost() *string {
	if a == nil {
		return nil
	}
	return a.Host
}

func (a *AiSemanticResponseGuardPluginRedis) GetKeepaliveBacklog() *int64 {
	if a == nil {
		return nil
	}
	return a.KeepaliveBacklog
}

func (a *AiSemanticResponseGuardPluginRedis) GetKeepalivePoolSize() *int64 {
	if a == nil {
		return nil
	}
	return a.KeepalivePoolSize
}

func (a *AiSemanticResponseGuardPluginRedis) GetPassword() *string {
	if a == nil {
		return nil
	}
	return a.Password
}

func (a *AiSemanticResponseGuardPluginRedis) GetPort() *int64 {
	if a == nil {
		return nil
	}
	return a.Port
}

func (a *AiSemanticResponseGuardPluginRedis) GetReadTimeout() *int64 {
	if a == nil {
		return nil
	}
	return a.ReadTimeout
}

func (a *AiSemanticResponseGuardPluginRedis) GetSendTimeout() *int64 {
	if a == nil {
		return nil
	}
	return a.SendTimeout
}

func (a *AiSemanticResponseGuardPluginRedis) GetSentinelMaster() *string {
	if a == nil {
		return nil
	}
	return a.SentinelMaster
}

func (a *AiSemanticResponseGuardPluginRedis) GetSentinelNodes() []AiSemanticResponseGuardPluginSentinelNodes {
	if a == nil {
		return nil
	}
	return a.SentinelNodes
}

func (a *AiSemanticResponseGuardPluginRedis) GetSentinelPassword() *string {
	if a == nil {
		return nil
	}
	return a.SentinelPassword
}

func (a *AiSemanticResponseGuardPluginRedis) GetSentinelRole() *AiSemanticResponseGuardPluginSentinelRole {
	if a == nil {
		return nil
	}
	return a.SentinelRole
}

func (a *AiSemanticResponseGuardPluginRedis) GetSentinelUsername() *string {
	if a == nil {
		return nil
	}
	return a.SentinelUsername
}

func (a *AiSemanticResponseGuardPluginRedis) GetServerName() *string {
	if a == nil {
		return nil
	}
	return a.ServerName
}

func (a *AiSemanticResponseGuardPluginRedis) GetSsl() *bool {
	if a == nil {
		return nil
	}
	return a.Ssl
}

func (a *AiSemanticResponseGuardPluginRedis) GetSslVerify() *bool {
	if a == nil {
		return nil
	}
	return a.SslVerify
}

func (a *AiSemanticResponseGuardPluginRedis) GetUsername() *string {
	if a == nil {
		return nil
	}
	return a.Username
}

// AiSemanticResponseGuardPluginStrategy - which vector database driver to use
type AiSemanticResponseGuardPluginStrategy string

const (
	AiSemanticResponseGuardPluginStrategyPgvector AiSemanticResponseGuardPluginStrategy = "pgvector"
	AiSemanticResponseGuardPluginStrategyRedis    AiSemanticResponseGuardPluginStrategy = "redis"
)

func (e AiSemanticResponseGuardPluginStrategy) ToPointer() *AiSemanticResponseGuardPluginStrategy {
	return &e
}
func (e *AiSemanticResponseGuardPluginStrategy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pgvector":
		fallthrough
	case "redis":
		*e = AiSemanticResponseGuardPluginStrategy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiSemanticResponseGuardPluginStrategy: %v", v)
	}
}

type AiSemanticResponseGuardPluginVectordb struct {
	// the desired dimensionality for the vectors
	Dimensions int64 `json:"dimensions"`
	// the distance metric to use for vector searches
	DistanceMetric AiSemanticResponseGuardPluginDistanceMetric `json:"distance_metric"`
	Pgvector       *AiSemanticResponseGuardPluginPgvector      `json:"pgvector,omitempty"`
	Redis          *AiSemanticResponseGuardPluginRedis         `json:"redis,omitempty"`
	// which vector database driver to use
	Strategy AiSemanticResponseGuardPluginStrategy `json:"strategy"`
	// the default similarity threshold for accepting semantic search results (float)
	Threshold float64 `json:"threshold"`
}

func (a *AiSemanticResponseGuardPluginVectordb) GetDimensions() int64 {
	if a == nil {
		return 0
	}
	return a.Dimensions
}

func (a *AiSemanticResponseGuardPluginVectordb) GetDistanceMetric() AiSemanticResponseGuardPluginDistanceMetric {
	if a == nil {
		return AiSemanticResponseGuardPluginDistanceMetric("")
	}
	return a.DistanceMetric
}

func (a *AiSemanticResponseGuardPluginVectordb) GetPgvector() *AiSemanticResponseGuardPluginPgvector {
	if a == nil {
		return nil
	}
	return a.Pgvector
}

func (a *AiSemanticResponseGuardPluginVectordb) GetRedis() *AiSemanticResponseGuardPluginRedis {
	if a == nil {
		return nil
	}
	return a.Redis
}

func (a *AiSemanticResponseGuardPluginVectordb) GetStrategy() AiSemanticResponseGuardPluginStrategy {
	if a == nil {
		return AiSemanticResponseGuardPluginStrategy("")
	}
	return a.Strategy
}

func (a *AiSemanticResponseGuardPluginVectordb) GetThreshold() float64 {
	if a == nil {
		return 0.0
	}
	return a.Threshold
}

type AiSemanticResponseGuardPluginConfig struct {
	Embeddings AiSemanticResponseGuardPluginEmbeddings `json:"embeddings"`
	// Generative AI category of the request
	GenaiCategory *AiSemanticResponseGuardPluginGenaiCategory `json:"genai_category,omitempty"`
	// LLM input and output format and schema to use
	LlmFormat *AiSemanticResponseGuardPluginLlmFormat `json:"llm_format,omitempty"`
	Rules     *AiSemanticResponseGuardPluginRules     `json:"rules,omitempty"`
	Search    *AiSemanticResponseGuardPluginSearch    `json:"search,omitempty"`
	Vectordb  AiSemanticResponseGuardPluginVectordb   `json:"vectordb"`
}

func (a *AiSemanticResponseGuardPluginConfig) GetEmbeddings() AiSemanticResponseGuardPluginEmbeddings {
	if a == nil {
		return AiSemanticResponseGuardPluginEmbeddings{}
	}
	return a.Embeddings
}

func (a *AiSemanticResponseGuardPluginConfig) GetGenaiCategory() *AiSemanticResponseGuardPluginGenaiCategory {
	if a == nil {
		return nil
	}
	return a.GenaiCategory
}

func (a *AiSemanticResponseGuardPluginConfig) GetLlmFormat() *AiSemanticResponseGuardPluginLlmFormat {
	if a == nil {
		return nil
	}
	return a.LlmFormat
}

func (a *AiSemanticResponseGuardPluginConfig) GetRules() *AiSemanticResponseGuardPluginRules {
	if a == nil {
		return nil
	}
	return a.Rules
}

func (a *AiSemanticResponseGuardPluginConfig) GetSearch() *AiSemanticResponseGuardPluginSearch {
	if a == nil {
		return nil
	}
	return a.Search
}

func (a *AiSemanticResponseGuardPluginConfig) GetVectordb() AiSemanticResponseGuardPluginVectordb {
	if a == nil {
		return AiSemanticResponseGuardPluginVectordb{}
	}
	return a.Vectordb
}

// AiSemanticResponseGuardPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type AiSemanticResponseGuardPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (a *AiSemanticResponseGuardPluginConsumer) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

// AiSemanticResponseGuardPluginConsumerGroup - If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups
type AiSemanticResponseGuardPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (a *AiSemanticResponseGuardPluginConsumerGroup) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

type AiSemanticResponseGuardPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (a *AiSemanticResponseGuardPluginAfter) GetAccess() []string {
	if a == nil {
		return nil
	}
	return a.Access
}

type AiSemanticResponseGuardPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (a *AiSemanticResponseGuardPluginBefore) GetAccess() []string {
	if a == nil {
		return nil
	}
	return a.Access
}

type AiSemanticResponseGuardPluginOrdering struct {
	After  *AiSemanticResponseGuardPluginAfter  `json:"after,omitempty"`
	Before *AiSemanticResponseGuardPluginBefore `json:"before,omitempty"`
}

func (a *AiSemanticResponseGuardPluginOrdering) GetAfter() *AiSemanticResponseGuardPluginAfter {
	if a == nil {
		return nil
	}
	return a.After
}

func (a *AiSemanticResponseGuardPluginOrdering) GetBefore() *AiSemanticResponseGuardPluginBefore {
	if a == nil {
		return nil
	}
	return a.Before
}

type AiSemanticResponseGuardPluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

func (a *AiSemanticResponseGuardPluginPartials) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *AiSemanticResponseGuardPluginPartials) GetName() *string {
	if a == nil {
		return nil
	}
	return a.Name
}

func (a *AiSemanticResponseGuardPluginPartials) GetPath() *string {
	if a == nil {
		return nil
	}
	return a.Path
}

type AiSemanticResponseGuardPluginProtocols string

const (
	AiSemanticResponseGuardPluginProtocolsGrpc  AiSemanticResponseGuardPluginProtocols = "grpc"
	AiSemanticResponseGuardPluginProtocolsGrpcs AiSemanticResponseGuardPluginProtocols = "grpcs"
	AiSemanticResponseGuardPluginProtocolsHTTP  AiSemanticResponseGuardPluginProtocols = "http"
	AiSemanticResponseGuardPluginProtocolsHTTPS AiSemanticResponseGuardPluginProtocols = "https"
)

func (e AiSemanticResponseGuardPluginProtocols) ToPointer() *AiSemanticResponseGuardPluginProtocols {
	return &e
}
func (e *AiSemanticResponseGuardPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		*e = AiSemanticResponseGuardPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiSemanticResponseGuardPluginProtocols: %v", v)
	}
}

// AiSemanticResponseGuardPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type AiSemanticResponseGuardPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (a *AiSemanticResponseGuardPluginRoute) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

// AiSemanticResponseGuardPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type AiSemanticResponseGuardPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (a *AiSemanticResponseGuardPluginService) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

type AiSemanticResponseGuardPlugin struct {
	Config *AiSemanticResponseGuardPluginConfig `json:"config,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer *AiSemanticResponseGuardPluginConsumer `json:"consumer,omitempty"`
	// If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups
	ConsumerGroup *AiSemanticResponseGuardPluginConsumerGroup `json:"consumer_group,omitempty"`
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `json:"enabled,omitempty"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string                                `json:"instance_name,omitempty"`
	name         string                                 `const:"ai-semantic-response-guard" json:"name"`
	Ordering     *AiSemanticResponseGuardPluginOrdering `json:"ordering,omitempty"`
	// A list of partials to be used by the plugin.
	Partials []AiSemanticResponseGuardPluginPartials `json:"partials,omitempty"`
	// A set of strings representing HTTP protocols.
	Protocols []AiSemanticResponseGuardPluginProtocols `json:"protocols,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *AiSemanticResponseGuardPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *AiSemanticResponseGuardPluginService `json:"service,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64 `json:"updated_at,omitempty"`
}

func (a AiSemanticResponseGuardPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AiSemanticResponseGuardPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"name"}); err != nil {
		return err
	}
	return nil
}

func (a *AiSemanticResponseGuardPlugin) GetConfig() *AiSemanticResponseGuardPluginConfig {
	if a == nil {
		return nil
	}
	return a.Config
}

func (a *AiSemanticResponseGuardPlugin) GetConsumer() *AiSemanticResponseGuardPluginConsumer {
	if a == nil {
		return nil
	}
	return a.Consumer
}

func (a *AiSemanticResponseGuardPlugin) GetConsumerGroup() *AiSemanticResponseGuardPluginConsumerGroup {
	if a == nil {
		return nil
	}
	return a.ConsumerGroup
}

func (a *AiSemanticResponseGuardPlugin) GetCreatedAt() *int64 {
	if a == nil {
		return nil
	}
	return a.CreatedAt
}

func (a *AiSemanticResponseGuardPlugin) GetEnabled() *bool {
	if a == nil {
		return nil
	}
	return a.Enabled
}

func (a *AiSemanticResponseGuardPlugin) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *AiSemanticResponseGuardPlugin) GetInstanceName() *string {
	if a == nil {
		return nil
	}
	return a.InstanceName
}

func (a *AiSemanticResponseGuardPlugin) GetName() string {
	return "ai-semantic-response-guard"
}

func (a *AiSemanticResponseGuardPlugin) GetOrdering() *AiSemanticResponseGuardPluginOrdering {
	if a == nil {
		return nil
	}
	return a.Ordering
}

func (a *AiSemanticResponseGuardPlugin) GetPartials() []AiSemanticResponseGuardPluginPartials {
	if a == nil {
		return nil
	}
	return a.Partials
}

func (a *AiSemanticResponseGuardPlugin) GetProtocols() []AiSemanticResponseGuardPluginProtocols {
	if a == nil {
		return nil
	}
	return a.Protocols
}

func (a *AiSemanticResponseGuardPlugin) GetRoute() *AiSemanticResponseGuardPluginRoute {
	if a == nil {
		return nil
	}
	return a.Route
}

func (a *AiSemanticResponseGuardPlugin) GetService() *AiSemanticResponseGuardPluginService {
	if a == nil {
		return nil
	}
	return a.Service
}

func (a *AiSemanticResponseGuardPlugin) GetTags() []string {
	if a == nil {
		return nil
	}
	return a.Tags
}

func (a *AiSemanticResponseGuardPlugin) GetUpdatedAt() *int64 {
	if a == nil {
		return nil
	}
	return a.UpdatedAt
}
