// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/models/shared"
)

func (r *CACertificateResourceModel) ToSharedCACertificate(ctx context.Context) (*shared.CACertificate, diag.Diagnostics) {
	var diags diag.Diagnostics

	var cert string
	cert = r.Cert.ValueString()

	certDigest := new(string)
	if !r.CertDigest.IsUnknown() && !r.CertDigest.IsNull() {
		*certDigest = r.CertDigest.ValueString()
	} else {
		certDigest = nil
	}
	createdAt := new(int64)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt = r.CreatedAt.ValueInt64()
	} else {
		createdAt = nil
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	tags := make([]string, 0, len(r.Tags))
	for _, tagsItem := range r.Tags {
		tags = append(tags, tagsItem.ValueString())
	}
	updatedAt := new(int64)
	if !r.UpdatedAt.IsUnknown() && !r.UpdatedAt.IsNull() {
		*updatedAt = r.UpdatedAt.ValueInt64()
	} else {
		updatedAt = nil
	}
	out := shared.CACertificate{
		Cert:       cert,
		CertDigest: certDigest,
		CreatedAt:  createdAt,
		ID:         id,
		Tags:       tags,
		UpdatedAt:  updatedAt,
	}

	return &out, diags
}

func (r *CACertificateResourceModel) ToOperationsUpsertCaCertificateRequest(ctx context.Context) (*operations.UpsertCaCertificateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var caCertificateID string
	caCertificateID = r.ID.ValueString()

	caCertificate, caCertificateDiags := r.ToSharedCACertificate(ctx)
	diags.Append(caCertificateDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpsertCaCertificateRequest{
		CACertificateID: caCertificateID,
		CACertificate:   *caCertificate,
	}

	return &out, diags
}

func (r *CACertificateResourceModel) ToOperationsGetCaCertificateRequest(ctx context.Context) (*operations.GetCaCertificateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var caCertificateID string
	caCertificateID = r.ID.ValueString()

	out := operations.GetCaCertificateRequest{
		CACertificateID: caCertificateID,
	}

	return &out, diags
}

func (r *CACertificateResourceModel) ToOperationsDeleteCaCertificateRequest(ctx context.Context) (*operations.DeleteCaCertificateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var caCertificateID string
	caCertificateID = r.ID.ValueString()

	out := operations.DeleteCaCertificateRequest{
		CACertificateID: caCertificateID,
	}

	return &out, diags
}

func (r *CACertificateResourceModel) RefreshFromSharedCACertificate(ctx context.Context, resp *shared.CACertificate) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Cert = types.StringValue(resp.Cert)
		r.CertDigest = types.StringPointerValue(resp.CertDigest)
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.ID = types.StringPointerValue(resp.ID)
		r.Tags = make([]types.String, 0, len(resp.Tags))
		for _, v := range resp.Tags {
			r.Tags = append(r.Tags, types.StringValue(v))
		}
		r.UpdatedAt = types.Int64PointerValue(resp.UpdatedAt)
	}

	return diags
}
