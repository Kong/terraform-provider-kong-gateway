// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/internal/utils"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/types"
)

type LogglyPluginClientErrorsSeverity string

const (
	LogglyPluginClientErrorsSeverityDebug   LogglyPluginClientErrorsSeverity = "debug"
	LogglyPluginClientErrorsSeverityInfo    LogglyPluginClientErrorsSeverity = "info"
	LogglyPluginClientErrorsSeverityNotice  LogglyPluginClientErrorsSeverity = "notice"
	LogglyPluginClientErrorsSeverityWarning LogglyPluginClientErrorsSeverity = "warning"
	LogglyPluginClientErrorsSeverityErr     LogglyPluginClientErrorsSeverity = "err"
	LogglyPluginClientErrorsSeverityCrit    LogglyPluginClientErrorsSeverity = "crit"
	LogglyPluginClientErrorsSeverityAlert   LogglyPluginClientErrorsSeverity = "alert"
	LogglyPluginClientErrorsSeverityEmerg   LogglyPluginClientErrorsSeverity = "emerg"
)

func (e LogglyPluginClientErrorsSeverity) ToPointer() *LogglyPluginClientErrorsSeverity {
	return &e
}
func (e *LogglyPluginClientErrorsSeverity) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "debug":
		fallthrough
	case "info":
		fallthrough
	case "notice":
		fallthrough
	case "warning":
		fallthrough
	case "err":
		fallthrough
	case "crit":
		fallthrough
	case "alert":
		fallthrough
	case "emerg":
		*e = LogglyPluginClientErrorsSeverity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LogglyPluginClientErrorsSeverity: %v", v)
	}
}

type LogglyPluginLogLevel string

const (
	LogglyPluginLogLevelDebug   LogglyPluginLogLevel = "debug"
	LogglyPluginLogLevelInfo    LogglyPluginLogLevel = "info"
	LogglyPluginLogLevelNotice  LogglyPluginLogLevel = "notice"
	LogglyPluginLogLevelWarning LogglyPluginLogLevel = "warning"
	LogglyPluginLogLevelErr     LogglyPluginLogLevel = "err"
	LogglyPluginLogLevelCrit    LogglyPluginLogLevel = "crit"
	LogglyPluginLogLevelAlert   LogglyPluginLogLevel = "alert"
	LogglyPluginLogLevelEmerg   LogglyPluginLogLevel = "emerg"
)

func (e LogglyPluginLogLevel) ToPointer() *LogglyPluginLogLevel {
	return &e
}
func (e *LogglyPluginLogLevel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "debug":
		fallthrough
	case "info":
		fallthrough
	case "notice":
		fallthrough
	case "warning":
		fallthrough
	case "err":
		fallthrough
	case "crit":
		fallthrough
	case "alert":
		fallthrough
	case "emerg":
		*e = LogglyPluginLogLevel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LogglyPluginLogLevel: %v", v)
	}
}

type LogglyPluginServerErrorsSeverity string

const (
	LogglyPluginServerErrorsSeverityDebug   LogglyPluginServerErrorsSeverity = "debug"
	LogglyPluginServerErrorsSeverityInfo    LogglyPluginServerErrorsSeverity = "info"
	LogglyPluginServerErrorsSeverityNotice  LogglyPluginServerErrorsSeverity = "notice"
	LogglyPluginServerErrorsSeverityWarning LogglyPluginServerErrorsSeverity = "warning"
	LogglyPluginServerErrorsSeverityErr     LogglyPluginServerErrorsSeverity = "err"
	LogglyPluginServerErrorsSeverityCrit    LogglyPluginServerErrorsSeverity = "crit"
	LogglyPluginServerErrorsSeverityAlert   LogglyPluginServerErrorsSeverity = "alert"
	LogglyPluginServerErrorsSeverityEmerg   LogglyPluginServerErrorsSeverity = "emerg"
)

func (e LogglyPluginServerErrorsSeverity) ToPointer() *LogglyPluginServerErrorsSeverity {
	return &e
}
func (e *LogglyPluginServerErrorsSeverity) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "debug":
		fallthrough
	case "info":
		fallthrough
	case "notice":
		fallthrough
	case "warning":
		fallthrough
	case "err":
		fallthrough
	case "crit":
		fallthrough
	case "alert":
		fallthrough
	case "emerg":
		*e = LogglyPluginServerErrorsSeverity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LogglyPluginServerErrorsSeverity: %v", v)
	}
}

type LogglyPluginSuccessfulSeverity string

const (
	LogglyPluginSuccessfulSeverityDebug   LogglyPluginSuccessfulSeverity = "debug"
	LogglyPluginSuccessfulSeverityInfo    LogglyPluginSuccessfulSeverity = "info"
	LogglyPluginSuccessfulSeverityNotice  LogglyPluginSuccessfulSeverity = "notice"
	LogglyPluginSuccessfulSeverityWarning LogglyPluginSuccessfulSeverity = "warning"
	LogglyPluginSuccessfulSeverityErr     LogglyPluginSuccessfulSeverity = "err"
	LogglyPluginSuccessfulSeverityCrit    LogglyPluginSuccessfulSeverity = "crit"
	LogglyPluginSuccessfulSeverityAlert   LogglyPluginSuccessfulSeverity = "alert"
	LogglyPluginSuccessfulSeverityEmerg   LogglyPluginSuccessfulSeverity = "emerg"
)

func (e LogglyPluginSuccessfulSeverity) ToPointer() *LogglyPluginSuccessfulSeverity {
	return &e
}
func (e *LogglyPluginSuccessfulSeverity) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "debug":
		fallthrough
	case "info":
		fallthrough
	case "notice":
		fallthrough
	case "warning":
		fallthrough
	case "err":
		fallthrough
	case "crit":
		fallthrough
	case "alert":
		fallthrough
	case "emerg":
		*e = LogglyPluginSuccessfulSeverity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LogglyPluginSuccessfulSeverity: %v", v)
	}
}

type LogglyPluginConfig struct {
	ClientErrorsSeverity *LogglyPluginClientErrorsSeverity `json:"client_errors_severity,omitempty"`
	// Lua code as a key-value map
	CustomFieldsByLua map[string]any `json:"custom_fields_by_lua,omitempty"`
	// A string representing a host name, such as example.com.
	Host     *string               `json:"host,omitempty"`
	Key      *string               `json:"key,omitempty"`
	LogLevel *LogglyPluginLogLevel `json:"log_level,omitempty"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port                 *int64                            `json:"port,omitempty"`
	ServerErrorsSeverity *LogglyPluginServerErrorsSeverity `json:"server_errors_severity,omitempty"`
	SuccessfulSeverity   *LogglyPluginSuccessfulSeverity   `json:"successful_severity,omitempty"`
	Tags                 []string                          `json:"tags,omitempty"`
	Timeout              *float64                          `json:"timeout,omitempty"`
}

func (o *LogglyPluginConfig) GetClientErrorsSeverity() *LogglyPluginClientErrorsSeverity {
	if o == nil {
		return nil
	}
	return o.ClientErrorsSeverity
}

func (o *LogglyPluginConfig) GetCustomFieldsByLua() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomFieldsByLua
}

func (o *LogglyPluginConfig) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *LogglyPluginConfig) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *LogglyPluginConfig) GetLogLevel() *LogglyPluginLogLevel {
	if o == nil {
		return nil
	}
	return o.LogLevel
}

func (o *LogglyPluginConfig) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *LogglyPluginConfig) GetServerErrorsSeverity() *LogglyPluginServerErrorsSeverity {
	if o == nil {
		return nil
	}
	return o.ServerErrorsSeverity
}

func (o *LogglyPluginConfig) GetSuccessfulSeverity() *LogglyPluginSuccessfulSeverity {
	if o == nil {
		return nil
	}
	return o.SuccessfulSeverity
}

func (o *LogglyPluginConfig) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *LogglyPluginConfig) GetTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.Timeout
}

type LogglyPluginProtocols string

const (
	LogglyPluginProtocolsGrpc           LogglyPluginProtocols = "grpc"
	LogglyPluginProtocolsGrpcs          LogglyPluginProtocols = "grpcs"
	LogglyPluginProtocolsHTTP           LogglyPluginProtocols = "http"
	LogglyPluginProtocolsHTTPS          LogglyPluginProtocols = "https"
	LogglyPluginProtocolsTCP            LogglyPluginProtocols = "tcp"
	LogglyPluginProtocolsTLS            LogglyPluginProtocols = "tls"
	LogglyPluginProtocolsTLSPassthrough LogglyPluginProtocols = "tls_passthrough"
	LogglyPluginProtocolsUDP            LogglyPluginProtocols = "udp"
	LogglyPluginProtocolsWs             LogglyPluginProtocols = "ws"
	LogglyPluginProtocolsWss            LogglyPluginProtocols = "wss"
)

func (e LogglyPluginProtocols) ToPointer() *LogglyPluginProtocols {
	return &e
}
func (e *LogglyPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = LogglyPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LogglyPluginProtocols: %v", v)
	}
}

// LogglyPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type LogglyPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *LogglyPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type LogglyPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *LogglyPluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// LogglyPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type LogglyPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *LogglyPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// LogglyPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type LogglyPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *LogglyPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type LogglyPlugin struct {
	Config *LogglyPluginConfig `json:"config,omitempty"`
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool   `json:"enabled,omitempty"`
	ID           *string `json:"id,omitempty"`
	InstanceName *string `json:"instance_name,omitempty"`
	name         *string `const:"loggly" json:"name,omitempty"`
	Ordering     any     `json:"ordering,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []LogglyPluginProtocols `json:"protocols,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64 `json:"updated_at,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *LogglyPluginConsumer      `json:"consumer,omitempty"`
	ConsumerGroup *LogglyPluginConsumerGroup `json:"consumer_group,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *LogglyPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *LogglyPluginService `json:"service,omitempty"`
}

func (l LogglyPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *LogglyPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *LogglyPlugin) GetConfig() *LogglyPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *LogglyPlugin) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *LogglyPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *LogglyPlugin) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *LogglyPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *LogglyPlugin) GetName() *string {
	return types.String("loggly")
}

func (o *LogglyPlugin) GetOrdering() any {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *LogglyPlugin) GetProtocols() []LogglyPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *LogglyPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *LogglyPlugin) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *LogglyPlugin) GetConsumer() *LogglyPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *LogglyPlugin) GetConsumerGroup() *LogglyPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *LogglyPlugin) GetRoute() *LogglyPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *LogglyPlugin) GetService() *LogglyPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
