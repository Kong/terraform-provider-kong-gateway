// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-kong-gateway/internal/provider/types"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/models/shared"
)

func (r *OidcJwkResourceModel) ToSharedOidcJwk() *shared.OidcJwk {
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	var jwks *shared.Jwks
	if r.Jwks != nil {
		var keys []shared.Keys = []shared.Keys{}
		for _, keysItem := range r.Jwks.Keys {
			alg := new(string)
			if !keysItem.Alg.IsUnknown() && !keysItem.Alg.IsNull() {
				*alg = keysItem.Alg.ValueString()
			} else {
				alg = nil
			}
			crv := new(string)
			if !keysItem.Crv.IsUnknown() && !keysItem.Crv.IsNull() {
				*crv = keysItem.Crv.ValueString()
			} else {
				crv = nil
			}
			d := new(string)
			if !keysItem.D.IsUnknown() && !keysItem.D.IsNull() {
				*d = keysItem.D.ValueString()
			} else {
				d = nil
			}
			dp := new(string)
			if !keysItem.Dp.IsUnknown() && !keysItem.Dp.IsNull() {
				*dp = keysItem.Dp.ValueString()
			} else {
				dp = nil
			}
			dq := new(string)
			if !keysItem.Dq.IsUnknown() && !keysItem.Dq.IsNull() {
				*dq = keysItem.Dq.ValueString()
			} else {
				dq = nil
			}
			e := new(string)
			if !keysItem.E.IsUnknown() && !keysItem.E.IsNull() {
				*e = keysItem.E.ValueString()
			} else {
				e = nil
			}
			issuer := new(string)
			if !keysItem.Issuer.IsUnknown() && !keysItem.Issuer.IsNull() {
				*issuer = keysItem.Issuer.ValueString()
			} else {
				issuer = nil
			}
			k := new(string)
			if !keysItem.K.IsUnknown() && !keysItem.K.IsNull() {
				*k = keysItem.K.ValueString()
			} else {
				k = nil
			}
			var keyOps []string = []string{}
			for _, keyOpsItem := range keysItem.KeyOps {
				keyOps = append(keyOps, keyOpsItem.ValueString())
			}
			kid := new(string)
			if !keysItem.Kid.IsUnknown() && !keysItem.Kid.IsNull() {
				*kid = keysItem.Kid.ValueString()
			} else {
				kid = nil
			}
			kty := new(string)
			if !keysItem.Kty.IsUnknown() && !keysItem.Kty.IsNull() {
				*kty = keysItem.Kty.ValueString()
			} else {
				kty = nil
			}
			n := new(string)
			if !keysItem.N.IsUnknown() && !keysItem.N.IsNull() {
				*n = keysItem.N.ValueString()
			} else {
				n = nil
			}
			oth := new(string)
			if !keysItem.Oth.IsUnknown() && !keysItem.Oth.IsNull() {
				*oth = keysItem.Oth.ValueString()
			} else {
				oth = nil
			}
			p := new(string)
			if !keysItem.P.IsUnknown() && !keysItem.P.IsNull() {
				*p = keysItem.P.ValueString()
			} else {
				p = nil
			}
			q := new(string)
			if !keysItem.Q.IsUnknown() && !keysItem.Q.IsNull() {
				*q = keysItem.Q.ValueString()
			} else {
				q = nil
			}
			qi := new(string)
			if !keysItem.Qi.IsUnknown() && !keysItem.Qi.IsNull() {
				*qi = keysItem.Qi.ValueString()
			} else {
				qi = nil
			}
			r1 := new(string)
			if !keysItem.R.IsUnknown() && !keysItem.R.IsNull() {
				*r1 = keysItem.R.ValueString()
			} else {
				r1 = nil
			}
			t := new(string)
			if !keysItem.T.IsUnknown() && !keysItem.T.IsNull() {
				*t = keysItem.T.ValueString()
			} else {
				t = nil
			}
			use := new(string)
			if !keysItem.Use.IsUnknown() && !keysItem.Use.IsNull() {
				*use = keysItem.Use.ValueString()
			} else {
				use = nil
			}
			x := new(string)
			if !keysItem.X.IsUnknown() && !keysItem.X.IsNull() {
				*x = keysItem.X.ValueString()
			} else {
				x = nil
			}
			var x5c []string = []string{}
			for _, x5cItem := range keysItem.X5c {
				x5c = append(x5c, x5cItem.ValueString())
			}
			x5t := new(string)
			if !keysItem.X5t.IsUnknown() && !keysItem.X5t.IsNull() {
				*x5t = keysItem.X5t.ValueString()
			} else {
				x5t = nil
			}
			x5tNumberS256 := new(string)
			if !keysItem.X5tNumberS256.IsUnknown() && !keysItem.X5tNumberS256.IsNull() {
				*x5tNumberS256 = keysItem.X5tNumberS256.ValueString()
			} else {
				x5tNumberS256 = nil
			}
			x5u := new(string)
			if !keysItem.X5u.IsUnknown() && !keysItem.X5u.IsNull() {
				*x5u = keysItem.X5u.ValueString()
			} else {
				x5u = nil
			}
			y := new(string)
			if !keysItem.Y.IsUnknown() && !keysItem.Y.IsNull() {
				*y = keysItem.Y.ValueString()
			} else {
				y = nil
			}
			keys = append(keys, shared.Keys{
				Alg:           alg,
				Crv:           crv,
				D:             d,
				Dp:            dp,
				Dq:            dq,
				E:             e,
				Issuer:        issuer,
				K:             k,
				KeyOps:        keyOps,
				Kid:           kid,
				Kty:           kty,
				N:             n,
				Oth:           oth,
				P:             p,
				Q:             q,
				Qi:            qi,
				R:             r1,
				T:             t,
				Use:           use,
				X:             x,
				X5c:           x5c,
				X5t:           x5t,
				X5tNumberS256: x5tNumberS256,
				X5u:           x5u,
				Y:             y,
			})
		}
		jwks = &shared.Jwks{
			Keys: keys,
		}
	}
	out := shared.OidcJwk{
		ID:   id,
		Jwks: jwks,
	}
	return &out
}

func (r *OidcJwkResourceModel) RefreshFromSharedOidcJwk(resp *shared.OidcJwk) {
	if resp != nil {
		r.ID = types.StringPointerValue(resp.ID)
		if resp.Jwks == nil {
			r.Jwks = nil
		} else {
			r.Jwks = &tfTypes.Jwks{}
			r.Jwks.Keys = []tfTypes.Keys{}
			if len(r.Jwks.Keys) > len(resp.Jwks.Keys) {
				r.Jwks.Keys = r.Jwks.Keys[:len(resp.Jwks.Keys)]
			}
			for keysCount, keysItem := range resp.Jwks.Keys {
				var keys1 tfTypes.Keys
				keys1.Alg = types.StringPointerValue(keysItem.Alg)
				keys1.Crv = types.StringPointerValue(keysItem.Crv)
				keys1.D = types.StringPointerValue(keysItem.D)
				keys1.Dp = types.StringPointerValue(keysItem.Dp)
				keys1.Dq = types.StringPointerValue(keysItem.Dq)
				keys1.E = types.StringPointerValue(keysItem.E)
				keys1.Issuer = types.StringPointerValue(keysItem.Issuer)
				keys1.K = types.StringPointerValue(keysItem.K)
				keys1.KeyOps = make([]types.String, 0, len(keysItem.KeyOps))
				for _, v := range keysItem.KeyOps {
					keys1.KeyOps = append(keys1.KeyOps, types.StringValue(v))
				}
				keys1.Kid = types.StringPointerValue(keysItem.Kid)
				keys1.Kty = types.StringPointerValue(keysItem.Kty)
				keys1.N = types.StringPointerValue(keysItem.N)
				keys1.Oth = types.StringPointerValue(keysItem.Oth)
				keys1.P = types.StringPointerValue(keysItem.P)
				keys1.Q = types.StringPointerValue(keysItem.Q)
				keys1.Qi = types.StringPointerValue(keysItem.Qi)
				keys1.R = types.StringPointerValue(keysItem.R)
				keys1.T = types.StringPointerValue(keysItem.T)
				keys1.Use = types.StringPointerValue(keysItem.Use)
				keys1.X = types.StringPointerValue(keysItem.X)
				keys1.X5c = make([]types.String, 0, len(keysItem.X5c))
				for _, v := range keysItem.X5c {
					keys1.X5c = append(keys1.X5c, types.StringValue(v))
				}
				keys1.X5t = types.StringPointerValue(keysItem.X5t)
				keys1.X5tNumberS256 = types.StringPointerValue(keysItem.X5tNumberS256)
				keys1.X5u = types.StringPointerValue(keysItem.X5u)
				keys1.Y = types.StringPointerValue(keysItem.Y)
				if keysCount+1 > len(r.Jwks.Keys) {
					r.Jwks.Keys = append(r.Jwks.Keys, keys1)
				} else {
					r.Jwks.Keys[keysCount].Alg = keys1.Alg
					r.Jwks.Keys[keysCount].Crv = keys1.Crv
					r.Jwks.Keys[keysCount].D = keys1.D
					r.Jwks.Keys[keysCount].Dp = keys1.Dp
					r.Jwks.Keys[keysCount].Dq = keys1.Dq
					r.Jwks.Keys[keysCount].E = keys1.E
					r.Jwks.Keys[keysCount].Issuer = keys1.Issuer
					r.Jwks.Keys[keysCount].K = keys1.K
					r.Jwks.Keys[keysCount].KeyOps = keys1.KeyOps
					r.Jwks.Keys[keysCount].Kid = keys1.Kid
					r.Jwks.Keys[keysCount].Kty = keys1.Kty
					r.Jwks.Keys[keysCount].N = keys1.N
					r.Jwks.Keys[keysCount].Oth = keys1.Oth
					r.Jwks.Keys[keysCount].P = keys1.P
					r.Jwks.Keys[keysCount].Q = keys1.Q
					r.Jwks.Keys[keysCount].Qi = keys1.Qi
					r.Jwks.Keys[keysCount].R = keys1.R
					r.Jwks.Keys[keysCount].T = keys1.T
					r.Jwks.Keys[keysCount].Use = keys1.Use
					r.Jwks.Keys[keysCount].X = keys1.X
					r.Jwks.Keys[keysCount].X5c = keys1.X5c
					r.Jwks.Keys[keysCount].X5t = keys1.X5t
					r.Jwks.Keys[keysCount].X5tNumberS256 = keys1.X5tNumberS256
					r.Jwks.Keys[keysCount].X5u = keys1.X5u
					r.Jwks.Keys[keysCount].Y = keys1.Y
				}
			}
		}
	}
}
