// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/internal/utils"
)

// Generator - The generator to use for the correlation ID. Accepted values are `uuid`, `uuid#counter`, and `tracker`. See [Generators](#generators).
type Generator string

const (
	GeneratorTracker           Generator = "tracker"
	GeneratorUUID              Generator = "uuid"
	GeneratorUUIDNumberCounter Generator = "uuid#counter"
)

func (e Generator) ToPointer() *Generator {
	return &e
}
func (e *Generator) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "tracker":
		fallthrough
	case "uuid":
		fallthrough
	case "uuid#counter":
		*e = Generator(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Generator: %v", v)
	}
}

type CorrelationIDPluginConfig struct {
	// Whether to echo the header back to downstream (the client).
	EchoDownstream *bool `json:"echo_downstream,omitempty"`
	// The generator to use for the correlation ID. Accepted values are `uuid`, `uuid#counter`, and `tracker`. See [Generators](#generators).
	Generator *Generator `json:"generator,omitempty"`
	// The HTTP header name to use for the correlation ID.
	HeaderName *string `json:"header_name,omitempty"`
}

func (c *CorrelationIDPluginConfig) GetEchoDownstream() *bool {
	if c == nil {
		return nil
	}
	return c.EchoDownstream
}

func (c *CorrelationIDPluginConfig) GetGenerator() *Generator {
	if c == nil {
		return nil
	}
	return c.Generator
}

func (c *CorrelationIDPluginConfig) GetHeaderName() *string {
	if c == nil {
		return nil
	}
	return c.HeaderName
}

// CorrelationIDPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type CorrelationIDPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (c *CorrelationIDPluginConsumer) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

type CorrelationIDPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (c *CorrelationIDPluginAfter) GetAccess() []string {
	if c == nil {
		return nil
	}
	return c.Access
}

type CorrelationIDPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (c *CorrelationIDPluginBefore) GetAccess() []string {
	if c == nil {
		return nil
	}
	return c.Access
}

type CorrelationIDPluginOrdering struct {
	After  *CorrelationIDPluginAfter  `json:"after,omitempty"`
	Before *CorrelationIDPluginBefore `json:"before,omitempty"`
}

func (c *CorrelationIDPluginOrdering) GetAfter() *CorrelationIDPluginAfter {
	if c == nil {
		return nil
	}
	return c.After
}

func (c *CorrelationIDPluginOrdering) GetBefore() *CorrelationIDPluginBefore {
	if c == nil {
		return nil
	}
	return c.Before
}

type CorrelationIDPluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

func (c *CorrelationIDPluginPartials) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *CorrelationIDPluginPartials) GetName() *string {
	if c == nil {
		return nil
	}
	return c.Name
}

func (c *CorrelationIDPluginPartials) GetPath() *string {
	if c == nil {
		return nil
	}
	return c.Path
}

type CorrelationIDPluginProtocols string

const (
	CorrelationIDPluginProtocolsGrpc  CorrelationIDPluginProtocols = "grpc"
	CorrelationIDPluginProtocolsGrpcs CorrelationIDPluginProtocols = "grpcs"
	CorrelationIDPluginProtocolsHTTP  CorrelationIDPluginProtocols = "http"
	CorrelationIDPluginProtocolsHTTPS CorrelationIDPluginProtocols = "https"
)

func (e CorrelationIDPluginProtocols) ToPointer() *CorrelationIDPluginProtocols {
	return &e
}
func (e *CorrelationIDPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		*e = CorrelationIDPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CorrelationIDPluginProtocols: %v", v)
	}
}

// CorrelationIDPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type CorrelationIDPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (c *CorrelationIDPluginRoute) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

// CorrelationIDPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type CorrelationIDPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (c *CorrelationIDPluginService) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

type CorrelationIDPlugin struct {
	Config *CorrelationIDPluginConfig `json:"config,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer *CorrelationIDPluginConsumer `json:"consumer,omitempty"`
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `json:"enabled,omitempty"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string                      `json:"instance_name,omitempty"`
	name         string                       `const:"correlation-id" json:"name"`
	Ordering     *CorrelationIDPluginOrdering `json:"ordering,omitempty"`
	// A list of partials to be used by the plugin.
	Partials []CorrelationIDPluginPartials `json:"partials,omitempty"`
	// A set of strings representing HTTP protocols.
	Protocols []CorrelationIDPluginProtocols `json:"protocols,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *CorrelationIDPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *CorrelationIDPluginService `json:"service,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64 `json:"updated_at,omitempty"`
}

func (c CorrelationIDPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CorrelationIDPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"name"}); err != nil {
		return err
	}
	return nil
}

func (c *CorrelationIDPlugin) GetConfig() *CorrelationIDPluginConfig {
	if c == nil {
		return nil
	}
	return c.Config
}

func (c *CorrelationIDPlugin) GetConsumer() *CorrelationIDPluginConsumer {
	if c == nil {
		return nil
	}
	return c.Consumer
}

func (c *CorrelationIDPlugin) GetCreatedAt() *int64 {
	if c == nil {
		return nil
	}
	return c.CreatedAt
}

func (c *CorrelationIDPlugin) GetEnabled() *bool {
	if c == nil {
		return nil
	}
	return c.Enabled
}

func (c *CorrelationIDPlugin) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *CorrelationIDPlugin) GetInstanceName() *string {
	if c == nil {
		return nil
	}
	return c.InstanceName
}

func (c *CorrelationIDPlugin) GetName() string {
	return "correlation-id"
}

func (c *CorrelationIDPlugin) GetOrdering() *CorrelationIDPluginOrdering {
	if c == nil {
		return nil
	}
	return c.Ordering
}

func (c *CorrelationIDPlugin) GetPartials() []CorrelationIDPluginPartials {
	if c == nil {
		return nil
	}
	return c.Partials
}

func (c *CorrelationIDPlugin) GetProtocols() []CorrelationIDPluginProtocols {
	if c == nil {
		return nil
	}
	return c.Protocols
}

func (c *CorrelationIDPlugin) GetRoute() *CorrelationIDPluginRoute {
	if c == nil {
		return nil
	}
	return c.Route
}

func (c *CorrelationIDPlugin) GetService() *CorrelationIDPluginService {
	if c == nil {
		return nil
	}
	return c.Service
}

func (c *CorrelationIDPlugin) GetTags() []string {
	if c == nil {
		return nil
	}
	return c.Tags
}

func (c *CorrelationIDPlugin) GetUpdatedAt() *int64 {
	if c == nil {
		return nil
	}
	return c.UpdatedAt
}
