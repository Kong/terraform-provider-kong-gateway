// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/internal/utils"
)

type Memory struct {
	// The name of the shared dictionary in which to hold cache entities when the memory strategy is selected. This dictionary currently must be defined manually in the Kong Nginx template.
	DictionaryName *string `json:"dictionary_name,omitempty"`
}

func (m *Memory) GetDictionaryName() *string {
	if m == nil {
		return nil
	}
	return m.DictionaryName
}

type GraphqlProxyCacheAdvancedPluginClusterNodes struct {
	// A string representing a host name, such as example.com.
	IP *string `json:"ip,omitempty"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port *int64 `json:"port,omitempty"`
}

func (g *GraphqlProxyCacheAdvancedPluginClusterNodes) GetIP() *string {
	if g == nil {
		return nil
	}
	return g.IP
}

func (g *GraphqlProxyCacheAdvancedPluginClusterNodes) GetPort() *int64 {
	if g == nil {
		return nil
	}
	return g.Port
}

type GraphqlProxyCacheAdvancedPluginSentinelNodes struct {
	// A string representing a host name, such as example.com.
	Host *string `json:"host,omitempty"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port *int64 `json:"port,omitempty"`
}

func (g *GraphqlProxyCacheAdvancedPluginSentinelNodes) GetHost() *string {
	if g == nil {
		return nil
	}
	return g.Host
}

func (g *GraphqlProxyCacheAdvancedPluginSentinelNodes) GetPort() *int64 {
	if g == nil {
		return nil
	}
	return g.Port
}

// GraphqlProxyCacheAdvancedPluginSentinelRole - Sentinel role to use for Redis connections when the `redis` strategy is defined. Defining this value implies using Redis Sentinel.
type GraphqlProxyCacheAdvancedPluginSentinelRole string

const (
	GraphqlProxyCacheAdvancedPluginSentinelRoleAny    GraphqlProxyCacheAdvancedPluginSentinelRole = "any"
	GraphqlProxyCacheAdvancedPluginSentinelRoleMaster GraphqlProxyCacheAdvancedPluginSentinelRole = "master"
	GraphqlProxyCacheAdvancedPluginSentinelRoleSlave  GraphqlProxyCacheAdvancedPluginSentinelRole = "slave"
)

func (e GraphqlProxyCacheAdvancedPluginSentinelRole) ToPointer() *GraphqlProxyCacheAdvancedPluginSentinelRole {
	return &e
}
func (e *GraphqlProxyCacheAdvancedPluginSentinelRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "any":
		fallthrough
	case "master":
		fallthrough
	case "slave":
		*e = GraphqlProxyCacheAdvancedPluginSentinelRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GraphqlProxyCacheAdvancedPluginSentinelRole: %v", v)
	}
}

type GraphqlProxyCacheAdvancedPluginRedis struct {
	// Maximum retry attempts for redirection.
	ClusterMaxRedirections *int64 `json:"cluster_max_redirections,omitempty"`
	// Cluster addresses to use for Redis connections when the `redis` strategy is defined. Defining this field implies using a Redis Cluster. The minimum length of the array is 1 element.
	ClusterNodes []GraphqlProxyCacheAdvancedPluginClusterNodes `json:"cluster_nodes,omitempty"`
	// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
	ConnectTimeout *int64 `json:"connect_timeout,omitempty"`
	// If the connection to Redis is proxied (e.g. Envoy), set it `true`. Set the `host` and `port` to point to the proxy address.
	ConnectionIsProxied *bool `json:"connection_is_proxied,omitempty"`
	// Database to use for the Redis connection when using the `redis` strategy
	Database *int64 `json:"database,omitempty"`
	// A string representing a host name, such as example.com.
	Host *string `json:"host,omitempty"`
	// Limits the total number of opened connections for a pool. If the connection pool is full, connection queues above the limit go into the backlog queue. If the backlog queue is full, subsequent connect operations fail and return `nil`. Queued operations (subject to set timeouts) resume once the number of connections in the pool is less than `keepalive_pool_size`. If latency is high or throughput is low, try increasing this value. Empirically, this value is larger than `keepalive_pool_size`.
	KeepaliveBacklog *int64 `json:"keepalive_backlog,omitempty"`
	// The size limit for every cosocket connection pool associated with every remote server, per worker process. If neither `keepalive_pool_size` nor `keepalive_backlog` is specified, no pool is created. If `keepalive_pool_size` isn't specified but `keepalive_backlog` is specified, then the pool uses the default value. Try to increase (e.g. 512) this value if latency is high or throughput is low.
	KeepalivePoolSize *int64 `json:"keepalive_pool_size,omitempty"`
	// Password to use for Redis connections. If undefined, no AUTH commands are sent to Redis.
	Password *string `json:"password,omitempty"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port *int64 `json:"port,omitempty"`
	// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
	ReadTimeout *int64 `json:"read_timeout,omitempty"`
	// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
	SendTimeout *int64 `json:"send_timeout,omitempty"`
	// Sentinel master to use for Redis connections. Defining this value implies using Redis Sentinel.
	SentinelMaster *string `json:"sentinel_master,omitempty"`
	// Sentinel node addresses to use for Redis connections when the `redis` strategy is defined. Defining this field implies using a Redis Sentinel. The minimum length of the array is 1 element.
	SentinelNodes []GraphqlProxyCacheAdvancedPluginSentinelNodes `json:"sentinel_nodes,omitempty"`
	// Sentinel password to authenticate with a Redis Sentinel instance. If undefined, no AUTH commands are sent to Redis Sentinels.
	SentinelPassword *string `json:"sentinel_password,omitempty"`
	// Sentinel role to use for Redis connections when the `redis` strategy is defined. Defining this value implies using Redis Sentinel.
	SentinelRole *GraphqlProxyCacheAdvancedPluginSentinelRole `json:"sentinel_role,omitempty"`
	// Sentinel username to authenticate with a Redis Sentinel instance. If undefined, ACL authentication won't be performed. This requires Redis v6.2.0+.
	SentinelUsername *string `json:"sentinel_username,omitempty"`
	// A string representing an SNI (server name indication) value for TLS.
	ServerName *string `json:"server_name,omitempty"`
	// If set to true, uses SSL to connect to Redis.
	Ssl *bool `json:"ssl,omitempty"`
	// If set to true, verifies the validity of the server SSL certificate. If setting this parameter, also configure `lua_ssl_trusted_certificate` in `kong.conf` to specify the CA (or server) certificate used by your Redis server. You may also need to configure `lua_ssl_verify_depth` accordingly.
	SslVerify *bool `json:"ssl_verify,omitempty"`
	// Username to use for Redis connections. If undefined, ACL authentication won't be performed. This requires Redis v6.0.0+. To be compatible with Redis v5.x.y, you can set it to `default`.
	Username *string `json:"username,omitempty"`
}

func (g *GraphqlProxyCacheAdvancedPluginRedis) GetClusterMaxRedirections() *int64 {
	if g == nil {
		return nil
	}
	return g.ClusterMaxRedirections
}

func (g *GraphqlProxyCacheAdvancedPluginRedis) GetClusterNodes() []GraphqlProxyCacheAdvancedPluginClusterNodes {
	if g == nil {
		return nil
	}
	return g.ClusterNodes
}

func (g *GraphqlProxyCacheAdvancedPluginRedis) GetConnectTimeout() *int64 {
	if g == nil {
		return nil
	}
	return g.ConnectTimeout
}

func (g *GraphqlProxyCacheAdvancedPluginRedis) GetConnectionIsProxied() *bool {
	if g == nil {
		return nil
	}
	return g.ConnectionIsProxied
}

func (g *GraphqlProxyCacheAdvancedPluginRedis) GetDatabase() *int64 {
	if g == nil {
		return nil
	}
	return g.Database
}

func (g *GraphqlProxyCacheAdvancedPluginRedis) GetHost() *string {
	if g == nil {
		return nil
	}
	return g.Host
}

func (g *GraphqlProxyCacheAdvancedPluginRedis) GetKeepaliveBacklog() *int64 {
	if g == nil {
		return nil
	}
	return g.KeepaliveBacklog
}

func (g *GraphqlProxyCacheAdvancedPluginRedis) GetKeepalivePoolSize() *int64 {
	if g == nil {
		return nil
	}
	return g.KeepalivePoolSize
}

func (g *GraphqlProxyCacheAdvancedPluginRedis) GetPassword() *string {
	if g == nil {
		return nil
	}
	return g.Password
}

func (g *GraphqlProxyCacheAdvancedPluginRedis) GetPort() *int64 {
	if g == nil {
		return nil
	}
	return g.Port
}

func (g *GraphqlProxyCacheAdvancedPluginRedis) GetReadTimeout() *int64 {
	if g == nil {
		return nil
	}
	return g.ReadTimeout
}

func (g *GraphqlProxyCacheAdvancedPluginRedis) GetSendTimeout() *int64 {
	if g == nil {
		return nil
	}
	return g.SendTimeout
}

func (g *GraphqlProxyCacheAdvancedPluginRedis) GetSentinelMaster() *string {
	if g == nil {
		return nil
	}
	return g.SentinelMaster
}

func (g *GraphqlProxyCacheAdvancedPluginRedis) GetSentinelNodes() []GraphqlProxyCacheAdvancedPluginSentinelNodes {
	if g == nil {
		return nil
	}
	return g.SentinelNodes
}

func (g *GraphqlProxyCacheAdvancedPluginRedis) GetSentinelPassword() *string {
	if g == nil {
		return nil
	}
	return g.SentinelPassword
}

func (g *GraphqlProxyCacheAdvancedPluginRedis) GetSentinelRole() *GraphqlProxyCacheAdvancedPluginSentinelRole {
	if g == nil {
		return nil
	}
	return g.SentinelRole
}

func (g *GraphqlProxyCacheAdvancedPluginRedis) GetSentinelUsername() *string {
	if g == nil {
		return nil
	}
	return g.SentinelUsername
}

func (g *GraphqlProxyCacheAdvancedPluginRedis) GetServerName() *string {
	if g == nil {
		return nil
	}
	return g.ServerName
}

func (g *GraphqlProxyCacheAdvancedPluginRedis) GetSsl() *bool {
	if g == nil {
		return nil
	}
	return g.Ssl
}

func (g *GraphqlProxyCacheAdvancedPluginRedis) GetSslVerify() *bool {
	if g == nil {
		return nil
	}
	return g.SslVerify
}

func (g *GraphqlProxyCacheAdvancedPluginRedis) GetUsername() *string {
	if g == nil {
		return nil
	}
	return g.Username
}

// GraphqlProxyCacheAdvancedPluginStrategy - The backing data store in which to hold cached entities. Accepted value is `memory`.
type GraphqlProxyCacheAdvancedPluginStrategy string

const (
	GraphqlProxyCacheAdvancedPluginStrategyMemory GraphqlProxyCacheAdvancedPluginStrategy = "memory"
	GraphqlProxyCacheAdvancedPluginStrategyRedis  GraphqlProxyCacheAdvancedPluginStrategy = "redis"
)

func (e GraphqlProxyCacheAdvancedPluginStrategy) ToPointer() *GraphqlProxyCacheAdvancedPluginStrategy {
	return &e
}
func (e *GraphqlProxyCacheAdvancedPluginStrategy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "memory":
		fallthrough
	case "redis":
		*e = GraphqlProxyCacheAdvancedPluginStrategy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GraphqlProxyCacheAdvancedPluginStrategy: %v", v)
	}
}

type GraphqlProxyCacheAdvancedPluginConfig struct {
	// Unhandled errors while trying to retrieve a cache entry (such as redis down) are resolved with `Bypass`, with the request going upstream.
	BypassOnErr *bool `json:"bypass_on_err,omitempty"`
	// TTL in seconds of cache entities. Must be a value greater than 0.
	CacheTTL *int64                                `json:"cache_ttl,omitempty"`
	Memory   *Memory                               `json:"memory,omitempty"`
	Redis    *GraphqlProxyCacheAdvancedPluginRedis `json:"redis,omitempty"`
	// The backing data store in which to hold cached entities. Accepted value is `memory`.
	Strategy *GraphqlProxyCacheAdvancedPluginStrategy `json:"strategy,omitempty"`
	// Relevant headers considered for the cache key. If undefined, none of the headers are taken into consideration.
	VaryHeaders []string `json:"vary_headers,omitempty"`
}

func (g *GraphqlProxyCacheAdvancedPluginConfig) GetBypassOnErr() *bool {
	if g == nil {
		return nil
	}
	return g.BypassOnErr
}

func (g *GraphqlProxyCacheAdvancedPluginConfig) GetCacheTTL() *int64 {
	if g == nil {
		return nil
	}
	return g.CacheTTL
}

func (g *GraphqlProxyCacheAdvancedPluginConfig) GetMemory() *Memory {
	if g == nil {
		return nil
	}
	return g.Memory
}

func (g *GraphqlProxyCacheAdvancedPluginConfig) GetRedis() *GraphqlProxyCacheAdvancedPluginRedis {
	if g == nil {
		return nil
	}
	return g.Redis
}

func (g *GraphqlProxyCacheAdvancedPluginConfig) GetStrategy() *GraphqlProxyCacheAdvancedPluginStrategy {
	if g == nil {
		return nil
	}
	return g.Strategy
}

func (g *GraphqlProxyCacheAdvancedPluginConfig) GetVaryHeaders() []string {
	if g == nil {
		return nil
	}
	return g.VaryHeaders
}

// GraphqlProxyCacheAdvancedPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type GraphqlProxyCacheAdvancedPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (g *GraphqlProxyCacheAdvancedPluginConsumer) GetID() *string {
	if g == nil {
		return nil
	}
	return g.ID
}

type GraphqlProxyCacheAdvancedPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (g *GraphqlProxyCacheAdvancedPluginAfter) GetAccess() []string {
	if g == nil {
		return nil
	}
	return g.Access
}

type GraphqlProxyCacheAdvancedPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (g *GraphqlProxyCacheAdvancedPluginBefore) GetAccess() []string {
	if g == nil {
		return nil
	}
	return g.Access
}

type GraphqlProxyCacheAdvancedPluginOrdering struct {
	After  *GraphqlProxyCacheAdvancedPluginAfter  `json:"after,omitempty"`
	Before *GraphqlProxyCacheAdvancedPluginBefore `json:"before,omitempty"`
}

func (g *GraphqlProxyCacheAdvancedPluginOrdering) GetAfter() *GraphqlProxyCacheAdvancedPluginAfter {
	if g == nil {
		return nil
	}
	return g.After
}

func (g *GraphqlProxyCacheAdvancedPluginOrdering) GetBefore() *GraphqlProxyCacheAdvancedPluginBefore {
	if g == nil {
		return nil
	}
	return g.Before
}

type GraphqlProxyCacheAdvancedPluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

func (g *GraphqlProxyCacheAdvancedPluginPartials) GetID() *string {
	if g == nil {
		return nil
	}
	return g.ID
}

func (g *GraphqlProxyCacheAdvancedPluginPartials) GetName() *string {
	if g == nil {
		return nil
	}
	return g.Name
}

func (g *GraphqlProxyCacheAdvancedPluginPartials) GetPath() *string {
	if g == nil {
		return nil
	}
	return g.Path
}

type GraphqlProxyCacheAdvancedPluginProtocols string

const (
	GraphqlProxyCacheAdvancedPluginProtocolsGrpc  GraphqlProxyCacheAdvancedPluginProtocols = "grpc"
	GraphqlProxyCacheAdvancedPluginProtocolsGrpcs GraphqlProxyCacheAdvancedPluginProtocols = "grpcs"
	GraphqlProxyCacheAdvancedPluginProtocolsHTTP  GraphqlProxyCacheAdvancedPluginProtocols = "http"
	GraphqlProxyCacheAdvancedPluginProtocolsHTTPS GraphqlProxyCacheAdvancedPluginProtocols = "https"
)

func (e GraphqlProxyCacheAdvancedPluginProtocols) ToPointer() *GraphqlProxyCacheAdvancedPluginProtocols {
	return &e
}
func (e *GraphqlProxyCacheAdvancedPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		*e = GraphqlProxyCacheAdvancedPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GraphqlProxyCacheAdvancedPluginProtocols: %v", v)
	}
}

// GraphqlProxyCacheAdvancedPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type GraphqlProxyCacheAdvancedPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (g *GraphqlProxyCacheAdvancedPluginRoute) GetID() *string {
	if g == nil {
		return nil
	}
	return g.ID
}

// GraphqlProxyCacheAdvancedPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type GraphqlProxyCacheAdvancedPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (g *GraphqlProxyCacheAdvancedPluginService) GetID() *string {
	if g == nil {
		return nil
	}
	return g.ID
}

type GraphqlProxyCacheAdvancedPlugin struct {
	Config *GraphqlProxyCacheAdvancedPluginConfig `json:"config,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer *GraphqlProxyCacheAdvancedPluginConsumer `json:"consumer,omitempty"`
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `json:"enabled,omitempty"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string                                  `json:"instance_name,omitempty"`
	name         string                                   `const:"graphql-proxy-cache-advanced" json:"name"`
	Ordering     *GraphqlProxyCacheAdvancedPluginOrdering `json:"ordering,omitempty"`
	// A list of partials to be used by the plugin.
	Partials []GraphqlProxyCacheAdvancedPluginPartials `json:"partials,omitempty"`
	// A set of strings representing HTTP protocols.
	Protocols []GraphqlProxyCacheAdvancedPluginProtocols `json:"protocols,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *GraphqlProxyCacheAdvancedPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *GraphqlProxyCacheAdvancedPluginService `json:"service,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64 `json:"updated_at,omitempty"`
}

func (g GraphqlProxyCacheAdvancedPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GraphqlProxyCacheAdvancedPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"name"}); err != nil {
		return err
	}
	return nil
}

func (g *GraphqlProxyCacheAdvancedPlugin) GetConfig() *GraphqlProxyCacheAdvancedPluginConfig {
	if g == nil {
		return nil
	}
	return g.Config
}

func (g *GraphqlProxyCacheAdvancedPlugin) GetConsumer() *GraphqlProxyCacheAdvancedPluginConsumer {
	if g == nil {
		return nil
	}
	return g.Consumer
}

func (g *GraphqlProxyCacheAdvancedPlugin) GetCreatedAt() *int64 {
	if g == nil {
		return nil
	}
	return g.CreatedAt
}

func (g *GraphqlProxyCacheAdvancedPlugin) GetEnabled() *bool {
	if g == nil {
		return nil
	}
	return g.Enabled
}

func (g *GraphqlProxyCacheAdvancedPlugin) GetID() *string {
	if g == nil {
		return nil
	}
	return g.ID
}

func (g *GraphqlProxyCacheAdvancedPlugin) GetInstanceName() *string {
	if g == nil {
		return nil
	}
	return g.InstanceName
}

func (g *GraphqlProxyCacheAdvancedPlugin) GetName() string {
	return "graphql-proxy-cache-advanced"
}

func (g *GraphqlProxyCacheAdvancedPlugin) GetOrdering() *GraphqlProxyCacheAdvancedPluginOrdering {
	if g == nil {
		return nil
	}
	return g.Ordering
}

func (g *GraphqlProxyCacheAdvancedPlugin) GetPartials() []GraphqlProxyCacheAdvancedPluginPartials {
	if g == nil {
		return nil
	}
	return g.Partials
}

func (g *GraphqlProxyCacheAdvancedPlugin) GetProtocols() []GraphqlProxyCacheAdvancedPluginProtocols {
	if g == nil {
		return nil
	}
	return g.Protocols
}

func (g *GraphqlProxyCacheAdvancedPlugin) GetRoute() *GraphqlProxyCacheAdvancedPluginRoute {
	if g == nil {
		return nil
	}
	return g.Route
}

func (g *GraphqlProxyCacheAdvancedPlugin) GetService() *GraphqlProxyCacheAdvancedPluginService {
	if g == nil {
		return nil
	}
	return g.Service
}

func (g *GraphqlProxyCacheAdvancedPlugin) GetTags() []string {
	if g == nil {
		return nil
	}
	return g.Tags
}

func (g *GraphqlProxyCacheAdvancedPlugin) GetUpdatedAt() *int64 {
	if g == nil {
		return nil
	}
	return g.UpdatedAt
}
