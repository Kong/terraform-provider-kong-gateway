// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/internal/utils"
)

type Config struct {
	// Arbitrary group names that are allowed to consume the service or route. One of `config.allow` or `config.deny` must be specified.
	Allow []string `json:"allow,omitempty"`
	// If enabled (`true`), the authenticated groups will always be used even when an authenticated consumer already exists. If the authenticated groups don't exist, it will fallback to use the groups associated with the consumer. By default the authenticated groups will only be used when there is no consumer or the consumer is anonymous.
	AlwaysUseAuthenticatedGroups *bool `json:"always_use_authenticated_groups,omitempty"`
	// Arbitrary group names that are not allowed to consume the service or route. One of `config.allow` or `config.deny` must be specified.
	Deny []string `json:"deny,omitempty"`
	// If enabled (`true`), prevents the `X-Consumer-Groups` header from being sent in the request to the upstream service.
	HideGroupsHeader *bool `json:"hide_groups_header,omitempty"`
	// If enabled (`true`), allows the consumer-groups to be used in the `allow|deny` fields
	IncludeConsumerGroups *bool `json:"include_consumer_groups,omitempty"`
}

func (c *Config) GetAllow() []string {
	if c == nil {
		return nil
	}
	return c.Allow
}

func (c *Config) GetAlwaysUseAuthenticatedGroups() *bool {
	if c == nil {
		return nil
	}
	return c.AlwaysUseAuthenticatedGroups
}

func (c *Config) GetDeny() []string {
	if c == nil {
		return nil
	}
	return c.Deny
}

func (c *Config) GetHideGroupsHeader() *bool {
	if c == nil {
		return nil
	}
	return c.HideGroupsHeader
}

func (c *Config) GetIncludeConsumerGroups() *bool {
	if c == nil {
		return nil
	}
	return c.IncludeConsumerGroups
}

type ACLPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (a *ACLPluginAfter) GetAccess() []string {
	if a == nil {
		return nil
	}
	return a.Access
}

type ACLPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (a *ACLPluginBefore) GetAccess() []string {
	if a == nil {
		return nil
	}
	return a.Access
}

type ACLPluginOrdering struct {
	After  *ACLPluginAfter  `json:"after,omitempty"`
	Before *ACLPluginBefore `json:"before,omitempty"`
}

func (a *ACLPluginOrdering) GetAfter() *ACLPluginAfter {
	if a == nil {
		return nil
	}
	return a.After
}

func (a *ACLPluginOrdering) GetBefore() *ACLPluginBefore {
	if a == nil {
		return nil
	}
	return a.Before
}

type ACLPluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

func (a *ACLPluginPartials) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *ACLPluginPartials) GetName() *string {
	if a == nil {
		return nil
	}
	return a.Name
}

func (a *ACLPluginPartials) GetPath() *string {
	if a == nil {
		return nil
	}
	return a.Path
}

type ACLPluginProtocols string

const (
	ACLPluginProtocolsGrpc  ACLPluginProtocols = "grpc"
	ACLPluginProtocolsGrpcs ACLPluginProtocols = "grpcs"
	ACLPluginProtocolsHTTP  ACLPluginProtocols = "http"
	ACLPluginProtocolsHTTPS ACLPluginProtocols = "https"
)

func (e ACLPluginProtocols) ToPointer() *ACLPluginProtocols {
	return &e
}
func (e *ACLPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		*e = ACLPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ACLPluginProtocols: %v", v)
	}
}

// ACLPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type ACLPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (a *ACLPluginRoute) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

// ACLPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type ACLPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (a *ACLPluginService) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

type ACLPlugin struct {
	Config *Config `json:"config,omitempty"`
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `json:"enabled,omitempty"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string            `json:"instance_name,omitempty"`
	name         string             `const:"acl" json:"name"`
	Ordering     *ACLPluginOrdering `json:"ordering,omitempty"`
	// A list of partials to be used by the plugin.
	Partials []ACLPluginPartials `json:"partials,omitempty"`
	// A set of strings representing HTTP protocols.
	Protocols []ACLPluginProtocols `json:"protocols,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *ACLPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *ACLPluginService `json:"service,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64 `json:"updated_at,omitempty"`
}

func (a ACLPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *ACLPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"name"}); err != nil {
		return err
	}
	return nil
}

func (a *ACLPlugin) GetConfig() *Config {
	if a == nil {
		return nil
	}
	return a.Config
}

func (a *ACLPlugin) GetCreatedAt() *int64 {
	if a == nil {
		return nil
	}
	return a.CreatedAt
}

func (a *ACLPlugin) GetEnabled() *bool {
	if a == nil {
		return nil
	}
	return a.Enabled
}

func (a *ACLPlugin) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *ACLPlugin) GetInstanceName() *string {
	if a == nil {
		return nil
	}
	return a.InstanceName
}

func (a *ACLPlugin) GetName() string {
	return "acl"
}

func (a *ACLPlugin) GetOrdering() *ACLPluginOrdering {
	if a == nil {
		return nil
	}
	return a.Ordering
}

func (a *ACLPlugin) GetPartials() []ACLPluginPartials {
	if a == nil {
		return nil
	}
	return a.Partials
}

func (a *ACLPlugin) GetProtocols() []ACLPluginProtocols {
	if a == nil {
		return nil
	}
	return a.Protocols
}

func (a *ACLPlugin) GetRoute() *ACLPluginRoute {
	if a == nil {
		return nil
	}
	return a.Route
}

func (a *ACLPlugin) GetService() *ACLPluginService {
	if a == nil {
		return nil
	}
	return a.Service
}

func (a *ACLPlugin) GetTags() []string {
	if a == nil {
		return nil
	}
	return a.Tags
}

func (a *ACLPlugin) GetUpdatedAt() *int64 {
	if a == nil {
		return nil
	}
	return a.UpdatedAt
}
