// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/internal/utils"
)

// GuardingMode - The guardrail mode to use for the request
type GuardingMode string

const (
	GuardingModeBoth   GuardingMode = "BOTH"
	GuardingModeInput  GuardingMode = "INPUT"
	GuardingModeOutput GuardingMode = "OUTPUT"
)

func (e GuardingMode) ToPointer() *GuardingMode {
	return &e
}
func (e *GuardingMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BOTH":
		fallthrough
	case "INPUT":
		fallthrough
	case "OUTPUT":
		*e = GuardingMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GuardingMode: %v", v)
	}
}

// TextSource - Select where to pick the 'text' for the Content Guard Services request.
type TextSource string

const (
	TextSourceConcatenateAllContent  TextSource = "concatenate_all_content"
	TextSourceConcatenateUserContent TextSource = "concatenate_user_content"
)

func (e TextSource) ToPointer() *TextSource {
	return &e
}
func (e *TextSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "concatenate_all_content":
		fallthrough
	case "concatenate_user_content":
		*e = TextSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TextSource: %v", v)
	}
}

type AiAwsGuardrailsPluginConfig struct {
	// The AWS access key ID to use for authentication
	AwsAccessKeyID *string `json:"aws_access_key_id,omitempty"`
	// The target AWS IAM role ARN used to access the guardrails service
	AwsAssumeRoleArn *string `json:"aws_assume_role_arn,omitempty"`
	// The AWS region to use for the Bedrock API
	AwsRegion string `json:"aws_region"`
	// The identifier of the assumed role session
	AwsRoleSessionName *string `json:"aws_role_session_name,omitempty"`
	// The AWS secret access key to use for authentication
	AwsSecretAccessKey *string `json:"aws_secret_access_key,omitempty"`
	// Override the STS endpoint URL when assuming a different role
	AwsStsEndpointURL *string `json:"aws_sts_endpoint_url,omitempty"`
	// The guardrail mode to use for the request
	GuardingMode *GuardingMode `json:"guarding_mode,omitempty"`
	// The guardrail identifier used in the request to apply the guardrail
	GuardrailsID string `json:"guardrails_id"`
	// The guardrail version used in the request to apply the guardrail
	GuardrailsVersion string `json:"guardrails_version"`
	// The amount of bytes receiving from upstream to be buffered before sending to the guardrails service. This only applies to the response content guard.
	ResponseBufferSize *float64 `json:"response_buffer_size,omitempty"`
	// Stop processing if an error occurs
	StopOnError *bool `json:"stop_on_error,omitempty"`
	// Select where to pick the 'text' for the Content Guard Services request.
	TextSource *TextSource `json:"text_source,omitempty"`
	// Connection timeout with the bedrock service
	Timeout *float64 `json:"timeout,omitempty"`
}

func (a *AiAwsGuardrailsPluginConfig) GetAwsAccessKeyID() *string {
	if a == nil {
		return nil
	}
	return a.AwsAccessKeyID
}

func (a *AiAwsGuardrailsPluginConfig) GetAwsAssumeRoleArn() *string {
	if a == nil {
		return nil
	}
	return a.AwsAssumeRoleArn
}

func (a *AiAwsGuardrailsPluginConfig) GetAwsRegion() string {
	if a == nil {
		return ""
	}
	return a.AwsRegion
}

func (a *AiAwsGuardrailsPluginConfig) GetAwsRoleSessionName() *string {
	if a == nil {
		return nil
	}
	return a.AwsRoleSessionName
}

func (a *AiAwsGuardrailsPluginConfig) GetAwsSecretAccessKey() *string {
	if a == nil {
		return nil
	}
	return a.AwsSecretAccessKey
}

func (a *AiAwsGuardrailsPluginConfig) GetAwsStsEndpointURL() *string {
	if a == nil {
		return nil
	}
	return a.AwsStsEndpointURL
}

func (a *AiAwsGuardrailsPluginConfig) GetGuardingMode() *GuardingMode {
	if a == nil {
		return nil
	}
	return a.GuardingMode
}

func (a *AiAwsGuardrailsPluginConfig) GetGuardrailsID() string {
	if a == nil {
		return ""
	}
	return a.GuardrailsID
}

func (a *AiAwsGuardrailsPluginConfig) GetGuardrailsVersion() string {
	if a == nil {
		return ""
	}
	return a.GuardrailsVersion
}

func (a *AiAwsGuardrailsPluginConfig) GetResponseBufferSize() *float64 {
	if a == nil {
		return nil
	}
	return a.ResponseBufferSize
}

func (a *AiAwsGuardrailsPluginConfig) GetStopOnError() *bool {
	if a == nil {
		return nil
	}
	return a.StopOnError
}

func (a *AiAwsGuardrailsPluginConfig) GetTextSource() *TextSource {
	if a == nil {
		return nil
	}
	return a.TextSource
}

func (a *AiAwsGuardrailsPluginConfig) GetTimeout() *float64 {
	if a == nil {
		return nil
	}
	return a.Timeout
}

// AiAwsGuardrailsPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type AiAwsGuardrailsPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (a *AiAwsGuardrailsPluginConsumer) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

// AiAwsGuardrailsPluginConsumerGroup - If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups
type AiAwsGuardrailsPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (a *AiAwsGuardrailsPluginConsumerGroup) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

type AiAwsGuardrailsPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (a *AiAwsGuardrailsPluginAfter) GetAccess() []string {
	if a == nil {
		return nil
	}
	return a.Access
}

type AiAwsGuardrailsPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (a *AiAwsGuardrailsPluginBefore) GetAccess() []string {
	if a == nil {
		return nil
	}
	return a.Access
}

type AiAwsGuardrailsPluginOrdering struct {
	After  *AiAwsGuardrailsPluginAfter  `json:"after,omitempty"`
	Before *AiAwsGuardrailsPluginBefore `json:"before,omitempty"`
}

func (a *AiAwsGuardrailsPluginOrdering) GetAfter() *AiAwsGuardrailsPluginAfter {
	if a == nil {
		return nil
	}
	return a.After
}

func (a *AiAwsGuardrailsPluginOrdering) GetBefore() *AiAwsGuardrailsPluginBefore {
	if a == nil {
		return nil
	}
	return a.Before
}

type AiAwsGuardrailsPluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

func (a *AiAwsGuardrailsPluginPartials) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *AiAwsGuardrailsPluginPartials) GetName() *string {
	if a == nil {
		return nil
	}
	return a.Name
}

func (a *AiAwsGuardrailsPluginPartials) GetPath() *string {
	if a == nil {
		return nil
	}
	return a.Path
}

type AiAwsGuardrailsPluginProtocols string

const (
	AiAwsGuardrailsPluginProtocolsGrpc  AiAwsGuardrailsPluginProtocols = "grpc"
	AiAwsGuardrailsPluginProtocolsGrpcs AiAwsGuardrailsPluginProtocols = "grpcs"
	AiAwsGuardrailsPluginProtocolsHTTP  AiAwsGuardrailsPluginProtocols = "http"
	AiAwsGuardrailsPluginProtocolsHTTPS AiAwsGuardrailsPluginProtocols = "https"
)

func (e AiAwsGuardrailsPluginProtocols) ToPointer() *AiAwsGuardrailsPluginProtocols {
	return &e
}
func (e *AiAwsGuardrailsPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		*e = AiAwsGuardrailsPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiAwsGuardrailsPluginProtocols: %v", v)
	}
}

// AiAwsGuardrailsPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type AiAwsGuardrailsPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (a *AiAwsGuardrailsPluginRoute) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

// AiAwsGuardrailsPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type AiAwsGuardrailsPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (a *AiAwsGuardrailsPluginService) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

type AiAwsGuardrailsPlugin struct {
	Config *AiAwsGuardrailsPluginConfig `json:"config,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer *AiAwsGuardrailsPluginConsumer `json:"consumer,omitempty"`
	// If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups
	ConsumerGroup *AiAwsGuardrailsPluginConsumerGroup `json:"consumer_group,omitempty"`
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `json:"enabled,omitempty"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string                        `json:"instance_name,omitempty"`
	name         string                         `const:"ai-aws-guardrails" json:"name"`
	Ordering     *AiAwsGuardrailsPluginOrdering `json:"ordering,omitempty"`
	// A list of partials to be used by the plugin.
	Partials []AiAwsGuardrailsPluginPartials `json:"partials,omitempty"`
	// A set of strings representing HTTP protocols.
	Protocols []AiAwsGuardrailsPluginProtocols `json:"protocols,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *AiAwsGuardrailsPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *AiAwsGuardrailsPluginService `json:"service,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64 `json:"updated_at,omitempty"`
}

func (a AiAwsGuardrailsPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AiAwsGuardrailsPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"name"}); err != nil {
		return err
	}
	return nil
}

func (a *AiAwsGuardrailsPlugin) GetConfig() *AiAwsGuardrailsPluginConfig {
	if a == nil {
		return nil
	}
	return a.Config
}

func (a *AiAwsGuardrailsPlugin) GetConsumer() *AiAwsGuardrailsPluginConsumer {
	if a == nil {
		return nil
	}
	return a.Consumer
}

func (a *AiAwsGuardrailsPlugin) GetConsumerGroup() *AiAwsGuardrailsPluginConsumerGroup {
	if a == nil {
		return nil
	}
	return a.ConsumerGroup
}

func (a *AiAwsGuardrailsPlugin) GetCreatedAt() *int64 {
	if a == nil {
		return nil
	}
	return a.CreatedAt
}

func (a *AiAwsGuardrailsPlugin) GetEnabled() *bool {
	if a == nil {
		return nil
	}
	return a.Enabled
}

func (a *AiAwsGuardrailsPlugin) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *AiAwsGuardrailsPlugin) GetInstanceName() *string {
	if a == nil {
		return nil
	}
	return a.InstanceName
}

func (a *AiAwsGuardrailsPlugin) GetName() string {
	return "ai-aws-guardrails"
}

func (a *AiAwsGuardrailsPlugin) GetOrdering() *AiAwsGuardrailsPluginOrdering {
	if a == nil {
		return nil
	}
	return a.Ordering
}

func (a *AiAwsGuardrailsPlugin) GetPartials() []AiAwsGuardrailsPluginPartials {
	if a == nil {
		return nil
	}
	return a.Partials
}

func (a *AiAwsGuardrailsPlugin) GetProtocols() []AiAwsGuardrailsPluginProtocols {
	if a == nil {
		return nil
	}
	return a.Protocols
}

func (a *AiAwsGuardrailsPlugin) GetRoute() *AiAwsGuardrailsPluginRoute {
	if a == nil {
		return nil
	}
	return a.Route
}

func (a *AiAwsGuardrailsPlugin) GetService() *AiAwsGuardrailsPluginService {
	if a == nil {
		return nil
	}
	return a.Service
}

func (a *AiAwsGuardrailsPlugin) GetTags() []string {
	if a == nil {
		return nil
	}
	return a.Tags
}

func (a *AiAwsGuardrailsPlugin) GetUpdatedAt() *int64 {
	if a == nil {
		return nil
	}
	return a.UpdatedAt
}
