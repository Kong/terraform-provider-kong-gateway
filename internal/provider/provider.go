// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/ephemeral"
	"github.com/hashicorp/terraform-plugin-framework/provider"
	"github.com/hashicorp/terraform-plugin-framework/provider/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/models/shared"
	"net/http"
)

var _ provider.Provider = (*KongGatewayProvider)(nil)
var _ provider.ProviderWithEphemeralResources = (*KongGatewayProvider)(nil)

type KongGatewayProvider struct {
	// version is set to the provider version on release, "dev" when the
	// provider is built and ran locally, and "test" when running acceptance
	// testing.
	version string
}

// KongGatewayProviderModel describes the provider data model.
type KongGatewayProviderModel struct {
	AdminToken  types.String `tfsdk:"admin_token"`
	HTTPHeaders types.Map    `tfsdk:"http_headers"`
	Hostname    types.String `tfsdk:"hostname"`
	Path        types.String `tfsdk:"path"`
	Port        types.String `tfsdk:"port"`
	Protocol    types.String `tfsdk:"protocol"`
	ServerURL   types.String `tfsdk:"server_url"`
}

func (p *KongGatewayProvider) Metadata(ctx context.Context, req provider.MetadataRequest, resp *provider.MetadataResponse) {
	resp.TypeName = "kong-gateway"
	resp.Version = p.version
}

func (p *KongGatewayProvider) Schema(ctx context.Context, req provider.SchemaRequest, resp *provider.SchemaResponse) {
	resp.Schema = schema.Schema{
		Attributes: map[string]schema.Attribute{
			"admin_token": schema.StringAttribute{
				MarkdownDescription: `API Key.`,
				Optional:            true,
				Sensitive:           true,
			},
			"hostname": schema.StringAttribute{
				MarkdownDescription: `Hostname for Kong's Admin API (defaults to localhost)`,
				Optional:            true,
			},
			"http_headers": schema.MapAttribute{
				Description: `HTTP headers to include in all requests`,
				ElementType: types.StringType,
				Optional:    true,
			},
			"path": schema.StringAttribute{
				MarkdownDescription: `Base path for Kong's Admin API (defaults to /)`,
				Optional:            true,
			},
			"port": schema.StringAttribute{
				MarkdownDescription: `Port for Kong's Admin API (defaults to 8001)`,
				Optional:            true,
			},
			"protocol": schema.StringAttribute{
				MarkdownDescription: `Protocol for requests to Kong's Admin API (defaults to http)`,
				Optional:            true,
			},
			"server_url": schema.StringAttribute{
				Description: `Server URL (defaults to {protocol}://{hostname}:{port}{path})`,
				Optional:    true,
			},
		},
		MarkdownDescription: `Kong Enterprise Admin API: OpenAPI 3.0 spec for Kong Gateway's Admin API.` + "\n" +
			`` + "\n" +
			`You can learn more about Kong Gateway at [developer.konghq.com](https://developer.konghq.com).` + "\n" +
			`Give Kong a star at the [Kong/kong](https://github.com/kong/kong) repository.`,
	}
}

func (p *KongGatewayProvider) Configure(ctx context.Context, req provider.ConfigureRequest, resp *provider.ConfigureResponse) {
	var data KongGatewayProviderModel

	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	serverUrl := data.ServerURL.ValueString()

	if serverUrl == "" {
		serverUrl = "{protocol}://{hostname}:{port}{path}"
	}

	serverUrlParams := make(map[string]string)

	if data.Hostname.ValueString() != "" {
		serverUrlParams["hostname"] = data.Hostname.ValueString()
	}

	if _, ok := serverUrlParams["hostname"]; !ok {
		serverUrlParams["hostname"] = "localhost"
	}

	if data.Path.ValueString() != "" {
		serverUrlParams["path"] = data.Path.ValueString()
	}

	if _, ok := serverUrlParams["path"]; !ok {
		serverUrlParams["path"] = "/"
	}

	if data.Port.ValueString() != "" {
		serverUrlParams["port"] = data.Port.ValueString()
	}

	if _, ok := serverUrlParams["port"]; !ok {
		serverUrlParams["port"] = "8001"
	}

	if data.Protocol.ValueString() != "" {
		serverUrlParams["protocol"] = data.Protocol.ValueString()
	}

	if _, ok := serverUrlParams["protocol"]; !ok {
		serverUrlParams["protocol"] = "http"
	}

	security := shared.Security{}

	if !data.AdminToken.IsUnknown() {
		security.AdminToken = data.AdminToken.ValueStringPointer()
	}

	providerHTTPTransportOpts := ProviderHTTPTransportOpts{
		SetHeaders: make(map[string]string),
		Transport:  http.DefaultTransport,
	}

	resp.Diagnostics.Append(data.HTTPHeaders.ElementsAs(ctx, &providerHTTPTransportOpts.SetHeaders, false)...)
	if resp.Diagnostics.HasError() {
		return
	}

	httpClient := http.DefaultClient
	httpClient.Transport = NewProviderHTTPTransport(providerHTTPTransportOpts)

	opts := []sdk.SDKOption{
		sdk.WithTemplatedServerURL(serverUrl, serverUrlParams),
		sdk.WithSecurity(security),
		sdk.WithClient(httpClient),
	}

	client := sdk.New(opts...)
	resp.DataSourceData = client
	resp.EphemeralResourceData = client
	resp.ResourceData = client
}

func (p *KongGatewayProvider) Resources(ctx context.Context) []func() resource.Resource {
	return []func() resource.Resource{
		NewACLResource,
		NewBasicAuthResource,
		NewCACertificateResource,
		NewCertificateResource,
		NewConsumerResource,
		NewConsumerGroupResource,
		NewConsumerGroupMemberResource,
		NewHMACAuthResource,
		NewJwtResource,
		NewKeyResource,
		NewKeyAuthResource,
		NewKeySetResource,
		NewMTLSAuthResource,
		NewPartialResource,
		NewPluginBasicAuthResource,
		NewRouteResource,
		NewRouteExpressionResource,
		NewServiceResource,
		NewSniResource,
		NewTargetResource,
		NewUpstreamResource,
		NewVaultResource,
		NewWorkspaceResource,
	}
}

func (p *KongGatewayProvider) DataSources(ctx context.Context) []func() datasource.DataSource {
	return []func() datasource.DataSource{}
}

func (p *KongGatewayProvider) EphemeralResources(ctx context.Context) []func() ephemeral.EphemeralResource {
	return []func() ephemeral.EphemeralResource{}
}

func New(version string) func() provider.Provider {
	return func() provider.Provider {
		return &KongGatewayProvider{
			version: version,
		}
	}
}
