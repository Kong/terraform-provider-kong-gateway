// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type Algorithm string

const (
	AlgorithmEs256   Algorithm = "ES256"
	AlgorithmEs256K  Algorithm = "ES256K"
	AlgorithmEs384   Algorithm = "ES384"
	AlgorithmEs512   Algorithm = "ES512"
	AlgorithmEsb256  Algorithm = "ESB256"
	AlgorithmEsb320  Algorithm = "ESB320"
	AlgorithmEsb384  Algorithm = "ESB384"
	AlgorithmEsb512  Algorithm = "ESB512"
	AlgorithmEsp256  Algorithm = "ESP256"
	AlgorithmEsp384  Algorithm = "ESP384"
	AlgorithmEsp512  Algorithm = "ESP512"
	AlgorithmEd25519 Algorithm = "Ed25519"
	AlgorithmEd448   Algorithm = "Ed448"
	AlgorithmEdDsa   Algorithm = "EdDSA"
	AlgorithmHs256   Algorithm = "HS256"
	AlgorithmHs384   Algorithm = "HS384"
	AlgorithmHs512   Algorithm = "HS512"
	AlgorithmPs256   Algorithm = "PS256"
	AlgorithmPs384   Algorithm = "PS384"
	AlgorithmPs512   Algorithm = "PS512"
	AlgorithmRs256   Algorithm = "RS256"
	AlgorithmRs384   Algorithm = "RS384"
	AlgorithmRs512   Algorithm = "RS512"
)

func (e Algorithm) ToPointer() *Algorithm {
	return &e
}
func (e *Algorithm) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ES256":
		fallthrough
	case "ES256K":
		fallthrough
	case "ES384":
		fallthrough
	case "ES512":
		fallthrough
	case "ESB256":
		fallthrough
	case "ESB320":
		fallthrough
	case "ESB384":
		fallthrough
	case "ESB512":
		fallthrough
	case "ESP256":
		fallthrough
	case "ESP384":
		fallthrough
	case "ESP512":
		fallthrough
	case "Ed25519":
		fallthrough
	case "Ed448":
		fallthrough
	case "EdDSA":
		fallthrough
	case "HS256":
		fallthrough
	case "HS384":
		fallthrough
	case "HS512":
		fallthrough
	case "PS256":
		fallthrough
	case "PS384":
		fallthrough
	case "PS512":
		fallthrough
	case "RS256":
		fallthrough
	case "RS384":
		fallthrough
	case "RS512":
		*e = Algorithm(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Algorithm: %v", v)
	}
}

type JWTConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (j *JWTConsumer) GetID() *string {
	if j == nil {
		return nil
	}
	return j.ID
}

type Jwt struct {
	Algorithm *Algorithm   `json:"algorithm,omitempty"`
	Consumer  *JWTConsumer `json:"consumer,omitempty"`
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// A string representing a UUID (universally unique identifier).
	ID           *string `json:"id,omitempty"`
	Key          *string `json:"key,omitempty"`
	RsaPublicKey *string `json:"rsa_public_key,omitempty"`
	Secret       *string `json:"secret,omitempty"`
	// A set of strings representing tags.
	Tags []string `json:"tags,omitempty"`
}

func (j *Jwt) GetAlgorithm() *Algorithm {
	if j == nil {
		return nil
	}
	return j.Algorithm
}

func (j *Jwt) GetConsumer() *JWTConsumer {
	if j == nil {
		return nil
	}
	return j.Consumer
}

func (j *Jwt) GetCreatedAt() *int64 {
	if j == nil {
		return nil
	}
	return j.CreatedAt
}

func (j *Jwt) GetID() *string {
	if j == nil {
		return nil
	}
	return j.ID
}

func (j *Jwt) GetKey() *string {
	if j == nil {
		return nil
	}
	return j.Key
}

func (j *Jwt) GetRsaPublicKey() *string {
	if j == nil {
		return nil
	}
	return j.RsaPublicKey
}

func (j *Jwt) GetSecret() *string {
	if j == nil {
		return nil
	}
	return j.Secret
}

func (j *Jwt) GetTags() []string {
	if j == nil {
		return nil
	}
	return j.Tags
}
