// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-kong-gateway/internal/provider/types"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/models/shared"
)

func (r *PluginTLSMetadataHeadersResourceModel) ToSharedTLSMetadataHeadersPlugin() *shared.TLSMetadataHeadersPlugin {
	createdAt := new(int64)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt = r.CreatedAt.ValueInt64()
	} else {
		createdAt = nil
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	instanceName := new(string)
	if !r.InstanceName.IsUnknown() && !r.InstanceName.IsNull() {
		*instanceName = r.InstanceName.ValueString()
	} else {
		instanceName = nil
	}
	var ordering *shared.TLSMetadataHeadersPluginOrdering
	if r.Ordering != nil {
		var after *shared.TLSMetadataHeadersPluginAfter
		if r.Ordering.After != nil {
			var access []string = []string{}
			for _, accessItem := range r.Ordering.After.Access {
				access = append(access, accessItem.ValueString())
			}
			after = &shared.TLSMetadataHeadersPluginAfter{
				Access: access,
			}
		}
		var before *shared.TLSMetadataHeadersPluginBefore
		if r.Ordering.Before != nil {
			var access1 []string = []string{}
			for _, accessItem1 := range r.Ordering.Before.Access {
				access1 = append(access1, accessItem1.ValueString())
			}
			before = &shared.TLSMetadataHeadersPluginBefore{
				Access: access1,
			}
		}
		ordering = &shared.TLSMetadataHeadersPluginOrdering{
			After:  after,
			Before: before,
		}
	}
	var partials []shared.TLSMetadataHeadersPluginPartials = []shared.TLSMetadataHeadersPluginPartials{}
	for _, partialsItem := range r.Partials {
		id1 := new(string)
		if !partialsItem.ID.IsUnknown() && !partialsItem.ID.IsNull() {
			*id1 = partialsItem.ID.ValueString()
		} else {
			id1 = nil
		}
		name := new(string)
		if !partialsItem.Name.IsUnknown() && !partialsItem.Name.IsNull() {
			*name = partialsItem.Name.ValueString()
		} else {
			name = nil
		}
		path := new(string)
		if !partialsItem.Path.IsUnknown() && !partialsItem.Path.IsNull() {
			*path = partialsItem.Path.ValueString()
		} else {
			path = nil
		}
		partials = append(partials, shared.TLSMetadataHeadersPluginPartials{
			ID:   id1,
			Name: name,
			Path: path,
		})
	}
	var tags []string = []string{}
	for _, tagsItem := range r.Tags {
		tags = append(tags, tagsItem.ValueString())
	}
	updatedAt := new(int64)
	if !r.UpdatedAt.IsUnknown() && !r.UpdatedAt.IsNull() {
		*updatedAt = r.UpdatedAt.ValueInt64()
	} else {
		updatedAt = nil
	}
	var config *shared.TLSMetadataHeadersPluginConfig
	if r.Config != nil {
		clientCertFingerprintHeaderName := new(string)
		if !r.Config.ClientCertFingerprintHeaderName.IsUnknown() && !r.Config.ClientCertFingerprintHeaderName.IsNull() {
			*clientCertFingerprintHeaderName = r.Config.ClientCertFingerprintHeaderName.ValueString()
		} else {
			clientCertFingerprintHeaderName = nil
		}
		clientCertHeaderName := new(string)
		if !r.Config.ClientCertHeaderName.IsUnknown() && !r.Config.ClientCertHeaderName.IsNull() {
			*clientCertHeaderName = r.Config.ClientCertHeaderName.ValueString()
		} else {
			clientCertHeaderName = nil
		}
		clientCertIssuerDnHeaderName := new(string)
		if !r.Config.ClientCertIssuerDnHeaderName.IsUnknown() && !r.Config.ClientCertIssuerDnHeaderName.IsNull() {
			*clientCertIssuerDnHeaderName = r.Config.ClientCertIssuerDnHeaderName.ValueString()
		} else {
			clientCertIssuerDnHeaderName = nil
		}
		clientCertSubjectDnHeaderName := new(string)
		if !r.Config.ClientCertSubjectDnHeaderName.IsUnknown() && !r.Config.ClientCertSubjectDnHeaderName.IsNull() {
			*clientCertSubjectDnHeaderName = r.Config.ClientCertSubjectDnHeaderName.ValueString()
		} else {
			clientCertSubjectDnHeaderName = nil
		}
		clientSerialHeaderName := new(string)
		if !r.Config.ClientSerialHeaderName.IsUnknown() && !r.Config.ClientSerialHeaderName.IsNull() {
			*clientSerialHeaderName = r.Config.ClientSerialHeaderName.ValueString()
		} else {
			clientSerialHeaderName = nil
		}
		injectClientCertDetails := new(bool)
		if !r.Config.InjectClientCertDetails.IsUnknown() && !r.Config.InjectClientCertDetails.IsNull() {
			*injectClientCertDetails = r.Config.InjectClientCertDetails.ValueBool()
		} else {
			injectClientCertDetails = nil
		}
		config = &shared.TLSMetadataHeadersPluginConfig{
			ClientCertFingerprintHeaderName: clientCertFingerprintHeaderName,
			ClientCertHeaderName:            clientCertHeaderName,
			ClientCertIssuerDnHeaderName:    clientCertIssuerDnHeaderName,
			ClientCertSubjectDnHeaderName:   clientCertSubjectDnHeaderName,
			ClientSerialHeaderName:          clientSerialHeaderName,
			InjectClientCertDetails:         injectClientCertDetails,
		}
	}
	var protocols []shared.TLSMetadataHeadersPluginProtocols = []shared.TLSMetadataHeadersPluginProtocols{}
	for _, protocolsItem := range r.Protocols {
		protocols = append(protocols, shared.TLSMetadataHeadersPluginProtocols(protocolsItem.ValueString()))
	}
	var route *shared.TLSMetadataHeadersPluginRoute
	if r.Route != nil {
		id2 := new(string)
		if !r.Route.ID.IsUnknown() && !r.Route.ID.IsNull() {
			*id2 = r.Route.ID.ValueString()
		} else {
			id2 = nil
		}
		route = &shared.TLSMetadataHeadersPluginRoute{
			ID: id2,
		}
	}
	var service *shared.TLSMetadataHeadersPluginService
	if r.Service != nil {
		id3 := new(string)
		if !r.Service.ID.IsUnknown() && !r.Service.ID.IsNull() {
			*id3 = r.Service.ID.ValueString()
		} else {
			id3 = nil
		}
		service = &shared.TLSMetadataHeadersPluginService{
			ID: id3,
		}
	}
	out := shared.TLSMetadataHeadersPlugin{
		CreatedAt:    createdAt,
		Enabled:      enabled,
		ID:           id,
		InstanceName: instanceName,
		Ordering:     ordering,
		Partials:     partials,
		Tags:         tags,
		UpdatedAt:    updatedAt,
		Config:       config,
		Protocols:    protocols,
		Route:        route,
		Service:      service,
	}
	return &out
}

func (r *PluginTLSMetadataHeadersResourceModel) RefreshFromSharedTLSMetadataHeadersPlugin(resp *shared.TLSMetadataHeadersPlugin) {
	if resp != nil {
		if resp.Config == nil {
			r.Config = nil
		} else {
			r.Config = &tfTypes.TLSMetadataHeadersPluginConfig{}
			r.Config.ClientCertFingerprintHeaderName = types.StringPointerValue(resp.Config.ClientCertFingerprintHeaderName)
			r.Config.ClientCertHeaderName = types.StringPointerValue(resp.Config.ClientCertHeaderName)
			r.Config.ClientCertIssuerDnHeaderName = types.StringPointerValue(resp.Config.ClientCertIssuerDnHeaderName)
			r.Config.ClientCertSubjectDnHeaderName = types.StringPointerValue(resp.Config.ClientCertSubjectDnHeaderName)
			r.Config.ClientSerialHeaderName = types.StringPointerValue(resp.Config.ClientSerialHeaderName)
			r.Config.InjectClientCertDetails = types.BoolPointerValue(resp.Config.InjectClientCertDetails)
		}
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringPointerValue(resp.ID)
		r.InstanceName = types.StringPointerValue(resp.InstanceName)
		if resp.Ordering == nil {
			r.Ordering = nil
		} else {
			r.Ordering = &tfTypes.Ordering{}
			if resp.Ordering.After == nil {
				r.Ordering.After = nil
			} else {
				r.Ordering.After = &tfTypes.After{}
				r.Ordering.After.Access = make([]types.String, 0, len(resp.Ordering.After.Access))
				for _, v := range resp.Ordering.After.Access {
					r.Ordering.After.Access = append(r.Ordering.After.Access, types.StringValue(v))
				}
			}
			if resp.Ordering.Before == nil {
				r.Ordering.Before = nil
			} else {
				r.Ordering.Before = &tfTypes.After{}
				r.Ordering.Before.Access = make([]types.String, 0, len(resp.Ordering.Before.Access))
				for _, v := range resp.Ordering.Before.Access {
					r.Ordering.Before.Access = append(r.Ordering.Before.Access, types.StringValue(v))
				}
			}
		}
		if resp.Partials != nil {
			r.Partials = []tfTypes.Partials{}
			if len(r.Partials) > len(resp.Partials) {
				r.Partials = r.Partials[:len(resp.Partials)]
			}
			for partialsCount, partialsItem := range resp.Partials {
				var partials1 tfTypes.Partials
				partials1.ID = types.StringPointerValue(partialsItem.ID)
				partials1.Name = types.StringPointerValue(partialsItem.Name)
				partials1.Path = types.StringPointerValue(partialsItem.Path)
				if partialsCount+1 > len(r.Partials) {
					r.Partials = append(r.Partials, partials1)
				} else {
					r.Partials[partialsCount].ID = partials1.ID
					r.Partials[partialsCount].Name = partials1.Name
					r.Partials[partialsCount].Path = partials1.Path
				}
			}
		}
		r.Protocols = make([]types.String, 0, len(resp.Protocols))
		for _, v := range resp.Protocols {
			r.Protocols = append(r.Protocols, types.StringValue(string(v)))
		}
		if resp.Route == nil {
			r.Route = nil
		} else {
			r.Route = &tfTypes.ACLWithoutParentsConsumer{}
			r.Route.ID = types.StringPointerValue(resp.Route.ID)
		}
		if resp.Service == nil {
			r.Service = nil
		} else {
			r.Service = &tfTypes.ACLWithoutParentsConsumer{}
			r.Service.ID = types.StringPointerValue(resp.Service.ID)
		}
		r.Tags = make([]types.String, 0, len(resp.Tags))
		for _, v := range resp.Tags {
			r.Tags = append(r.Tags, types.StringValue(v))
		}
		r.UpdatedAt = types.Int64PointerValue(resp.UpdatedAt)
	}
}
