// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/internal/utils"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/types"
)

type HeaderType string

const (
	HeaderTypePreserve HeaderType = "preserve"
	HeaderTypeIgnore   HeaderType = "ignore"
	HeaderTypeB3       HeaderType = "b3"
	HeaderTypeB3Single HeaderType = "b3-single"
	HeaderTypeW3c      HeaderType = "w3c"
	HeaderTypeJaeger   HeaderType = "jaeger"
	HeaderTypeOt       HeaderType = "ot"
	HeaderTypeAws      HeaderType = "aws"
	HeaderTypeGcp      HeaderType = "gcp"
	HeaderTypeDatadog  HeaderType = "datadog"
)

func (e HeaderType) ToPointer() *HeaderType {
	return &e
}
func (e *HeaderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "preserve":
		fallthrough
	case "ignore":
		fallthrough
	case "b3":
		fallthrough
	case "b3-single":
		fallthrough
	case "w3c":
		fallthrough
	case "jaeger":
		fallthrough
	case "ot":
		fallthrough
	case "aws":
		fallthrough
	case "gcp":
		fallthrough
	case "datadog":
		*e = HeaderType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for HeaderType: %v", v)
	}
}

// DefaultFormat - The default header format to use when extractors did not match any format in the incoming headers and `inject` is configured with the value: `preserve`. This can happen when no tracing header was found in the request, or the incoming tracing header formats were not included in `extract`.
type DefaultFormat string

const (
	DefaultFormatB3       DefaultFormat = "b3"
	DefaultFormatGcp      DefaultFormat = "gcp"
	DefaultFormatB3Single DefaultFormat = "b3-single"
	DefaultFormatJaeger   DefaultFormat = "jaeger"
	DefaultFormatAws      DefaultFormat = "aws"
	DefaultFormatOt       DefaultFormat = "ot"
	DefaultFormatW3c      DefaultFormat = "w3c"
	DefaultFormatDatadog  DefaultFormat = "datadog"
)

func (e DefaultFormat) ToPointer() *DefaultFormat {
	return &e
}
func (e *DefaultFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "b3":
		fallthrough
	case "gcp":
		fallthrough
	case "b3-single":
		fallthrough
	case "jaeger":
		fallthrough
	case "aws":
		fallthrough
	case "ot":
		fallthrough
	case "w3c":
		fallthrough
	case "datadog":
		*e = DefaultFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DefaultFormat: %v", v)
	}
}

type Extract string

const (
	ExtractB3      Extract = "b3"
	ExtractGcp     Extract = "gcp"
	ExtractJaeger  Extract = "jaeger"
	ExtractAws     Extract = "aws"
	ExtractOt      Extract = "ot"
	ExtractW3c     Extract = "w3c"
	ExtractDatadog Extract = "datadog"
)

func (e Extract) ToPointer() *Extract {
	return &e
}
func (e *Extract) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "b3":
		fallthrough
	case "gcp":
		fallthrough
	case "jaeger":
		fallthrough
	case "aws":
		fallthrough
	case "ot":
		fallthrough
	case "w3c":
		fallthrough
	case "datadog":
		*e = Extract(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Extract: %v", v)
	}
}

type Inject string

const (
	InjectPreserve Inject = "preserve"
	InjectB3       Inject = "b3"
	InjectGcp      Inject = "gcp"
	InjectB3Single Inject = "b3-single"
	InjectJaeger   Inject = "jaeger"
	InjectAws      Inject = "aws"
	InjectOt       Inject = "ot"
	InjectW3c      Inject = "w3c"
	InjectDatadog  Inject = "datadog"
)

func (e Inject) ToPointer() *Inject {
	return &e
}
func (e *Inject) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "preserve":
		fallthrough
	case "b3":
		fallthrough
	case "gcp":
		fallthrough
	case "b3-single":
		fallthrough
	case "jaeger":
		fallthrough
	case "aws":
		fallthrough
	case "ot":
		fallthrough
	case "w3c":
		fallthrough
	case "datadog":
		*e = Inject(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Inject: %v", v)
	}
}

type Propagation struct {
	// Header names to clear after context extraction. This allows to extract the context from a certain header and then remove it from the request, useful when extraction and injection are performed on different header formats and the original header should not be sent to the upstream. If left empty, no headers are cleared.
	Clear []string `json:"clear,omitempty"`
	// The default header format to use when extractors did not match any format in the incoming headers and `inject` is configured with the value: `preserve`. This can happen when no tracing header was found in the request, or the incoming tracing header formats were not included in `extract`.
	DefaultFormat DefaultFormat `json:"default_format"`
	// Header formats used to extract tracing context from incoming requests. If multiple values are specified, the first one found will be used for extraction. If left empty, Kong will not extract any tracing context information from incoming requests and generate a trace with no parent and a new trace ID.
	Extract []Extract `json:"extract,omitempty"`
	// Header formats used to inject tracing context. The value `preserve` will use the same header format as the incoming request. If multiple values are specified, all of them will be used during injection. If left empty, Kong will not inject any tracing context information in outgoing requests.
	Inject []Inject `json:"inject,omitempty"`
}

func (o *Propagation) GetClear() []string {
	if o == nil {
		return nil
	}
	return o.Clear
}

func (o *Propagation) GetDefaultFormat() DefaultFormat {
	if o == nil {
		return DefaultFormat("")
	}
	return o.DefaultFormat
}

func (o *Propagation) GetExtract() []Extract {
	if o == nil {
		return nil
	}
	return o.Extract
}

func (o *Propagation) GetInject() []Inject {
	if o == nil {
		return nil
	}
	return o.Inject
}

type Queue struct {
	// Time in seconds before the initial retry is made for a failing batch.
	InitialRetryDelay *float64 `json:"initial_retry_delay,omitempty"`
	// Maximum number of entries that can be processed at a time.
	MaxBatchSize *int64 `json:"max_batch_size,omitempty"`
	// Maximum number of bytes that can be waiting on a queue, requires string content.
	MaxBytes *int64 `json:"max_bytes,omitempty"`
	// Maximum number of (fractional) seconds to elapse after the first entry was queued before the queue starts calling the handler.
	MaxCoalescingDelay *float64 `json:"max_coalescing_delay,omitempty"`
	// Maximum number of entries that can be waiting on the queue.
	MaxEntries *int64 `json:"max_entries,omitempty"`
	// Maximum time in seconds between retries, caps exponential backoff.
	MaxRetryDelay *float64 `json:"max_retry_delay,omitempty"`
	// Time in seconds before the queue gives up calling a failed handler for a batch.
	MaxRetryTime *float64 `json:"max_retry_time,omitempty"`
}

func (o *Queue) GetInitialRetryDelay() *float64 {
	if o == nil {
		return nil
	}
	return o.InitialRetryDelay
}

func (o *Queue) GetMaxBatchSize() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxBatchSize
}

func (o *Queue) GetMaxBytes() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxBytes
}

func (o *Queue) GetMaxCoalescingDelay() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxCoalescingDelay
}

func (o *Queue) GetMaxEntries() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxEntries
}

func (o *Queue) GetMaxRetryDelay() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxRetryDelay
}

func (o *Queue) GetMaxRetryTime() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxRetryTime
}

type CreateOpentelemetryPluginConfig struct {
	// The delay, in seconds, between two consecutive batches.
	BatchFlushDelay *int64 `json:"batch_flush_delay,omitempty"`
	// The number of spans to be sent in a single batch.
	BatchSpanCount *int64 `json:"batch_span_count,omitempty"`
	// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
	ConnectTimeout *int64 `json:"connect_timeout,omitempty"`
	// A string representing a URL, such as https://example.com/path/to/resource?q=search.
	Endpoint   *string     `json:"endpoint,omitempty"`
	HeaderType *HeaderType `json:"header_type,omitempty"`
	// The custom headers to be added in the HTTP request sent to the OTLP server. This setting is useful for adding the authentication headers (token) for the APM backend.
	Headers                      map[string]any `json:"headers,omitempty"`
	HTTPResponseHeaderForTraceid *string        `json:"http_response_header_for_traceid,omitempty"`
	Propagation                  *Propagation   `json:"propagation,omitempty"`
	Queue                        *Queue         `json:"queue,omitempty"`
	// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
	ReadTimeout        *int64         `json:"read_timeout,omitempty"`
	ResourceAttributes map[string]any `json:"resource_attributes,omitempty"`
	// Tracing sampling rate for configuring the probability-based sampler. When set, this value supersedes the global `tracing_sampling_rate` setting from kong.conf.
	SamplingRate *float64 `json:"sampling_rate,omitempty"`
	// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
	SendTimeout *int64 `json:"send_timeout,omitempty"`
}

func (o *CreateOpentelemetryPluginConfig) GetBatchFlushDelay() *int64 {
	if o == nil {
		return nil
	}
	return o.BatchFlushDelay
}

func (o *CreateOpentelemetryPluginConfig) GetBatchSpanCount() *int64 {
	if o == nil {
		return nil
	}
	return o.BatchSpanCount
}

func (o *CreateOpentelemetryPluginConfig) GetConnectTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.ConnectTimeout
}

func (o *CreateOpentelemetryPluginConfig) GetEndpoint() *string {
	if o == nil {
		return nil
	}
	return o.Endpoint
}

func (o *CreateOpentelemetryPluginConfig) GetHeaderType() *HeaderType {
	if o == nil {
		return nil
	}
	return o.HeaderType
}

func (o *CreateOpentelemetryPluginConfig) GetHeaders() map[string]any {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *CreateOpentelemetryPluginConfig) GetHTTPResponseHeaderForTraceid() *string {
	if o == nil {
		return nil
	}
	return o.HTTPResponseHeaderForTraceid
}

func (o *CreateOpentelemetryPluginConfig) GetPropagation() *Propagation {
	if o == nil {
		return nil
	}
	return o.Propagation
}

func (o *CreateOpentelemetryPluginConfig) GetQueue() *Queue {
	if o == nil {
		return nil
	}
	return o.Queue
}

func (o *CreateOpentelemetryPluginConfig) GetReadTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.ReadTimeout
}

func (o *CreateOpentelemetryPluginConfig) GetResourceAttributes() map[string]any {
	if o == nil {
		return nil
	}
	return o.ResourceAttributes
}

func (o *CreateOpentelemetryPluginConfig) GetSamplingRate() *float64 {
	if o == nil {
		return nil
	}
	return o.SamplingRate
}

func (o *CreateOpentelemetryPluginConfig) GetSendTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.SendTimeout
}

type CreateOpentelemetryPluginProtocols string

const (
	CreateOpentelemetryPluginProtocolsGrpc           CreateOpentelemetryPluginProtocols = "grpc"
	CreateOpentelemetryPluginProtocolsGrpcs          CreateOpentelemetryPluginProtocols = "grpcs"
	CreateOpentelemetryPluginProtocolsHTTP           CreateOpentelemetryPluginProtocols = "http"
	CreateOpentelemetryPluginProtocolsHTTPS          CreateOpentelemetryPluginProtocols = "https"
	CreateOpentelemetryPluginProtocolsTCP            CreateOpentelemetryPluginProtocols = "tcp"
	CreateOpentelemetryPluginProtocolsTLS            CreateOpentelemetryPluginProtocols = "tls"
	CreateOpentelemetryPluginProtocolsTLSPassthrough CreateOpentelemetryPluginProtocols = "tls_passthrough"
	CreateOpentelemetryPluginProtocolsUDP            CreateOpentelemetryPluginProtocols = "udp"
	CreateOpentelemetryPluginProtocolsWs             CreateOpentelemetryPluginProtocols = "ws"
	CreateOpentelemetryPluginProtocolsWss            CreateOpentelemetryPluginProtocols = "wss"
)

func (e CreateOpentelemetryPluginProtocols) ToPointer() *CreateOpentelemetryPluginProtocols {
	return &e
}
func (e *CreateOpentelemetryPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = CreateOpentelemetryPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateOpentelemetryPluginProtocols: %v", v)
	}
}

// CreateOpentelemetryPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type CreateOpentelemetryPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateOpentelemetryPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateOpentelemetryPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateOpentelemetryPluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateOpentelemetryPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type CreateOpentelemetryPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateOpentelemetryPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateOpentelemetryPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type CreateOpentelemetryPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateOpentelemetryPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateOpentelemetryPlugin struct {
	Config *CreateOpentelemetryPluginConfig `json:"config,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool   `json:"enabled,omitempty"`
	InstanceName *string `json:"instance_name,omitempty"`
	name         *string `const:"opentelemetry" json:"name,omitempty"`
	Ordering     any     `json:"ordering,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []CreateOpentelemetryPluginProtocols `json:"protocols,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *CreateOpentelemetryPluginConsumer      `json:"consumer,omitempty"`
	ConsumerGroup *CreateOpentelemetryPluginConsumerGroup `json:"consumer_group,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *CreateOpentelemetryPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *CreateOpentelemetryPluginService `json:"service,omitempty"`
}

func (c CreateOpentelemetryPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateOpentelemetryPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateOpentelemetryPlugin) GetConfig() *CreateOpentelemetryPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *CreateOpentelemetryPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *CreateOpentelemetryPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *CreateOpentelemetryPlugin) GetName() *string {
	return types.String("opentelemetry")
}

func (o *CreateOpentelemetryPlugin) GetOrdering() any {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *CreateOpentelemetryPlugin) GetProtocols() []CreateOpentelemetryPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *CreateOpentelemetryPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *CreateOpentelemetryPlugin) GetConsumer() *CreateOpentelemetryPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *CreateOpentelemetryPlugin) GetConsumerGroup() *CreateOpentelemetryPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *CreateOpentelemetryPlugin) GetRoute() *CreateOpentelemetryPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *CreateOpentelemetryPlugin) GetService() *CreateOpentelemetryPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
