// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/internal/utils"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/types"
)

// DatadogPluginConsumerIdentifier - Authenticated user detail
type DatadogPluginConsumerIdentifier string

const (
	DatadogPluginConsumerIdentifierConsumerID DatadogPluginConsumerIdentifier = "consumer_id"
	DatadogPluginConsumerIdentifierCustomID   DatadogPluginConsumerIdentifier = "custom_id"
	DatadogPluginConsumerIdentifierUsername   DatadogPluginConsumerIdentifier = "username"
)

func (e DatadogPluginConsumerIdentifier) ToPointer() *DatadogPluginConsumerIdentifier {
	return &e
}
func (e *DatadogPluginConsumerIdentifier) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "consumer_id":
		fallthrough
	case "custom_id":
		fallthrough
	case "username":
		*e = DatadogPluginConsumerIdentifier(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DatadogPluginConsumerIdentifier: %v", v)
	}
}

// DatadogPluginName - Datadog metric’s name
type DatadogPluginName string

const (
	DatadogPluginNameKongLatency     DatadogPluginName = "kong_latency"
	DatadogPluginNameLatency         DatadogPluginName = "latency"
	DatadogPluginNameRequestCount    DatadogPluginName = "request_count"
	DatadogPluginNameRequestSize     DatadogPluginName = "request_size"
	DatadogPluginNameResponseSize    DatadogPluginName = "response_size"
	DatadogPluginNameUpstreamLatency DatadogPluginName = "upstream_latency"
)

func (e DatadogPluginName) ToPointer() *DatadogPluginName {
	return &e
}
func (e *DatadogPluginName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "kong_latency":
		fallthrough
	case "latency":
		fallthrough
	case "request_count":
		fallthrough
	case "request_size":
		fallthrough
	case "response_size":
		fallthrough
	case "upstream_latency":
		*e = DatadogPluginName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DatadogPluginName: %v", v)
	}
}

// DatadogPluginStatType - Determines what sort of event the metric represents
type DatadogPluginStatType string

const (
	DatadogPluginStatTypeCounter      DatadogPluginStatType = "counter"
	DatadogPluginStatTypeGauge        DatadogPluginStatType = "gauge"
	DatadogPluginStatTypeHistogram    DatadogPluginStatType = "histogram"
	DatadogPluginStatTypeMeter        DatadogPluginStatType = "meter"
	DatadogPluginStatTypeSet          DatadogPluginStatType = "set"
	DatadogPluginStatTypeTimer        DatadogPluginStatType = "timer"
	DatadogPluginStatTypeDistribution DatadogPluginStatType = "distribution"
)

func (e DatadogPluginStatType) ToPointer() *DatadogPluginStatType {
	return &e
}
func (e *DatadogPluginStatType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "counter":
		fallthrough
	case "gauge":
		fallthrough
	case "histogram":
		fallthrough
	case "meter":
		fallthrough
	case "set":
		fallthrough
	case "timer":
		fallthrough
	case "distribution":
		*e = DatadogPluginStatType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DatadogPluginStatType: %v", v)
	}
}

type DatadogPluginMetrics struct {
	// Authenticated user detail
	ConsumerIdentifier *DatadogPluginConsumerIdentifier `json:"consumer_identifier,omitempty"`
	// Datadog metric’s name
	Name DatadogPluginName `json:"name"`
	// Sampling rate
	SampleRate *float64 `json:"sample_rate,omitempty"`
	// Determines what sort of event the metric represents
	StatType DatadogPluginStatType `json:"stat_type"`
	// List of tags
	Tags []string `json:"tags,omitempty"`
}

func (o *DatadogPluginMetrics) GetConsumerIdentifier() *DatadogPluginConsumerIdentifier {
	if o == nil {
		return nil
	}
	return o.ConsumerIdentifier
}

func (o *DatadogPluginMetrics) GetName() DatadogPluginName {
	if o == nil {
		return DatadogPluginName("")
	}
	return o.Name
}

func (o *DatadogPluginMetrics) GetSampleRate() *float64 {
	if o == nil {
		return nil
	}
	return o.SampleRate
}

func (o *DatadogPluginMetrics) GetStatType() DatadogPluginStatType {
	if o == nil {
		return DatadogPluginStatType("")
	}
	return o.StatType
}

func (o *DatadogPluginMetrics) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

// DatadogPluginConcurrencyLimit - The number of of queue delivery timers. -1 indicates unlimited.
type DatadogPluginConcurrencyLimit int64

const (
	DatadogPluginConcurrencyLimitMinus1 DatadogPluginConcurrencyLimit = -1
	DatadogPluginConcurrencyLimitOne    DatadogPluginConcurrencyLimit = 1
)

func (e DatadogPluginConcurrencyLimit) ToPointer() *DatadogPluginConcurrencyLimit {
	return &e
}
func (e *DatadogPluginConcurrencyLimit) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case -1:
		fallthrough
	case 1:
		*e = DatadogPluginConcurrencyLimit(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DatadogPluginConcurrencyLimit: %v", v)
	}
}

type DatadogPluginQueue struct {
	// The number of of queue delivery timers. -1 indicates unlimited.
	ConcurrencyLimit *DatadogPluginConcurrencyLimit `json:"concurrency_limit,omitempty"`
	// Time in seconds before the initial retry is made for a failing batch.
	InitialRetryDelay *float64 `json:"initial_retry_delay,omitempty"`
	// Maximum number of entries that can be processed at a time.
	MaxBatchSize *int64 `json:"max_batch_size,omitempty"`
	// Maximum number of bytes that can be waiting on a queue, requires string content.
	MaxBytes *int64 `json:"max_bytes,omitempty"`
	// Maximum number of (fractional) seconds to elapse after the first entry was queued before the queue starts calling the handler.
	MaxCoalescingDelay *float64 `json:"max_coalescing_delay,omitempty"`
	// Maximum number of entries that can be waiting on the queue.
	MaxEntries *int64 `json:"max_entries,omitempty"`
	// Maximum time in seconds between retries, caps exponential backoff.
	MaxRetryDelay *float64 `json:"max_retry_delay,omitempty"`
	// Time in seconds before the queue gives up calling a failed handler for a batch.
	MaxRetryTime *float64 `json:"max_retry_time,omitempty"`
}

func (o *DatadogPluginQueue) GetConcurrencyLimit() *DatadogPluginConcurrencyLimit {
	if o == nil {
		return nil
	}
	return o.ConcurrencyLimit
}

func (o *DatadogPluginQueue) GetInitialRetryDelay() *float64 {
	if o == nil {
		return nil
	}
	return o.InitialRetryDelay
}

func (o *DatadogPluginQueue) GetMaxBatchSize() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxBatchSize
}

func (o *DatadogPluginQueue) GetMaxBytes() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxBytes
}

func (o *DatadogPluginQueue) GetMaxCoalescingDelay() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxCoalescingDelay
}

func (o *DatadogPluginQueue) GetMaxEntries() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxEntries
}

func (o *DatadogPluginQueue) GetMaxRetryDelay() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxRetryDelay
}

func (o *DatadogPluginQueue) GetMaxRetryTime() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxRetryTime
}

type DatadogPluginConfig struct {
	// String to be attached as tag of the consumer.
	ConsumerTag *string `json:"consumer_tag,omitempty"`
	// Optional time in seconds. If `queue_size` > 1, this is the max idle time before sending a log with less than `queue_size` records.
	FlushTimeout *float64 `json:"flush_timeout,omitempty"`
	// A string representing a host name, such as example.com.
	Host *string `json:"host,omitempty"`
	// List of metrics to be logged.
	Metrics []DatadogPluginMetrics `json:"metrics,omitempty"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port *int64 `json:"port,omitempty"`
	// String to be attached as a prefix to a metric's name.
	Prefix *string             `json:"prefix,omitempty"`
	Queue  *DatadogPluginQueue `json:"queue,omitempty"`
	// Maximum number of log entries to be sent on each message to the upstream server.
	QueueSize *int64 `json:"queue_size,omitempty"`
	// Number of times to retry when sending data to the upstream server.
	RetryCount *int64 `json:"retry_count,omitempty"`
	// String to be attached as the name of the service.
	ServiceNameTag *string `json:"service_name_tag,omitempty"`
	// String to be attached as the tag of the HTTP status.
	StatusTag *string `json:"status_tag,omitempty"`
}

func (o *DatadogPluginConfig) GetConsumerTag() *string {
	if o == nil {
		return nil
	}
	return o.ConsumerTag
}

func (o *DatadogPluginConfig) GetFlushTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.FlushTimeout
}

func (o *DatadogPluginConfig) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *DatadogPluginConfig) GetMetrics() []DatadogPluginMetrics {
	if o == nil {
		return nil
	}
	return o.Metrics
}

func (o *DatadogPluginConfig) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *DatadogPluginConfig) GetPrefix() *string {
	if o == nil {
		return nil
	}
	return o.Prefix
}

func (o *DatadogPluginConfig) GetQueue() *DatadogPluginQueue {
	if o == nil {
		return nil
	}
	return o.Queue
}

func (o *DatadogPluginConfig) GetQueueSize() *int64 {
	if o == nil {
		return nil
	}
	return o.QueueSize
}

func (o *DatadogPluginConfig) GetRetryCount() *int64 {
	if o == nil {
		return nil
	}
	return o.RetryCount
}

func (o *DatadogPluginConfig) GetServiceNameTag() *string {
	if o == nil {
		return nil
	}
	return o.ServiceNameTag
}

func (o *DatadogPluginConfig) GetStatusTag() *string {
	if o == nil {
		return nil
	}
	return o.StatusTag
}

type DatadogPluginProtocols string

const (
	DatadogPluginProtocolsGrpc           DatadogPluginProtocols = "grpc"
	DatadogPluginProtocolsGrpcs          DatadogPluginProtocols = "grpcs"
	DatadogPluginProtocolsHTTP           DatadogPluginProtocols = "http"
	DatadogPluginProtocolsHTTPS          DatadogPluginProtocols = "https"
	DatadogPluginProtocolsTCP            DatadogPluginProtocols = "tcp"
	DatadogPluginProtocolsTLS            DatadogPluginProtocols = "tls"
	DatadogPluginProtocolsTLSPassthrough DatadogPluginProtocols = "tls_passthrough"
	DatadogPluginProtocolsUDP            DatadogPluginProtocols = "udp"
	DatadogPluginProtocolsWs             DatadogPluginProtocols = "ws"
	DatadogPluginProtocolsWss            DatadogPluginProtocols = "wss"
)

func (e DatadogPluginProtocols) ToPointer() *DatadogPluginProtocols {
	return &e
}
func (e *DatadogPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = DatadogPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DatadogPluginProtocols: %v", v)
	}
}

// DatadogPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type DatadogPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *DatadogPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type DatadogPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *DatadogPluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// DatadogPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type DatadogPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *DatadogPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// DatadogPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type DatadogPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *DatadogPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type DatadogPlugin struct {
	Config *DatadogPluginConfig `json:"config,omitempty"`
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool   `json:"enabled,omitempty"`
	ID           *string `json:"id,omitempty"`
	InstanceName *string `json:"instance_name,omitempty"`
	name         *string `const:"datadog" json:"name,omitempty"`
	Ordering     any     `json:"ordering,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []DatadogPluginProtocols `json:"protocols,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64 `json:"updated_at,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *DatadogPluginConsumer      `json:"consumer,omitempty"`
	ConsumerGroup *DatadogPluginConsumerGroup `json:"consumer_group,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *DatadogPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *DatadogPluginService `json:"service,omitempty"`
}

func (d DatadogPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DatadogPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DatadogPlugin) GetConfig() *DatadogPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *DatadogPlugin) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *DatadogPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *DatadogPlugin) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *DatadogPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *DatadogPlugin) GetName() *string {
	return types.String("datadog")
}

func (o *DatadogPlugin) GetOrdering() any {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *DatadogPlugin) GetProtocols() []DatadogPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *DatadogPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *DatadogPlugin) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *DatadogPlugin) GetConsumer() *DatadogPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *DatadogPlugin) GetConsumerGroup() *DatadogPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *DatadogPlugin) GetRoute() *DatadogPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *DatadogPlugin) GetService() *DatadogPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
