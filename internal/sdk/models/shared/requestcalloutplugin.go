// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-kong-gateway/internal/sdk/internal/utils"
)

type RequestCalloutPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (r *RequestCalloutPluginAfter) GetAccess() []string {
	if r == nil {
		return nil
	}
	return r.Access
}

type RequestCalloutPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (r *RequestCalloutPluginBefore) GetAccess() []string {
	if r == nil {
		return nil
	}
	return r.Access
}

type RequestCalloutPluginOrdering struct {
	After  *RequestCalloutPluginAfter  `json:"after,omitempty"`
	Before *RequestCalloutPluginBefore `json:"before,omitempty"`
}

func (r *RequestCalloutPluginOrdering) GetAfter() *RequestCalloutPluginAfter {
	if r == nil {
		return nil
	}
	return r.After
}

func (r *RequestCalloutPluginOrdering) GetBefore() *RequestCalloutPluginBefore {
	if r == nil {
		return nil
	}
	return r.Before
}

type RequestCalloutPluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

func (r *RequestCalloutPluginPartials) GetID() *string {
	if r == nil {
		return nil
	}
	return r.ID
}

func (r *RequestCalloutPluginPartials) GetName() *string {
	if r == nil {
		return nil
	}
	return r.Name
}

func (r *RequestCalloutPluginPartials) GetPath() *string {
	if r == nil {
		return nil
	}
	return r.Path
}

type RequestCalloutPluginMemory struct {
	// The name of the shared dictionary in which to hold cache entities when the memory strategy is selected. Note that this dictionary currently must be defined manually in the Kong Nginx template.
	DictionaryName *string `json:"dictionary_name,omitempty"`
}

func (r *RequestCalloutPluginMemory) GetDictionaryName() *string {
	if r == nil {
		return nil
	}
	return r.DictionaryName
}

type RequestCalloutPluginClusterNodes struct {
	// A string representing a host name, such as example.com.
	IP *string `json:"ip,omitempty"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port *int64 `json:"port,omitempty"`
}

func (r *RequestCalloutPluginClusterNodes) GetIP() *string {
	if r == nil {
		return nil
	}
	return r.IP
}

func (r *RequestCalloutPluginClusterNodes) GetPort() *int64 {
	if r == nil {
		return nil
	}
	return r.Port
}

type RequestCalloutPluginSentinelNodes struct {
	// A string representing a host name, such as example.com.
	Host *string `json:"host,omitempty"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port *int64 `json:"port,omitempty"`
}

func (r *RequestCalloutPluginSentinelNodes) GetHost() *string {
	if r == nil {
		return nil
	}
	return r.Host
}

func (r *RequestCalloutPluginSentinelNodes) GetPort() *int64 {
	if r == nil {
		return nil
	}
	return r.Port
}

// RequestCalloutPluginSentinelRole - Sentinel role to use for Redis connections when the `redis` strategy is defined. Defining this value implies using Redis Sentinel.
type RequestCalloutPluginSentinelRole string

const (
	RequestCalloutPluginSentinelRoleAny    RequestCalloutPluginSentinelRole = "any"
	RequestCalloutPluginSentinelRoleMaster RequestCalloutPluginSentinelRole = "master"
	RequestCalloutPluginSentinelRoleSlave  RequestCalloutPluginSentinelRole = "slave"
)

func (e RequestCalloutPluginSentinelRole) ToPointer() *RequestCalloutPluginSentinelRole {
	return &e
}
func (e *RequestCalloutPluginSentinelRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "any":
		fallthrough
	case "master":
		fallthrough
	case "slave":
		*e = RequestCalloutPluginSentinelRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RequestCalloutPluginSentinelRole: %v", v)
	}
}

type RequestCalloutPluginRedis struct {
	// Maximum retry attempts for redirection.
	ClusterMaxRedirections *int64 `json:"cluster_max_redirections,omitempty"`
	// Cluster addresses to use for Redis connections when the `redis` strategy is defined. Defining this field implies using a Redis Cluster. The minimum length of the array is 1 element.
	ClusterNodes []RequestCalloutPluginClusterNodes `json:"cluster_nodes,omitempty"`
	// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
	ConnectTimeout *int64 `json:"connect_timeout,omitempty"`
	// If the connection to Redis is proxied (e.g. Envoy), set it `true`. Set the `host` and `port` to point to the proxy address.
	ConnectionIsProxied *bool `json:"connection_is_proxied,omitempty"`
	// Database to use for the Redis connection when using the `redis` strategy
	Database *int64 `json:"database,omitempty"`
	// A string representing a host name, such as example.com.
	Host *string `json:"host,omitempty"`
	// Limits the total number of opened connections for a pool. If the connection pool is full, connection queues above the limit go into the backlog queue. If the backlog queue is full, subsequent connect operations fail and return `nil`. Queued operations (subject to set timeouts) resume once the number of connections in the pool is less than `keepalive_pool_size`. If latency is high or throughput is low, try increasing this value. Empirically, this value is larger than `keepalive_pool_size`.
	KeepaliveBacklog *int64 `json:"keepalive_backlog,omitempty"`
	// The size limit for every cosocket connection pool associated with every remote server, per worker process. If neither `keepalive_pool_size` nor `keepalive_backlog` is specified, no pool is created. If `keepalive_pool_size` isn't specified but `keepalive_backlog` is specified, then the pool uses the default value. Try to increase (e.g. 512) this value if latency is high or throughput is low.
	KeepalivePoolSize *int64 `json:"keepalive_pool_size,omitempty"`
	// Password to use for Redis connections. If undefined, no AUTH commands are sent to Redis.
	Password *string `json:"password,omitempty"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port *int64 `json:"port,omitempty"`
	// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
	ReadTimeout *int64 `json:"read_timeout,omitempty"`
	// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
	SendTimeout *int64 `json:"send_timeout,omitempty"`
	// Sentinel master to use for Redis connections. Defining this value implies using Redis Sentinel.
	SentinelMaster *string `json:"sentinel_master,omitempty"`
	// Sentinel node addresses to use for Redis connections when the `redis` strategy is defined. Defining this field implies using a Redis Sentinel. The minimum length of the array is 1 element.
	SentinelNodes []RequestCalloutPluginSentinelNodes `json:"sentinel_nodes,omitempty"`
	// Sentinel password to authenticate with a Redis Sentinel instance. If undefined, no AUTH commands are sent to Redis Sentinels.
	SentinelPassword *string `json:"sentinel_password,omitempty"`
	// Sentinel role to use for Redis connections when the `redis` strategy is defined. Defining this value implies using Redis Sentinel.
	SentinelRole *RequestCalloutPluginSentinelRole `json:"sentinel_role,omitempty"`
	// Sentinel username to authenticate with a Redis Sentinel instance. If undefined, ACL authentication won't be performed. This requires Redis v6.2.0+.
	SentinelUsername *string `json:"sentinel_username,omitempty"`
	// A string representing an SNI (server name indication) value for TLS.
	ServerName *string `json:"server_name,omitempty"`
	// If set to true, uses SSL to connect to Redis.
	Ssl *bool `json:"ssl,omitempty"`
	// If set to true, verifies the validity of the server SSL certificate. If setting this parameter, also configure `lua_ssl_trusted_certificate` in `kong.conf` to specify the CA (or server) certificate used by your Redis server. You may also need to configure `lua_ssl_verify_depth` accordingly.
	SslVerify *bool `json:"ssl_verify,omitempty"`
	// Username to use for Redis connections. If undefined, ACL authentication won't be performed. This requires Redis v6.0.0+. To be compatible with Redis v5.x.y, you can set it to `default`.
	Username *string `json:"username,omitempty"`
}

func (r *RequestCalloutPluginRedis) GetClusterMaxRedirections() *int64 {
	if r == nil {
		return nil
	}
	return r.ClusterMaxRedirections
}

func (r *RequestCalloutPluginRedis) GetClusterNodes() []RequestCalloutPluginClusterNodes {
	if r == nil {
		return nil
	}
	return r.ClusterNodes
}

func (r *RequestCalloutPluginRedis) GetConnectTimeout() *int64 {
	if r == nil {
		return nil
	}
	return r.ConnectTimeout
}

func (r *RequestCalloutPluginRedis) GetConnectionIsProxied() *bool {
	if r == nil {
		return nil
	}
	return r.ConnectionIsProxied
}

func (r *RequestCalloutPluginRedis) GetDatabase() *int64 {
	if r == nil {
		return nil
	}
	return r.Database
}

func (r *RequestCalloutPluginRedis) GetHost() *string {
	if r == nil {
		return nil
	}
	return r.Host
}

func (r *RequestCalloutPluginRedis) GetKeepaliveBacklog() *int64 {
	if r == nil {
		return nil
	}
	return r.KeepaliveBacklog
}

func (r *RequestCalloutPluginRedis) GetKeepalivePoolSize() *int64 {
	if r == nil {
		return nil
	}
	return r.KeepalivePoolSize
}

func (r *RequestCalloutPluginRedis) GetPassword() *string {
	if r == nil {
		return nil
	}
	return r.Password
}

func (r *RequestCalloutPluginRedis) GetPort() *int64 {
	if r == nil {
		return nil
	}
	return r.Port
}

func (r *RequestCalloutPluginRedis) GetReadTimeout() *int64 {
	if r == nil {
		return nil
	}
	return r.ReadTimeout
}

func (r *RequestCalloutPluginRedis) GetSendTimeout() *int64 {
	if r == nil {
		return nil
	}
	return r.SendTimeout
}

func (r *RequestCalloutPluginRedis) GetSentinelMaster() *string {
	if r == nil {
		return nil
	}
	return r.SentinelMaster
}

func (r *RequestCalloutPluginRedis) GetSentinelNodes() []RequestCalloutPluginSentinelNodes {
	if r == nil {
		return nil
	}
	return r.SentinelNodes
}

func (r *RequestCalloutPluginRedis) GetSentinelPassword() *string {
	if r == nil {
		return nil
	}
	return r.SentinelPassword
}

func (r *RequestCalloutPluginRedis) GetSentinelRole() *RequestCalloutPluginSentinelRole {
	if r == nil {
		return nil
	}
	return r.SentinelRole
}

func (r *RequestCalloutPluginRedis) GetSentinelUsername() *string {
	if r == nil {
		return nil
	}
	return r.SentinelUsername
}

func (r *RequestCalloutPluginRedis) GetServerName() *string {
	if r == nil {
		return nil
	}
	return r.ServerName
}

func (r *RequestCalloutPluginRedis) GetSsl() *bool {
	if r == nil {
		return nil
	}
	return r.Ssl
}

func (r *RequestCalloutPluginRedis) GetSslVerify() *bool {
	if r == nil {
		return nil
	}
	return r.SslVerify
}

func (r *RequestCalloutPluginRedis) GetUsername() *string {
	if r == nil {
		return nil
	}
	return r.Username
}

// RequestCalloutPluginStrategy - The backing data store in which to hold cache entities. Accepted values are: `off`, `memory`, and `redis`.
type RequestCalloutPluginStrategy string

const (
	RequestCalloutPluginStrategyMemory RequestCalloutPluginStrategy = "memory"
	RequestCalloutPluginStrategyOff    RequestCalloutPluginStrategy = "off"
	RequestCalloutPluginStrategyRedis  RequestCalloutPluginStrategy = "redis"
)

func (e RequestCalloutPluginStrategy) ToPointer() *RequestCalloutPluginStrategy {
	return &e
}
func (e *RequestCalloutPluginStrategy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "memory":
		fallthrough
	case "off":
		fallthrough
	case "redis":
		*e = RequestCalloutPluginStrategy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RequestCalloutPluginStrategy: %v", v)
	}
}

// Cache - Plugin global caching configuration.
type Cache struct {
	// TTL in seconds of cache entities.
	CacheTTL *int64                      `json:"cache_ttl,omitempty"`
	Memory   *RequestCalloutPluginMemory `json:"memory,omitempty"`
	Redis    *RequestCalloutPluginRedis  `json:"redis,omitempty"`
	// The backing data store in which to hold cache entities. Accepted values are: `off`, `memory`, and `redis`.
	Strategy *RequestCalloutPluginStrategy `json:"strategy,omitempty"`
}

func (c *Cache) GetCacheTTL() *int64 {
	if c == nil {
		return nil
	}
	return c.CacheTTL
}

func (c *Cache) GetMemory() *RequestCalloutPluginMemory {
	if c == nil {
		return nil
	}
	return c.Memory
}

func (c *Cache) GetRedis() *RequestCalloutPluginRedis {
	if c == nil {
		return nil
	}
	return c.Redis
}

func (c *Cache) GetStrategy() *RequestCalloutPluginStrategy {
	if c == nil {
		return nil
	}
	return c.Strategy
}

// RequestCalloutPluginCache - Callout caching configuration.
type RequestCalloutPluginCache struct {
	// If `true`, skips caching the callout response.
	Bypass *bool `json:"bypass,omitempty"`
}

func (r *RequestCalloutPluginCache) GetBypass() *bool {
	if r == nil {
		return nil
	}
	return r.Bypass
}

// RequestCalloutPluginConfigBody - Callout request body customizations.
type RequestCalloutPluginConfigBody struct {
	// The custom body fields to be added to the callout HTTP request. Values can contain Lua expressions in the form $(some_lua_expression). The syntax is based on `request-transformer-advanced` templates.
	Custom map[string]any `json:"custom,omitempty"`
	// If `true`, decodes the request's body and make it available for customizations. Only JSON content type is supported.
	Decode *bool `json:"decode,omitempty"`
	// If `true`, forwards the incoming request's body to the callout request.
	Forward *bool `json:"forward,omitempty"`
}

func (r *RequestCalloutPluginConfigBody) GetCustom() map[string]any {
	if r == nil {
		return nil
	}
	return r.Custom
}

func (r *RequestCalloutPluginConfigBody) GetDecode() *bool {
	if r == nil {
		return nil
	}
	return r.Decode
}

func (r *RequestCalloutPluginConfigBody) GetForward() *bool {
	if r == nil {
		return nil
	}
	return r.Forward
}

type OnError string

const (
	OnErrorContinue OnError = "continue"
	OnErrorFail     OnError = "fail"
	OnErrorRetry    OnError = "retry"
)

func (e OnError) ToPointer() *OnError {
	return &e
}
func (e *OnError) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "continue":
		fallthrough
	case "fail":
		fallthrough
	case "retry":
		*e = OnError(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OnError: %v", v)
	}
}

// Error - The error handling policy the plugin will apply to TCP and HTTP errors.
type Error struct {
	// The error code to respond with if `on_error` is `fail` or if `retries` is achieved.
	ErrorResponseCode *int64 `json:"error_response_code,omitempty"`
	// The error message to respond with if `on_error` is set to `fail` or if `retries` is achieved. Templating with Lua expressions is supported.
	ErrorResponseMsg *string `json:"error_response_msg,omitempty"`
	// The list of HTTP status codes considered errors under the error handling policy.
	HTTPStatuses []int64  `json:"http_statuses,omitempty"`
	OnError      *OnError `json:"on_error,omitempty"`
	// The number of retries the plugin will attempt on TCP and HTTP errors if `on_error` is set to `retry`.
	Retries *int64 `json:"retries,omitempty"`
}

func (e *Error) GetErrorResponseCode() *int64 {
	if e == nil {
		return nil
	}
	return e.ErrorResponseCode
}

func (e *Error) GetErrorResponseMsg() *string {
	if e == nil {
		return nil
	}
	return e.ErrorResponseMsg
}

func (e *Error) GetHTTPStatuses() []int64 {
	if e == nil {
		return nil
	}
	return e.HTTPStatuses
}

func (e *Error) GetOnError() *OnError {
	if e == nil {
		return nil
	}
	return e.OnError
}

func (e *Error) GetRetries() *int64 {
	if e == nil {
		return nil
	}
	return e.Retries
}

// RequestCalloutPluginConfigHeaders - Callout request header customizations.
type RequestCalloutPluginConfigHeaders struct {
	// The custom headers to be added in the callout HTTP request. Values can contain Lua expressions in the form `$(some_lua_expression)`. The syntax is based on `request-transformer-advanced` templates.
	Custom map[string]any `json:"custom,omitempty"`
	// If `true`, forwards the incoming request's headers to the callout request.
	Forward *bool `json:"forward,omitempty"`
}

func (r *RequestCalloutPluginConfigHeaders) GetCustom() map[string]any {
	if r == nil {
		return nil
	}
	return r.Custom
}

func (r *RequestCalloutPluginConfigHeaders) GetForward() *bool {
	if r == nil {
		return nil
	}
	return r.Forward
}

// Proxy settings.
type Proxy struct {
	// The password to authenticate with, if the forward proxy is protected by basic authentication.
	AuthPassword *string `json:"auth_password,omitempty"`
	// The username to authenticate with, if the forward proxy is protected by basic authentication.
	AuthUsername *string `json:"auth_username,omitempty"`
	// The HTTP proxy URL. This proxy server will be used for HTTP requests.
	HTTPProxy *string `json:"http_proxy,omitempty"`
	// The HTTPS proxy URL. This proxy server will be used for HTTPS requests.
	HTTPSProxy *string `json:"https_proxy,omitempty"`
}

func (p *Proxy) GetAuthPassword() *string {
	if p == nil {
		return nil
	}
	return p.AuthPassword
}

func (p *Proxy) GetAuthUsername() *string {
	if p == nil {
		return nil
	}
	return p.AuthUsername
}

func (p *Proxy) GetHTTPProxy() *string {
	if p == nil {
		return nil
	}
	return p.HTTPProxy
}

func (p *Proxy) GetHTTPSProxy() *string {
	if p == nil {
		return nil
	}
	return p.HTTPSProxy
}

// Timeouts - Socket timeouts in milliseconds. All or none must be set.
type Timeouts struct {
	// The socket connect timeout.
	Connect *int64 `json:"connect,omitempty"`
	// The socket read timeout.
	Read *int64 `json:"read,omitempty"`
	// The socket write timeout.
	Write *int64 `json:"write,omitempty"`
}

func (t *Timeouts) GetConnect() *int64 {
	if t == nil {
		return nil
	}
	return t.Connect
}

func (t *Timeouts) GetRead() *int64 {
	if t == nil {
		return nil
	}
	return t.Read
}

func (t *Timeouts) GetWrite() *int64 {
	if t == nil {
		return nil
	}
	return t.Write
}

// HTTPOpts - HTTP connection parameters.
type HTTPOpts struct {
	// Proxy settings.
	Proxy *Proxy `json:"proxy,omitempty"`
	// The SNI used in the callout request. Defaults to host if omitted.
	SslServerName *string `json:"ssl_server_name,omitempty"`
	// If set to `true`, verifies the validity of the server SSL certificate. If setting this parameter, also configure `lua_ssl_trusted_certificate` in `kong.conf` to specify the CA (or server) certificate used by your Redis server. You may also need to configure `lua_ssl_verify_depth` accordingly.
	SslVerify *bool `json:"ssl_verify,omitempty"`
	// Socket timeouts in milliseconds. All or none must be set.
	Timeouts *Timeouts `json:"timeouts,omitempty"`
}

func (h *HTTPOpts) GetProxy() *Proxy {
	if h == nil {
		return nil
	}
	return h.Proxy
}

func (h *HTTPOpts) GetSslServerName() *string {
	if h == nil {
		return nil
	}
	return h.SslServerName
}

func (h *HTTPOpts) GetSslVerify() *bool {
	if h == nil {
		return nil
	}
	return h.SslVerify
}

func (h *HTTPOpts) GetTimeouts() *Timeouts {
	if h == nil {
		return nil
	}
	return h.Timeouts
}

// RequestCalloutPluginQuery - Callout request query param customizations.
type RequestCalloutPluginQuery struct {
	// The custom query params to be added in the callout HTTP request. Values can contain Lua expressions in the form `$(some_lua_expression)`. The syntax is based on `request-transformer-advanced` templates.
	Custom map[string]any `json:"custom,omitempty"`
	// If `true`, forwards the incoming request's query params to the callout request.
	Forward *bool `json:"forward,omitempty"`
}

func (r *RequestCalloutPluginQuery) GetCustom() map[string]any {
	if r == nil {
		return nil
	}
	return r.Custom
}

func (r *RequestCalloutPluginQuery) GetForward() *bool {
	if r == nil {
		return nil
	}
	return r.Forward
}

// Request - The customizations for the callout request.
type Request struct {
	// Callout request body customizations.
	Body *RequestCalloutPluginConfigBody `json:"body,omitempty"`
	// Lua code that executes before the callout request is made. **Warning** can impact system behavior. Standard Lua sandboxing restrictions apply.
	ByLua *string `json:"by_lua,omitempty"`
	// The error handling policy the plugin will apply to TCP and HTTP errors.
	Error *Error `json:"error,omitempty"`
	// Callout request header customizations.
	Headers *RequestCalloutPluginConfigHeaders `json:"headers,omitempty"`
	// HTTP connection parameters.
	HTTPOpts *HTTPOpts `json:"http_opts,omitempty"`
	// The HTTP method that will be requested.
	Method *string `json:"method,omitempty"`
	// Callout request query param customizations.
	Query *RequestCalloutPluginQuery `json:"query,omitempty"`
	// The URL that will be requested. Values can contain Lua expressions in the form `$(some_lua_expression)`. The syntax is based on `request-transformer-advanced` templates.
	URL string `json:"url"`
}

func (r *Request) GetBody() *RequestCalloutPluginConfigBody {
	if r == nil {
		return nil
	}
	return r.Body
}

func (r *Request) GetByLua() *string {
	if r == nil {
		return nil
	}
	return r.ByLua
}

func (r *Request) GetError() *Error {
	if r == nil {
		return nil
	}
	return r.Error
}

func (r *Request) GetHeaders() *RequestCalloutPluginConfigHeaders {
	if r == nil {
		return nil
	}
	return r.Headers
}

func (r *Request) GetHTTPOpts() *HTTPOpts {
	if r == nil {
		return nil
	}
	return r.HTTPOpts
}

func (r *Request) GetMethod() *string {
	if r == nil {
		return nil
	}
	return r.Method
}

func (r *Request) GetQuery() *RequestCalloutPluginQuery {
	if r == nil {
		return nil
	}
	return r.Query
}

func (r *Request) GetURL() string {
	if r == nil {
		return ""
	}
	return r.URL
}

type RequestCalloutPluginBody struct {
	// If `true`, decodes the response body before storing into the context. Only JSON is supported.
	Decode *bool `json:"decode,omitempty"`
	// If `false`, skips storing the callout response body into kong.ctx.shared.callouts.<name>.response.body.
	Store *bool `json:"store,omitempty"`
}

func (r *RequestCalloutPluginBody) GetDecode() *bool {
	if r == nil {
		return nil
	}
	return r.Decode
}

func (r *RequestCalloutPluginBody) GetStore() *bool {
	if r == nil {
		return nil
	}
	return r.Store
}

// RequestCalloutPluginHeaders - Callout response header customizations.
type RequestCalloutPluginHeaders struct {
	// If `false`, skips storing the callout response headers into kong.ctx.shared.callouts.<name>.response.headers.
	Store *bool `json:"store,omitempty"`
}

func (r *RequestCalloutPluginHeaders) GetStore() *bool {
	if r == nil {
		return nil
	}
	return r.Store
}

// Response - Configurations of callout response handling.
type Response struct {
	Body *RequestCalloutPluginBody `json:"body,omitempty"`
	// Lua code that executes after the callout response is received, before caching takes place. Can produce side effects. Standard Lua sandboxing restrictions apply.
	ByLua *string `json:"by_lua,omitempty"`
	// Callout response header customizations.
	Headers *RequestCalloutPluginHeaders `json:"headers,omitempty"`
}

func (r *Response) GetBody() *RequestCalloutPluginBody {
	if r == nil {
		return nil
	}
	return r.Body
}

func (r *Response) GetByLua() *string {
	if r == nil {
		return nil
	}
	return r.ByLua
}

func (r *Response) GetHeaders() *RequestCalloutPluginHeaders {
	if r == nil {
		return nil
	}
	return r.Headers
}

type Callouts struct {
	// Callout caching configuration.
	Cache *RequestCalloutPluginCache `json:"cache,omitempty"`
	// An array of callout names the current callout depends on. This dependency list determines the callout execution order via a topological sorting algorithm.
	DependsOn []string `json:"depends_on,omitempty"`
	// A string identifier for a callout. A callout object is referenceable via its name in the `kong.ctx.shared.callouts.<name>`
	Name string `json:"name"`
	// The customizations for the callout request.
	Request Request `json:"request"`
	// Configurations of callout response handling.
	Response *Response `json:"response,omitempty"`
}

func (c *Callouts) GetCache() *RequestCalloutPluginCache {
	if c == nil {
		return nil
	}
	return c.Cache
}

func (c *Callouts) GetDependsOn() []string {
	if c == nil {
		return nil
	}
	return c.DependsOn
}

func (c *Callouts) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *Callouts) GetRequest() Request {
	if c == nil {
		return Request{}
	}
	return c.Request
}

func (c *Callouts) GetResponse() *Response {
	if c == nil {
		return nil
	}
	return c.Response
}

// Body - Callout request body customizations.
type Body struct {
	// The custom body fields to be added in the upstream request body. Values can contain Lua expressions in the form $(some_lua_expression). The syntax is based on `request-transformer-advanced` templates.
	Custom map[string]any `json:"custom,omitempty"`
	// If `true`, decodes the request's body to make it available for upstream by_lua customizations. Only JSON content type is supported.
	Decode *bool `json:"decode,omitempty"`
	// If `false`, skips forwarding the incoming request's body to the upstream request.
	Forward *bool `json:"forward,omitempty"`
}

func (b *Body) GetCustom() map[string]any {
	if b == nil {
		return nil
	}
	return b.Custom
}

func (b *Body) GetDecode() *bool {
	if b == nil {
		return nil
	}
	return b.Decode
}

func (b *Body) GetForward() *bool {
	if b == nil {
		return nil
	}
	return b.Forward
}

// Headers - Callout request header customizations.
type Headers struct {
	// The custom headers to be added in the upstream HTTP request. Values can contain Lua expressions in the form $(some_lua_expression). The syntax is based on `request-transformer-advanced` templates.
	Custom map[string]any `json:"custom,omitempty"`
	// If `false`, does not forward request headers to upstream request.
	Forward *bool `json:"forward,omitempty"`
}

func (h *Headers) GetCustom() map[string]any {
	if h == nil {
		return nil
	}
	return h.Custom
}

func (h *Headers) GetForward() *bool {
	if h == nil {
		return nil
	}
	return h.Forward
}

// Query - Upstream request query param customizations.
type Query struct {
	// The custom query params to be added in the upstream HTTP request. Values can contain Lua expressions in the form `$(some_lua_expression)`. The syntax is based on `request-transformer-advanced` templates.
	Custom map[string]any `json:"custom,omitempty"`
	// If `false`, does not forward request query params to upstream request.
	Forward *bool `json:"forward,omitempty"`
}

func (q *Query) GetCustom() map[string]any {
	if q == nil {
		return nil
	}
	return q.Custom
}

func (q *Query) GetForward() *bool {
	if q == nil {
		return nil
	}
	return q.Forward
}

// RequestCalloutPluginUpstream - Customizations to the upstream request.
type RequestCalloutPluginUpstream struct {
	// Callout request body customizations.
	Body *Body `json:"body,omitempty"`
	// Lua code that executes before the upstream request is made. Can produce side effects. Standard Lua sandboxing restrictions apply.
	ByLua *string `json:"by_lua,omitempty"`
	// Callout request header customizations.
	Headers *Headers `json:"headers,omitempty"`
	// Upstream request query param customizations.
	Query *Query `json:"query,omitempty"`
}

func (r *RequestCalloutPluginUpstream) GetBody() *Body {
	if r == nil {
		return nil
	}
	return r.Body
}

func (r *RequestCalloutPluginUpstream) GetByLua() *string {
	if r == nil {
		return nil
	}
	return r.ByLua
}

func (r *RequestCalloutPluginUpstream) GetHeaders() *Headers {
	if r == nil {
		return nil
	}
	return r.Headers
}

func (r *RequestCalloutPluginUpstream) GetQuery() *Query {
	if r == nil {
		return nil
	}
	return r.Query
}

type RequestCalloutPluginConfig struct {
	// Plugin global caching configuration.
	Cache *Cache `json:"cache,omitempty"`
	// A collection of callout objects, where each object represents an HTTP request made in the context of a proxy request.
	Callouts []Callouts `json:"callouts"`
	// Customizations to the upstream request.
	Upstream *RequestCalloutPluginUpstream `json:"upstream,omitempty"`
}

func (r *RequestCalloutPluginConfig) GetCache() *Cache {
	if r == nil {
		return nil
	}
	return r.Cache
}

func (r *RequestCalloutPluginConfig) GetCallouts() []Callouts {
	if r == nil {
		return []Callouts{}
	}
	return r.Callouts
}

func (r *RequestCalloutPluginConfig) GetUpstream() *RequestCalloutPluginUpstream {
	if r == nil {
		return nil
	}
	return r.Upstream
}

// RequestCalloutPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type RequestCalloutPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (r *RequestCalloutPluginConsumer) GetID() *string {
	if r == nil {
		return nil
	}
	return r.ID
}

// RequestCalloutPluginConsumerGroup - If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups
type RequestCalloutPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (r *RequestCalloutPluginConsumerGroup) GetID() *string {
	if r == nil {
		return nil
	}
	return r.ID
}

type RequestCalloutPluginProtocols string

const (
	RequestCalloutPluginProtocolsGrpc  RequestCalloutPluginProtocols = "grpc"
	RequestCalloutPluginProtocolsGrpcs RequestCalloutPluginProtocols = "grpcs"
	RequestCalloutPluginProtocolsHTTP  RequestCalloutPluginProtocols = "http"
	RequestCalloutPluginProtocolsHTTPS RequestCalloutPluginProtocols = "https"
)

func (e RequestCalloutPluginProtocols) ToPointer() *RequestCalloutPluginProtocols {
	return &e
}
func (e *RequestCalloutPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		*e = RequestCalloutPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RequestCalloutPluginProtocols: %v", v)
	}
}

// RequestCalloutPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type RequestCalloutPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (r *RequestCalloutPluginRoute) GetID() *string {
	if r == nil {
		return nil
	}
	return r.ID
}

// RequestCalloutPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type RequestCalloutPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (r *RequestCalloutPluginService) GetID() *string {
	if r == nil {
		return nil
	}
	return r.ID
}

// RequestCalloutPlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type RequestCalloutPlugin struct {
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `json:"enabled,omitempty"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string                       `json:"instance_name,omitempty"`
	name         string                        `const:"request-callout" json:"name"`
	Ordering     *RequestCalloutPluginOrdering `json:"ordering,omitempty"`
	// A list of partials to be used by the plugin.
	Partials []RequestCalloutPluginPartials `json:"partials,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64                     `json:"updated_at,omitempty"`
	Config    RequestCalloutPluginConfig `json:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer *RequestCalloutPluginConsumer `json:"consumer,omitempty"`
	// If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups
	ConsumerGroup *RequestCalloutPluginConsumerGroup `json:"consumer_group,omitempty"`
	// A set of strings representing HTTP protocols.
	Protocols []RequestCalloutPluginProtocols `json:"protocols,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *RequestCalloutPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *RequestCalloutPluginService `json:"service,omitempty"`
}

func (r RequestCalloutPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RequestCalloutPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, []string{"name", "config"}); err != nil {
		return err
	}
	return nil
}

func (r *RequestCalloutPlugin) GetCreatedAt() *int64 {
	if r == nil {
		return nil
	}
	return r.CreatedAt
}

func (r *RequestCalloutPlugin) GetEnabled() *bool {
	if r == nil {
		return nil
	}
	return r.Enabled
}

func (r *RequestCalloutPlugin) GetID() *string {
	if r == nil {
		return nil
	}
	return r.ID
}

func (r *RequestCalloutPlugin) GetInstanceName() *string {
	if r == nil {
		return nil
	}
	return r.InstanceName
}

func (r *RequestCalloutPlugin) GetName() string {
	return "request-callout"
}

func (r *RequestCalloutPlugin) GetOrdering() *RequestCalloutPluginOrdering {
	if r == nil {
		return nil
	}
	return r.Ordering
}

func (r *RequestCalloutPlugin) GetPartials() []RequestCalloutPluginPartials {
	if r == nil {
		return nil
	}
	return r.Partials
}

func (r *RequestCalloutPlugin) GetTags() []string {
	if r == nil {
		return nil
	}
	return r.Tags
}

func (r *RequestCalloutPlugin) GetUpdatedAt() *int64 {
	if r == nil {
		return nil
	}
	return r.UpdatedAt
}

func (r *RequestCalloutPlugin) GetConfig() RequestCalloutPluginConfig {
	if r == nil {
		return RequestCalloutPluginConfig{}
	}
	return r.Config
}

func (r *RequestCalloutPlugin) GetConsumer() *RequestCalloutPluginConsumer {
	if r == nil {
		return nil
	}
	return r.Consumer
}

func (r *RequestCalloutPlugin) GetConsumerGroup() *RequestCalloutPluginConsumerGroup {
	if r == nil {
		return nil
	}
	return r.ConsumerGroup
}

func (r *RequestCalloutPlugin) GetProtocols() []RequestCalloutPluginProtocols {
	if r == nil {
		return nil
	}
	return r.Protocols
}

func (r *RequestCalloutPlugin) GetRoute() *RequestCalloutPluginRoute {
	if r == nil {
		return nil
	}
	return r.Route
}

func (r *RequestCalloutPlugin) GetService() *RequestCalloutPluginService {
	if r == nil {
		return nil
	}
	return r.Service
}
